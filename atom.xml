<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thinkloki</title>
  <subtitle>做人不卖萌和咸鱼有什么区别</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wait.im/"/>
  <updated>2017-03-14T03:29:56.000Z</updated>
  <id>https://wait.im/</id>
  
  <author>
    <name>thinkloki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决hexo部署DTraceProviderBindings MODULE_NOT_FOUND</title>
    <link href="https://wait.im/2017/03/14/hexo%E9%83%A8%E7%BD%B2DTraceProviderBindings%20MODULE_NOT_FOUND/"/>
    <id>https://wait.im/2017/03/14/hexo部署DTraceProviderBindings MODULE_NOT_FOUND/</id>
    <published>2017-03-13T16:11:19.000Z</published>
    <updated>2017-03-14T03:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>部署hexo的时候遇到很恶心的hexo报错，执行任何hexo命令都会报如下错误，但却不影响正确功能。</p>
<h3 id="hexo报错"><a href="#hexo报错" class="headerlink" title="hexo报错"></a>hexo报错</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; [Error: Cannot <span class="built_in">find</span> <span class="keyword">module</span> <span class="string">'./build/Release/DTraceProviderBindings'</span>] code: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="详细log"><a href="#详细log" class="headerlink" title="详细log"></a>详细log</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&#123; Error: Cannot find module <span class="string">'./build/Release/DTraceProviderBindings'</span></div><div class="line">    at Function<span class="selector-class">.Module</span>._resolveFilename (module<span class="selector-class">.js</span>:<span class="number">470</span>:<span class="number">15</span>)</div><div class="line">    at Function<span class="selector-class">.Module</span>._load (module<span class="selector-class">.js</span>:<span class="number">418</span>:<span class="number">25</span>)</div><div class="line">    at Module<span class="selector-class">.require</span> (module<span class="selector-class">.js</span>:<span class="number">498</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module<span class="selector-class">.js</span>:<span class="number">20</span>:<span class="number">19</span>)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider<span class="selector-class">.js</span>:<span class="number">17</span>:<span class="number">23</span>)</div><div class="line">    at Module._compile (module<span class="selector-class">.js</span>:<span class="number">571</span>:<span class="number">32</span>)</div><div class="line">    at Object<span class="selector-class">.Module</span>._extensions.<span class="selector-class">.js</span> (module<span class="selector-class">.js</span>:<span class="number">580</span>:<span class="number">10</span>)</div><div class="line">    at Module<span class="selector-class">.load</span> (module<span class="selector-class">.js</span>:<span class="number">488</span>:<span class="number">32</span>)</div><div class="line">    at tryModuleLoad (module<span class="selector-class">.js</span>:<span class="number">447</span>:<span class="number">12</span>)</div><div class="line">    at Function<span class="selector-class">.Module</span>._load (module<span class="selector-class">.js</span>:<span class="number">439</span>:<span class="number">3</span>)</div><div class="line">    at Module<span class="selector-class">.require</span> (module<span class="selector-class">.js</span>:<span class="number">498</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module<span class="selector-class">.js</span>:<span class="number">20</span>:<span class="number">19</span>)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan<span class="selector-class">.js</span>:<span class="number">79</span>:<span class="number">18</span>)</div><div class="line">    at Module._compile (module<span class="selector-class">.js</span>:<span class="number">571</span>:<span class="number">32</span>)</div><div class="line">    at Object<span class="selector-class">.Module</span>._extensions.<span class="selector-class">.js</span> (module<span class="selector-class">.js</span>:<span class="number">580</span>:<span class="number">10</span>)</div><div class="line">    at Module<span class="selector-class">.load</span> (module<span class="selector-class">.js</span>:<span class="number">488</span>:<span class="number">32</span>) <span class="selector-tag">code</span>: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div><div class="line">&#123; Error: Cannot find module <span class="string">'./build/default/DTraceProviderBindings'</span></div><div class="line">    at Function<span class="selector-class">.Module</span>._resolveFilename (module<span class="selector-class">.js</span>:<span class="number">470</span>:<span class="number">15</span>)</div><div class="line">    at Function<span class="selector-class">.Module</span>._load (module<span class="selector-class">.js</span>:<span class="number">418</span>:<span class="number">25</span>)</div><div class="line">    at Module<span class="selector-class">.require</span> (module<span class="selector-class">.js</span>:<span class="number">498</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module<span class="selector-class">.js</span>:<span class="number">20</span>:<span class="number">19</span>)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider<span class="selector-class">.js</span>:<span class="number">17</span>:<span class="number">23</span>)</div><div class="line">    at Module._compile (module<span class="selector-class">.js</span>:<span class="number">571</span>:<span class="number">32</span>)</div><div class="line">    at Object<span class="selector-class">.Module</span>._extensions.<span class="selector-class">.js</span> (module<span class="selector-class">.js</span>:<span class="number">580</span>:<span class="number">10</span>)</div><div class="line">    at Module<span class="selector-class">.load</span> (module<span class="selector-class">.js</span>:<span class="number">488</span>:<span class="number">32</span>)</div><div class="line">    at tryModuleLoad (module<span class="selector-class">.js</span>:<span class="number">447</span>:<span class="number">12</span>)</div><div class="line">    at Function<span class="selector-class">.Module</span>._load (module<span class="selector-class">.js</span>:<span class="number">439</span>:<span class="number">3</span>)</div><div class="line">    at Module<span class="selector-class">.require</span> (module<span class="selector-class">.js</span>:<span class="number">498</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module<span class="selector-class">.js</span>:<span class="number">20</span>:<span class="number">19</span>)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan<span class="selector-class">.js</span>:<span class="number">79</span>:<span class="number">18</span>)</div><div class="line">    at Module._compile (module<span class="selector-class">.js</span>:<span class="number">571</span>:<span class="number">32</span>)</div><div class="line">    at Object<span class="selector-class">.Module</span>._extensions.<span class="selector-class">.js</span> (module<span class="selector-class">.js</span>:<span class="number">580</span>:<span class="number">10</span>)</div><div class="line">    at Module<span class="selector-class">.load</span> (module<span class="selector-class">.js</span>:<span class="number">488</span>:<span class="number">32</span>) <span class="selector-tag">code</span>: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div><div class="line">&#123; Error: Cannot find module <span class="string">'./build/Debug/DTraceProviderBindings'</span></div><div class="line">    at Function<span class="selector-class">.Module</span>._resolveFilename (module<span class="selector-class">.js</span>:<span class="number">470</span>:<span class="number">15</span>)</div><div class="line">    at Function<span class="selector-class">.Module</span>._load (module<span class="selector-class">.js</span>:<span class="number">418</span>:<span class="number">25</span>)</div><div class="line">    at Module<span class="selector-class">.require</span> (module<span class="selector-class">.js</span>:<span class="number">498</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module<span class="selector-class">.js</span>:<span class="number">20</span>:<span class="number">19</span>)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider<span class="selector-class">.js</span>:<span class="number">17</span>:<span class="number">23</span>)</div><div class="line">    at Module._compile (module<span class="selector-class">.js</span>:<span class="number">571</span>:<span class="number">32</span>)</div><div class="line">    at Object<span class="selector-class">.Module</span>._extensions.<span class="selector-class">.js</span> (module<span class="selector-class">.js</span>:<span class="number">580</span>:<span class="number">10</span>)</div><div class="line">    at Module<span class="selector-class">.load</span> (module<span class="selector-class">.js</span>:<span class="number">488</span>:<span class="number">32</span>)</div><div class="line">    at tryModuleLoad (module<span class="selector-class">.js</span>:<span class="number">447</span>:<span class="number">12</span>)</div><div class="line">    at Function<span class="selector-class">.Module</span>._load (module<span class="selector-class">.js</span>:<span class="number">439</span>:<span class="number">3</span>)</div><div class="line">    at Module<span class="selector-class">.require</span> (module<span class="selector-class">.js</span>:<span class="number">498</span>:<span class="number">17</span>)</div><div class="line">    at require (internal/module<span class="selector-class">.js</span>:<span class="number">20</span>:<span class="number">19</span>)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan<span class="selector-class">.js</span>:<span class="number">79</span>:<span class="number">18</span>)</div><div class="line">    at Module._compile (module<span class="selector-class">.js</span>:<span class="number">571</span>:<span class="number">32</span>)</div><div class="line">    at Object<span class="selector-class">.Module</span>._extensions.<span class="selector-class">.js</span> (module<span class="selector-class">.js</span>:<span class="number">580</span>:<span class="number">10</span>)</div><div class="line">    at Module<span class="selector-class">.load</span> (module<span class="selector-class">.js</span>:<span class="number">488</span>:<span class="number">32</span>) <span class="selector-tag">code</span>: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>
<h3 id="Google的方法"><a href="#Google的方法" class="headerlink" title="Google的方法"></a>Google的方法</h3><p>google之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> install hexo --<span class="literal">no</span>-optional</div></pre></td></tr></table></figure>
<p>执行上面的命令之后都解决了报错的问题，但我一样执行后没有任何效果，我甚至尝试了卸载后重装的方式。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">npm</span> uninstall hexo</div><div class="line">$ <span class="built_in">npm</span> install hexo --<span class="literal">no</span>-optional</div></pre></td></tr></table></figure>
<p>可是依旧没有效果。<br>其实hexo暂时并没有用到<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### 解决办法</div><div class="line">重装hexo-cli</div></pre></td></tr></table></figure></p>
<p>$ npm uninstall hexo-cli -g<br>$ npm install hexo-cli -g<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署hexo的时候遇到很恶心的hexo报错，执行任何hexo命令都会报如下错误，但却不影响正确功能。&lt;/p&gt;
&lt;h3 id=&quot;hexo报错&quot;&gt;&lt;a href=&quot;#hexo报错&quot; class=&quot;headerlink&quot; title=&quot;hexo报错&quot;&gt;&lt;/a&gt;hexo报错&lt;/h3&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./build/Release/DTraceProviderBindings&#39;&lt;/span&gt;] code: &lt;span class=&quot;string&quot;&gt;&#39;MODULE_NOT_FOUND&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://wait.im/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>睡排序，脑洞大开</title>
    <link href="https://wait.im/2017/03/02/%E7%9D%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80/"/>
    <id>https://wait.im/2017/03/02/睡排序，脑洞大开/</id>
    <published>2017-03-01T16:17:49.000Z</published>
    <updated>2017-03-02T09:53:58.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>构造 n 个线程，它们和这 n 个数一一对应。初始化后，线程们开始睡眠，等到对应的数那么多个时间单位后各自醒来，然后输出它对应的数。这样最小的数对应的线程最早醒来，这个数最早被输出。
</code></pre><p>等所有线程都醒来，排序就结束了。<br><a id="more"></a><br>放个例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span>[] nums=&#123;<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>&#125;;</div><div class="line">        SleepSort.sort(nums);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:nums)</div><div class="line">            System.out.printf(<span class="string">"%d    "</span>,n);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">        Sleeper.idx=<span class="number">0</span>;</div><div class="line">        Sleeper.output=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)        <span class="comment">//[1]</span></div><div class="line">            <span class="keyword">new</span> Sleeper(nums[i]).start();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">100</span>);                  <span class="comment">//[2]</span></div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</div><div class="line">            nums[i]=Sleeper.output[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleeper</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] output;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> idx;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sleep_time;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sleeper</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.sleep_time=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sleeper</span><span class="params">(<span class="keyword">int</span> sleep_time)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.sleep_time=sleep_time;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            Thread.sleep(<span class="keyword">this</span>.sleep_time);</div><div class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        output[idx++]=<span class="keyword">this</span>.sleep_time;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;构造 n 个线程，它们和这 n 个数一一对应。初始化后，线程们开始睡眠，等到对应的数那么多个时间单位后各自醒来，然后输出它对应的数。这样最小的数对应的线程最早醒来，这个数最早被输出。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;等所有线程都醒来，排序就结束了。&lt;br&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://wait.im/tags/JAVA/"/>
    
      <category term="算法" scheme="https://wait.im/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MAC OS下串口调试</title>
    <link href="https://wait.im/2016/09/26/MAC%20OS%E4%B8%8B%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    <id>https://wait.im/2016/09/26/MAC OS下串口调试/</id>
    <published>2016-09-25T16:15:08.000Z</published>
    <updated>2017-03-06T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个Mac下的ssh调试工具，但是出现了一点问题。后来发现居然Mac下有串口调试工具可以用，下面是安装方法。</p>
<p>###安装MAC驱动</p>
<p>打开网站 <a href="http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&amp;pcid=41" target="_blank" rel="external">http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&amp;pcid=41</a><br>下载最新的MAC串口驱动，并安装。<br><img src="https://images2015.cnblogs.com/blog/639250/201603/639250-20160331131447082-2075890099.png" alt=""><br><a id="more"></a><br>安装成功后的是这样的，我们会在网络偏好设置中，发现一个新的usb连接：<br><img src="https://images2015.cnblogs.com/blog/639250/201603/639250-20160331131221379-1726389058.png" alt=""><br>这说明我们的驱动安装成功了！<br>下面进行简单的测试，终端执行命令：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">cd</span> /dev </div><div class="line">ls <span class="regexp">tty.*</span></div></pre></td></tr></table></figure>
<p>你会发现输出中有一项为tty.usbserial，没错，这就是我们的串口设备。<br><img src="https://source.wait.im/2016-07-11-QQ20160711-0@2x.png" alt=""></p>
<p>###安装minicom</p>
<p>安装minicom，一句命令就完事了：<br><code>sudo brew install minicom</code><br>等安装完成后，在终端输入,然后进行配置。<br><code>sudo minicom -s</code><br>我们选择第三项Serial port setup，回车，进入详细设置。<br><img src="https://source.wait.im/2016-07-11-QQ20160711-1@2x.png" alt=""><br>第一项Serial Device手动改为：/dev/tty.usbserial-A903TSY6，Hardware Flow Control改为：No，<br>更改时，如需更改第一项，则先输入a，光标会移动到第一项末尾；编辑结束后，按回车。<br><img src="https://source.wait.im/2016-07-11-QQ20160711-2@2x.png" alt=""><br>选择save setup as dfl。</p>
<p>选Exit，成功进入minicom，再按回车：<br><img src="https://source.wait.im/2016-07-11-QQ20160711-3@2x.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个Mac下的ssh调试工具，但是出现了一点问题。后来发现居然Mac下有串口调试工具可以用，下面是安装方法。&lt;/p&gt;
&lt;p&gt;###安装MAC驱动&lt;/p&gt;
&lt;p&gt;打开网站 &lt;a href=&quot;http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&amp;amp;pcid=41&quot;&gt;http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&amp;amp;pcid=41&lt;/a&gt;&lt;br&gt;下载最新的MAC串口驱动，并安装。&lt;br&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/639250/201603/639250-20160331131447082-2075890099.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="MAC OS" scheme="https://wait.im/tags/MAC-OS/"/>
    
      <category term="调试" scheme="https://wait.im/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android热点获取连入设备的信息</title>
    <link href="https://wait.im/2016/03/10/Android%E7%83%AD%E7%82%B9%E8%8E%B7%E5%8F%96%E8%BF%9E%E5%85%A5%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://wait.im/2016/03/10/Android热点获取连入设备的信息/</id>
    <published>2016-03-09T16:18:26.000Z</published>
    <updated>2017-02-06T10:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做项目，要做热点功能，需要获取连入设备的信息，在网上找了好多资料，目前找到了比较好的解决方法，可以获取到设备的信息，MAC地址,设备名称等。还需要做黑名单功能，禁止连入热点的设备上网，踢出设备等，以后补全。</p>
<h3 id="读取文件-data-misc-dhcp-dnsmasq-leases"><a href="#读取文件-data-misc-dhcp-dnsmasq-leases" class="headerlink" title="读取文件/data/misc/dhcp/dnsmasq.leases"></a>读取文件/data/misc/dhcp/dnsmasq.leases</h3><p>这个文件里面存储着所有的ip信息，我们需要对这个文件进行解析。废话不多说直接上代码。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ScanWifiApDevicesThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_PATH = <span class="string">"/data/misc/dhcp/dnsmasq.leases"</span>;</div><div class="line">     <span class="keyword">private</span> AtomicBoolean mCanceled = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</div><div class="line">     <span class="keyword">private</span> AtomicBoolean mFinished = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</div><div class="line">     <span class="keyword">private</span> Handler mHandler = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ScanWifiApDevicesThread</span><span class="params">(Handler handler)</span> </span>&#123;</div><div class="line">         mHandler = handler;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">         mCanceled.set(<span class="keyword">true</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> mCanceled.get() || isInterrupted();</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> !isCanceled() &amp;&amp; isAlive();</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isReachable</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">             <span class="keyword">return</span> InetAddress.getByName(ip).isReachable(<span class="number">2000</span>);</div><div class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">private</span> SCWifiApDevice <span class="title">createWifiApDevice</span><span class="params">(String line)</span> </span>&#123;</div><div class="line">         <span class="keyword">if</span> (TextUtils.isEmpty(line)) &#123;</div><div class="line">             Log.e(TAG, <span class="string">"createWifiApDevice: line isEmpty"</span>);</div><div class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">         &#125;</div><div class="line">         Log.e(TAG, <span class="string">"createWifiApDevice: "</span> + line);</div><div class="line">         String[] splitted = line.split(<span class="string">" "</span>);</div><div class="line">         <span class="keyword">if</span> ((splitted.length &gt;= <span class="number">5</span>)) &#123;</div><div class="line">             String mac = splitted[<span class="number">1</span>];</div><div class="line">             String ip = splitted[<span class="number">2</span>];</div><div class="line">             String hostName = splitted[<span class="number">3</span>];</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (mac.matches(<span class="string">"..:..:..:..:..:.."</span>)) &#123;</div><div class="line">                 Log.e(TAG, <span class="string">"ip====="</span> + ip + <span class="string">"------isReachable=="</span> + isReachable(ip));</div><div class="line">                 <span class="keyword">if</span> (isReachable(ip)) &#123;</div><div class="line">                     SCWifiApDevice apDevice = <span class="keyword">new</span> SCWifiApDevice(ip, hostName, mac);</div><div class="line">                     Log.e(TAG, <span class="string">"ip===: "</span> + ip + <span class="string">"-------hostname="</span> + apDevice.getHostName());</div><div class="line">                     <span class="keyword">if</span> (!<span class="string">"localhost"</span>.equals(apDevice.getHostName())) &#123;</div><div class="line">                         <span class="keyword">return</span> apDevice;</div><div class="line">                     &#125; <span class="keyword">else</span> &#123;</div><div class="line">                         Log.e(TAG, <span class="string">"-------hostname=localhots"</span>);</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line"></div><div class="line">             &#125; <span class="keyword">else</span> &#123;</div><div class="line">                 Log.e(TAG, <span class="string">"mac.matches error==="</span> + mac);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendWifiApResult</span><span class="params">(ArrayList&lt;SCWifiApDevice&gt; scWifiApDevices)</span> </span>&#123;</div><div class="line">         Message msg = <span class="keyword">new</span> Message();</div><div class="line">         msg.what = MSG_WIFI_AP_SCAN_RESULT;</div><div class="line">         msg.obj = scWifiApDevices;</div><div class="line">         mHandler.sendMessage(msg);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">         File file = <span class="keyword">new</span> File(FILE_PATH);</div><div class="line">         ArrayList&lt;SCWifiApDevice&gt; scWifiApDevices = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">         <span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">             mFinished.set(<span class="keyword">true</span>);</div><div class="line">             sendWifiApResult(scWifiApDevices);</div><div class="line">             Log.e(TAG, <span class="string">"ARP_PATH !file.exists()"</span>);</div><div class="line">             <span class="keyword">return</span>;</div><div class="line">         &#125;</div><div class="line">         BufferedReader br = <span class="keyword">null</span>;</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">             br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">             String line = <span class="string">""</span>;</div><div class="line">             <span class="keyword">while</span> (!isInterrupted() &amp;&amp; !mCanceled.get() &amp;&amp; (line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                 SCWifiApDevice scWifiApDevice = createWifiApDevice(line);</div><div class="line">                 <span class="keyword">if</span> (scWifiApDevice == <span class="keyword">null</span>) &#123;</div><div class="line">                     <span class="keyword">continue</span>;</div><div class="line">                 &#125;</div><div class="line">                 scWifiApDevices.add(scWifiApDevice);</div><div class="line">             &#125;</div><div class="line">             mFinished.set(<span class="keyword">true</span>);</div><div class="line">             Log.e(TAG, <span class="string">"read file success "</span>);</div><div class="line">             sendWifiApResult(scWifiApDevices);</div><div class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">             e.printStackTrace();</div><div class="line">             mFinished.set(<span class="keyword">true</span>);</div><div class="line">             mHandler.sendEmptyMessage(MSG_WIFI_AP_SCAN_RESULT);</div><div class="line">         &#125; <span class="keyword">finally</span> &#123;</div><div class="line">             <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</div><div class="line">                 <span class="keyword">try</span> &#123;</div><div class="line">                     br.close();</div><div class="line">                 &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                     e.printStackTrace();</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="SCWifiApDevice"><a href="#SCWifiApDevice" class="headerlink" title="SCWifiApDevice"></a>SCWifiApDevice</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.smartcar.ap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"><span class="comment">//import com.android.incallui.Log;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by tongguangli on 16-4-18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SCWifiApDevice</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_WIFI_AP_FOUND = <span class="string">"android.wifi.ap.SC_DISCOVERY_DEVICE"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_WIFI_AP_DEVICE = <span class="string">"extra_wifi_ap_devices"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEVICE_TYPE_UNKNOWN = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEVICE_TYPE_PHONE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEVICE_TYPE_PC = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mIp = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String mMac = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String mCanonicalHostName = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String mHostName = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String mLocalHostCanonicalHostName = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> String mLocalHostHostName = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsReachable = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">private</span> String mDeviceName = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDeviceType = DEVICE_TYPE_UNKNOWN;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SCWifiApDevice</span><span class="params">(String ip, String hostName, String mac)</span> </span>&#123;</div><div class="line">        mIp = ip;</div><div class="line">        mMac = mac;</div><div class="line">        mHostName = hostName;</div><div class="line">        mIsReachable = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SCWifiApDevice</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        mIp = in.readString();</div><div class="line">        mMac = in.readString();</div><div class="line">        mCanonicalHostName = in.readString();</div><div class="line">        mHostName = in.readString();</div><div class="line">        mLocalHostCanonicalHostName = in.readString();</div><div class="line">        mLocalHostHostName = in.readString();</div><div class="line">        mIsReachable = in.readByte() != <span class="number">0</span>;</div><div class="line">        mDeviceName = in.readString();</div><div class="line">        mDeviceType = in.readInt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;SCWifiApDevice&gt; CREATOR = <span class="keyword">new</span> Creator&lt;SCWifiApDevice&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> SCWifiApDevice <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SCWifiApDevice(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> SCWifiApDevice[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SCWifiApDevice[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mIp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String mIp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mIp = mIp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMac</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMac</span><span class="params">(String mMac)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mMac = mMac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCanonicalHostName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mCanonicalHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCanonicalHostName</span><span class="params">(String mCanonicalHostName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mCanonicalHostName = mCanonicalHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHostName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHostName</span><span class="params">(String mHostName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mHostName = mHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocalHostCanonicalHostName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mLocalHostCanonicalHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalHostCanonicalHostName</span><span class="params">(String mLocalHostCanonicalHostName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mLocalHostCanonicalHostName = mLocalHostCanonicalHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocalHostHostName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mLocalHostHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalHostHostName</span><span class="params">(String mLocalHostHostName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mLocalHostHostName = mLocalHostHostName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReachable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mIsReachable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReachable</span><span class="params">(<span class="keyword">boolean</span> mIsReachable)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mIsReachable = mIsReachable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeString(mIp);</div><div class="line">        dest.writeString(mMac);</div><div class="line">        dest.writeString(mCanonicalHostName);</div><div class="line">        dest.writeString(mHostName);</div><div class="line">        dest.writeString(mLocalHostCanonicalHostName);</div><div class="line">        dest.writeString(mLocalHostHostName);</div><div class="line">        dest.writeByte((<span class="keyword">byte</span>) (mIsReachable ? <span class="number">1</span> : <span class="number">0</span>));</div><div class="line">        dest.writeString(mDeviceName);</div><div class="line">        dest.writeInt(mDeviceType);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这个方法大家可以获取到连入设备的基本信息，连入设备拦截功能，等找到好的解决方法之后在跟大家分享。</p>
<p>转载请注明出处 thinkloki@gmail.com，<a href="http://wait.im">wait.im</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做项目，要做热点功能，需要获取连入设备的信息，在网上找了好多资料，目前找到了比较好的解决方法，可以获取到设备的信息，MAC地址,设备名称等。还需要做黑名单功能，禁止连入热点的设备上网，踢出设备等，以后补全。&lt;/p&gt;
&lt;h3 id=&quot;读取文件-data-misc-dhcp-dnsmasq-leases&quot;&gt;&lt;a href=&quot;#读取文件-data-misc-dhcp-dnsmasq-leases&quot; class=&quot;headerlink&quot; title=&quot;读取文件/data/misc/dhcp/dnsmasq.leases&quot;&gt;&lt;/a&gt;读取文件/data/misc/dhcp/dnsmasq.leases&lt;/h3&gt;&lt;p&gt;这个文件里面存储着所有的ip信息，我们需要对这个文件进行解析。废话不多说直接上代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="热点" scheme="https://wait.im/tags/%E7%83%AD%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android蓝牙链接有关问题总结</title>
    <link href="https://wait.im/2016/01/20/Android%E8%93%9D%E7%89%99%E9%93%BE%E6%8E%A5%E6%9C%89%E5%85%B3%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://wait.im/2016/01/20/Android蓝牙链接有关问题总结/</id>
    <published>2016-01-20T05:40:08.000Z</published>
    <updated>2017-02-06T10:57:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="蓝牙设备类型判断"><a href="#蓝牙设备类型判断" class="headerlink" title="蓝牙设备类型判断"></a>蓝牙设备类型判断</h3><p>蓝牙连接设备互相连接，有时候需要根据设备的不同去判断，在Android上面，我们需要用到系统的api，比如用到蓝牙电话的时候，就要判断连入得设备类型是不是电话类型的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">device.getBluetoothClass().getMajorDeviceClass() == android.bluetooth.BluetoothClass.Device.Major.PHONE</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Device</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BITMASK               = <span class="number">0x1FFC</span>;</div><div class="line"></div><div class="line">     </div><div class="line">  <span class="comment">/**</span></div><div class="line">         * Defines all major device class constants.</div><div class="line">         * &lt;p&gt;See &#123;<span class="doctag">@link</span> BluetoothClass.Device&#125; for minor classes.</div><div class="line">         */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Major</span> </span>&#123;</div><div class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BITMASK           = <span class="number">0x1F00</span>;</div><div class="line"></div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISC              = <span class="number">0x0000</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPUTER          = <span class="number">0x0100</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE             = <span class="number">0x0200</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORKING        = <span class="number">0x0300</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUDIO_VIDEO       = <span class="number">0x0400</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERIPHERAL        = <span class="number">0x0500</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMAGING           = <span class="number">0x0600</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WEARABLE          = <span class="number">0x0700</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOY               = <span class="number">0x0800</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEALTH            = <span class="number">0x0900</span>;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNCATEGORIZED     = <span class="number">0x1F00</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;蓝牙设备类型判断&quot;&gt;&lt;a href=&quot;#蓝牙设备类型判断&quot; class=&quot;headerlink&quot; title=&quot;蓝牙设备类型判断&quot;&gt;&lt;/a&gt;蓝牙设备类型判断&lt;/h3&gt;&lt;p&gt;蓝牙连接设备互相连接，有时候需要根据设备的不同去判断，在Android上面，我们需要用到系统的api，比如用到蓝牙电话的时候，就要判断连入得设备类型是不是电话类型的。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;device.getBluetoothClass().getMajorDeviceClass() == android.bluetooth.BluetoothClass.Device.Major.PHONE&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>swift-open-project</title>
    <link href="https://wait.im/2015/11/12/swift-open-project/"/>
    <id>https://wait.im/2015/11/12/swift-open-project/</id>
    <published>2015-11-12T04:23:36.000Z</published>
    <updated>2017-02-06T10:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swift-open-project"><a href="#swift-open-project" class="headerlink" title="swift-open-project"></a><a href="https://github.com/thinkloki/swift-open-project" target="_blank" rel="external">swift-open-project</a></h1><p>这里汇集了目前为止最为流行的Swift开源项目，选取SwiftGuide中的开源部分，这里将每周对项目进行总结，如果大家有推荐的可以联系thinkloki@gmail.com,或者issues，欢迎Star、Fork。感谢<a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">SwiftGuide</a>。</p>
<a id="more"></a>
<h3 id="1-实用类库"><a href="#1-实用类库" class="headerlink" title="1. 实用类库"></a><a id="open_api"></a>1. 实用类库</h3><blockquote>
<p>以下实用类库做为快速参考，更多实用类库需求，也可以去这里<a href="http://www.swifttoolbox.io/" target="_blank" rel="external">（Swift toolbox is a community-supported catalog<br>of iOS and OSX libraries）</a> (By <a href="https://www.facebook.com/xpizzle" target="_blank" rel="external">Adam Leonard</a> from <a href="[http://swiftcast.tv">swiftcast.tv</a>), 这个网站收藏了 GitHub 开源社区中优质 Swift 资源库，并提供了分类及查询服务。</p>
</blockquote>
<ul>
<li><p><a href="https://github.com/mattt" target="_blank" rel="external">Mattt Thompson </a>：著名开源作者，开发了知名的<a href="https://github.com/afnetworking/afnetworking" target="_blank" rel="external">AFNetworking</a>网络库。也是知名开发博客<a href="http://shipster.com/" target="_blank" rel="external">NSHipster</a>网站主。</p>
<p>  类库 | 相关文章 | 备注<br>———— | ————- | ————-<br><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire/Alamofire</a> | <a href="http://nshipster.com/alamofire/" target="_blank" rel="external">Alamofire</a>| 为其著名的 AFNetworking 用 Swift 重写的网络基础库<br><a href="https://github.com/mattt/Euler" target="_blank" rel="external">mattt/Euler</a> | <a href="http://nshipster.com/swift-operators/" target="_blank" rel="external">Swift Operators</a> | 这样写是否很数学、很逻辑？∛27÷3±5, ∑[3,1,2], ~0⊻1<br><a href="https://github.com/mattt/Surge" target="_blank" rel="external">mattt/Surge</a> || 基于苹果 Accelerate 高性能计算框架库，计算效率提升惊人<br><a href="https://github.com/mattt/Literally" target="_blank" rel="external">mattt/Literally</a>|<a href="http://nshipster.com/swift-literal-convertible/" target="_blank" rel="external">Swift Literal Convertibles</a>| 常用数据类型的使用及转换工具库</p>
</li>
<li><p>工具类</p>
<ul>
<li><a href="https://github.com/ankurp/Dollar.swift" target="_blank" rel="external">Dollar</a>：尤其在 Array 和 Dictionary 的支持上（实现类库仅一个 Dollar.swift 文件）。用过 Javascript 版的 Lo-Dash 或 underscore 就知道其实用程度。它是一套函数化编程的工具库。另一个类似的更完整的版本是 <a href="https://github.com/pNre/ExSwift" target="_blank" rel="external">ExSwift</a>，它的实现基于对象化扩展的。</li>
<li><a href="https://github.com/pNre/ExSwift" target="_blank" rel="external">ExSwift</a>：实用类扩展库。另一个 Lo-Dash 或 underscore 的 Swift 版本实现，相对于 Dollar.swift，此版本有更完整的 API 实现。包括了对 Array, Int, String, Float, Range, Dictionary, NSArray 的扩展及其它实用方法。完全遵循面向对象的扩展原则。</li>
<li><a href="https://github.com/lingoer/SwiftyJSON" target="_blank" rel="external">lingoer/SwiftyJSON</a>:这是解析 JSON 字符串封装类。实现功能与 Javascript中 的 JSON.parse 相近，使用方便。By <a href="http://weibo.com/u/1671421905" target="_blank" rel="external">@lingoer</a></li>
<li><a href="https://github.com/SwiftyJSON/Alamofire-SwiftyJSON" target="_blank" rel="external">SwiftyJSON/Alamofire-SwiftyJSON</a> ：简单地整合 Alamofire 和 SwiftyJSON 后，远程 JSON 使用方便了。</li>
<li><a href="https://github.com/matthewcheok/JSONCodable" target="_blank" rel="external">matthewcheok/JSONCodable</a>：基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。</li>
<li><a href="https://github.com/typelift/Basis" target="_blank" rel="external">typelift/Basis</a>：这个实用类库支持范围很宽范，封装主要以简化及方便调用系统API为主，使程序代码看上去更优雅。遗憾地是，目前作者并没有提供 API 文档或示例代码，对于初学者使用会额外带来一点点学习成本。</li>
<li><a href="https://github.com/owensd/json-swift" target="_blank" rel="external">owensd/json-swift</a>：功能与 Swifty 几乎一致，使用上要更方便。</li>
<li><a href="https://github.com/gfx/Swift-JsonSerializer" target="_blank" rel="external">gfx/Swift-JsonSerializer</a>：JSON 解析又多了一种选择。</li>
<li><a href="https://github.com/Ahmed-Ali/JSONExport" target="_blank" rel="external">Ahmed-Ali/JSONExport</a>：一款实用工 具，可以将 JSON 转换并输出为 Swift 语言类模型（也支持Android上的Java），支持简单的定制。</li>
<li><a href="https://github.com/hubertr/Swell" target="_blank" rel="external">hubertr/Swell</a>： 同时支持 Swift 和 OBJC 的 Log 实用类。喜欢 Log4j 风格的日志管理类的同学可以收入。</li>
<li><a href="https://github.com/yeahdongcn/RSBarcodes_Swift" target="_blank" rel="external">RSBarcodes_Swift</a>：”RSBarcodes allows you to read 1D and 2D barcodes using metadata scanning capabilities introduced with iOS 7 and generate the same set of barcode images for displaying and sharing.” By <a href="http://weibo.com/r0ckstar" target="_blank" rel="external">@yeahdongcn</a> Swift 语言版二维码识别及生成类库。</li>
<li><a href="https://github.com/SwiftP2P/SwiftSSL" target="_blank" rel="external">SwiftP2P/SwiftSSL</a>：常用 Digest 和 HMAC 的封装。如此封装后，使用加密算法确实很方便。很不错的一个国产”轮子”！By <a href="http://weibo.com/chinawangchen" target="_blank" rel="external">@你全家都快到碗里来</a></li>
<li><a href="https://github.com/Hearst-DD/ObjectMapper" target="_blank" rel="external">Hearst-DD/ObjectMapper</a>：对象与 JSON 互转实用类库。需要的同学可以收一下。</li>
<li><a href="https://github.com/DaveWoodCom/XCGLogger" target="_blank" rel="external">DaveWoodCom/XCGLogger</a> ： 这是一款功能比较健全日志输出框架（Log4Swift）。之前推荐过一款类似的 hubertr/Swell，但它的功能明显没有这款强大。</li>
<li><a href="https://github.com/air/JSONHelper" target="_blank" rel="external">isair/JSONHelper</a> ：又一款JSON转对象类库，算上，lingoer/SwiftyJSON，owensd/json-swift，gfx/Swift-JsonSerializer，已经有四款了。同学们根据喜好及需求，择优使用吧。</li>
<li><a href="https://github.com/kylef/Stencil" target="_blank" rel="external">kylef/Stencil</a>：通过在模板中支持 if, for, ifnot 等语法标签，实现更强大、更灵活的数据及格式输出。</li>
<li><a href="https://github.com/kylef/PathKit" target="_blank" rel="external">kylef/PathKit</a>： 简单、实用的文件路径操作类，常用功能一个也不少。</li>
<li><a href="https://github.com/thoughtbot/Argo" target="_blank" rel="external">thoughtbot/Argo</a>：一个带有实战说明的 JSON 解析方案及类库。</li>
<li><a href="https://github.com/typelift/swiftz" target="_blank" rel="external">typelift/swiftz</a>： 一个帮助实现函数式编程的类库，定义了一系列相应的数据结构。</li>
<li><a href="https://github.com/dongri/OAuthSwift" target="_blank" rel="external">dongri/OAuthSwift</a>：Swift 版 OAuth(1/2) 授权类库。对于作者提供的 API，看着舒服，用着方便。</li>
<li><a href="https://github.com/p2/OAuth2" target="_blank" rel="external">p2/OAuth2</a>：独立又纯粹的 OAuth2 认证授权类库，作者所提供的示例及流程说明清晰又简洁。</li>
<li><a href="https://github.com/tadija/AEXML" target="_blank" rel="external">tadija/AEXML</a>：简单又易于使用的XML解析类。作者提供了完整的示例程序。</li>
<li><a href="https://github.com/duemunk/Async" target="_blank" rel="external">duemunk/Async</a>：一个后台执行代码封装库，它可以让你的后台代码封装语法更简洁。</li>
<li><a href="https://github.com/jquave/EasyCast" target="_blank" rel="external">jquave/EasyCast</a>：这是一个自动强制转换操作符左右类型及常用数学函数参数类型无障碍使用的类库。<a href="http://weibo.com/onevcat" target="_blank" rel="external">@onevcat</a>几个月前也写过类似功能库 <a href="https://github.com/onevcat/Easy-Cal-Swift" target="_blank" rel="external">onevcat/Easy-Cal-Swift</a>，不过，停滞更新很久了。</li>
<li><a href="https://github.com/ArtSabintsev/Siren" target="_blank" rel="external">ArtSabintsev/Siren</a>：当应用更新时，通知用户并提供 App Store 链接供用户更新的开源库。P.S. 该开发者也曾提供 Objectvie-C 语言版<a href="https://github.com/ArtSabintsev/Harpy" target="_blank" rel="external">ArtSabintsev/Harpy</a>。</li>
<li><a href="https://github.com/kishikawakatsumi/KeychainAccess" target="_blank" rel="external">kishikawakatsumi/KeychainAccess</a>：这套Keychain管理比较完整。支持本地应用，网络应用，以及与Touch ID的集成应用。</li>
<li><a href="https://github.com/nori0620/SwiftFilePath" target="_blank" rel="external">nori0620/SwiftFilePath</a>：功能强大的文件及路径管理封装类库。</li>
<li><a href="https://github.com/onevcat/RandomColorSwift" target="_blank" rel="external">onevcat/RandomColorSwift</a>：”刚刚开源了一个自动生成好看的颜色的 Swift 库，这是 <a href="https://github.com/davidmerfield/randomColor" target="_blank" rel="external">randomColor.js</a> 项目的 Swift 移植版本。在学习 Swift 的童鞋不妨一看，如果可以对于大家在 Swift 实际使用中的某些概念和写法有所启迪的话就再好不过了。” By <a href="http://weibo.com/onevcat" target="_blank" rel="external">@onevcat</a></li>
<li><a href="https://github.com/beltex/SMCKit" target="_blank" rel="external">beltex/SMCKit</a>：Mac 系统管理控制器 SMC（System Management Controller）Swift 语言版封装库。通过该类库，简单的几行代码就可知 CPU 温度，风扇转速，电池状态等硬件状态或活动状态。</li>
<li><a href="https://github.com/radex/SwiftyUserDefaults" target="_blank" rel="external">radex/SwiftyUserDefaults</a>：轻量级数据存储类 NSUserDefaults 扩展类，它使类型数据访问和存储更为便捷、直观。</li>
<li><a href="https://github.com/akosma/SwiftMoment" target="_blank" rel="external">akosma/SwiftMoment</a>：时间和日历函数封装库，也是经典的 <a href="http://momentjs.com/" target="_blank" rel="external">moment.js</a> 的 Swift 语言版本实现。</li>
<li><a href="https://github.com/imaginary-cloud/CameraManager" target="_blank" rel="external">imaginary-cloud/CameraManager</a>：相机管理封装类库。看着极好用的样子。</li>
<li><a href="https://github.com/yannickl/QRCodeReader.swift" target="_blank" rel="external">yannickl/QRCodeReader.swift</a>：一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。</li>
<li><a href="https://github.com/aaronabentheuer/AAFaceDetection" target="_blank" rel="external">aaronabentheuer/AAFaceDetection</a>：简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。例如：在视频直播中可以检测观众情感（微笑或眨眼），或注意力（看着屏幕或没有）。因此，作者对其抱以很高的期待，并已经着手开发实验室类大项目。</li>
<li><a href="https://github.com/zenangst/Versions" target="_blank" rel="external">zenangst/Versions</a>：版本比较小工具。</li>
<li><a href="https://github.com/NorthernRealities/Rainbow" target="_blank" rel="external">NorthernRealities/Rainbow</a>：旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。</li>
<li><a href="https://github.com/jpotts18/swift-validator" target="_blank" rel="external">jpotts18/swift-validator</a>：基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。P.S. 对于规则，若有更复杂的需求，则需要有更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案。比如：开源的 Drools，商用的 ILOG 等。</li>
<li><a href="https://github.com/nghialv/Transporter" target="_blank" rel="external">nghialv/Transporter</a>：短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。</li>
<li><a href="https://github.com/krzyzanowskim/CryptoSwift" target="_blank" rel="external">krzyzanowskim/CryptoSwift</a>：纯 Swift 版 Crypto 算法及相关功能类库。是一套易用、易扩展、完整、不可或缺的功能库。</li>
<li><a href="https://github.com/nomothetis/SemverKit" target="_blank" rel="external">nomothetis/SemverKit</a>：针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。</li>
<li><a href="https://github.com/harlanhaskins/Punctual.swift" target="_blank" rel="external">harlanhaskins/Punctual.swift</a>：通过一系列基础数据类型扩展，使日期访问及操作更加自然语言化。若没有动态语言化地超强扩展及定制能力，如此优雅的日期操作是无法实现的。</li>
<li><a href="https://github.com/ayanonagon/Parsimmon" target="_blank" rel="external">ayanonagon/Parsimmon</a>：小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 <a href="http://nshipster.cn/nslinguistictagger/" target="_blank" rel="external">NSHipster - NSLinguistic​Tagger</a></li>
<li><a href="https://github.com/soffes/X" target="_blank" rel="external">soffes/X</a>：等不及苹果 iOS/OS X 平台统一的开发同学（Sam Soffes），启了一个项目，先将常用类库统一了。该项目刚开始，感兴趣的同学可以考虑参与其中。</li>
<li><a href="https://github.com/naoty/Timepiece" target="_blank" rel="external">naoty/Timepiece</a>：直观（自然语言化）的日期类扩展。它使日期加减运算、初始设置、日期变更以及基于指定格式解析转换变得方便、易读。P.S. 相比前一段时间推荐另一个类似日期库（Punctual.swift O网页链接）功能更丰富。</li>
<li><a href="https://github.com/macoscope/SwiftyStateMachine" target="_blank" rel="external">macoscope/SwiftyStateMachine</a>：应用好状态机，不仅提高程序可维护性，更大大增强了程序健壮性。</li>
<li><a href="https://github.com/benzguo/MusicKit" target="_blank" rel="external">benzguo/MusicKit</a>：一套音乐编辑及创作框架。懂音乐、玩音乐的同学值得拥有。</li>
<li><a href="https://github.com/ArtSabintsev/FontBlaster" target="_blank" rel="external">ArtSabintsev/FontBlaster</a>：调用自定义字体封装类。很实用、很方便。</li>
<li><a href="https://github.com/phimage/Prephirences" target="_blank" rel="external">phimage/Prephirences</a>：这个库可以让开发者更方便管理、读写应用的配置信息。很实用。</li>
<li><a href="https://github.com/radex/SwiftyTimer" target="_blank" rel="external">radex/SwiftyTimer</a>：一个更友好、更简单的时间操作 NSTimer 扩展。P.S. 类似针对日期有 Punctual.swift 和 Timepiece。</li>
<li><a href="https://github.com/liufan321/SwiftQRCode" target="_blank" rel="external">liufan321/SwiftQRCode</a>：简单、实用的 QR Code 扫描识别及生成库。</li>
<li><a href="https://github.com/emaloney/CleanroomLogger" target="_blank" rel="external">emaloney/CleanroomLogger</a>：相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。</li>
<li><a href="https://github.com/Khan/Prototope" target="_blank" rel="external">Khan/Prototope</a>：一款轻量的 Javascript 桥接 Swift 库。对于 JS 控，或许可以从玩这个项目开始 iOS 原型开发。</li>
<li><a href="https://github.com/malcommac/SwiftDate" target="_blank" rel="external">malcommac/SwiftDate</a>：特别完整、强大的日期操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。是一款值得毫不犹豫收录的类库。</li>
<li><a href="https://github.com/nghialv/Future" target="_blank" rel="external">nghialv/Future</a>：基于微框架设计思想的异步执行及结果响应类。由示例发现，代码即简单又干净。</li>
<li><a href="https://github.com/alexeyxo/protobuf-swift" target="_blank" rel="external">alexeyxo/protobuf-swift</a>：Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。</li>
<li><a href="https://github.com/soffes/SyntaxKit" target="_blank" rel="external">soffes/SyntaxKits</a>：TextMate 风格语法高亮类库（基于 Swift 2.0）。</li>
<li><a href="https://github.com/glock45/swifter" target="_blank" rel="external">glock45/swifter</a>：一款极其轻量的 HTTP 服务器引擎。#Swift 2#</li>
<li><a href="https://github.com/andreacremaschi/GEOSwift" target="_blank" rel="external">andreacremaschi/GEOSwift</a>：可轻松地处理地理对象模型和相关地形操作，是一个极其易用的地理封装库（集成 MapKit 和 Quicklook）。绝佳好轮子，不容错过。</li>
</ul>
</li>
<li><p>图片</p>
<ul>
<li><a href="https://github.com/kaishin/ImageScout" target="_blank" rel="external">kaishin/ImageScout</a>：最小网络代价获得图片大小（宽和高）及类型，它对于很多场合，比如：布局和排版都有积极作用。</li>
<li><a href="https://github.com/kaishin/gifu" target="_blank" rel="external">kaishin/gifu</a>：高性能 GIF 显示类库 Swift 版本。</li>
<li><a href="https://github.com/indragiek/DominantColor" target="_blank" rel="external">indragiek/DominantColor</a>：采用YUV色域编码规则及K均值聚类算法提取图片代表色开源项目。很实用，很赞！</li>
<li><a href="https://github.com/iSame7/Panoramic" target="_blank" rel="external">iSame7/Panoramic</a>：该项目通过 Core Motion 实现了变换角度移动手机时，使图片显示产生对应位置及角度的变换。从而达到了具有现场感的图片浏览功能。</li>
<li><a href="https://github.com/gavinbunney/Toucan" target="_blank" rel="external">gavinbunney/Toucan</a>：小而美的图片变换及处理类（支持：resize, clip, crop, scale, Ellipse Mask, Rounded Rect Mask, Image Mask）。功能略有超预期的感觉。</li>
<li><a href="https://github.com/schwa/SwiftGraphics" target="_blank" rel="external">schwa/SwiftGraphics</a>：一个易学、易用的绘图工具库封装。作者很勤劳，项目正在持续更新中。</li>
<li><a href="https://github.com/contentful-labs/Concorde" target="_blank" rel="external">contentful-labs/Concorde</a>：一个可用于下载和解码渐进式 JPEG 的库。特定场合很有用。类库的调用方法也很自然、方便。</li>
<li><a href="https://github.com/FlexMonkey/SnapSwift" target="_blank" rel="external">FlexMonkey/SnapSwift</a>：一款 Snapseed 风格滤镜及参数编辑菜单。弹出菜单项后，上下、左右滑动即可调整滤镜参数。</li>
<li><a href="https://github.com/kiavashfaisali/KFSwiftImageLoader" target="_blank" rel="external">kiavashfaisali/KFSwiftImageLoader</a>：极高性能、轻量、低功耗网络图片异步加载扩展库（支持 iOS 和 WatchKit）。良好的缓存管理机制保证的作者设计初衷。P.S. 作者曾开发过 <a href="https://github.com/kiavashfaisali/KFWatchKitAnimations" target="_blank" rel="external">KFWatchKitAnimations</a>：一款为  Watch 提供 60 帧动画显示效果解决方案及示例。</li>
<li><a href="https://github.com/yannickl/DynamicColor" target="_blank" rel="external">yannickl/DynamicColor</a>：强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。</li>
<li><a href="https://github.com/Jan0707/SwiftColorArt" target="_blank" rel="external">Jan0707/SwiftColorArt</a>：根据图片色系决定所在界面背景色及字体显示颜色。类库及示例代码也很简洁且易于使用。这样的项目真的带给我惊艳。何况，该开发者备注了这是他的第一个Swift项目。</li>
<li><a href="https://github.com/jathu/UIImageColors" target="_blank" rel="external">jathu/UIImageColors</a>：又一款根据图片获取主色、次色、背景色、详细色的类。P.S. 另一款功能相同的类是 <a href="https://github.com/Jan0707/SwiftColorArt" target="_blank" rel="external">SwiftColorArt</a>。</li>
</ul>
</li>
<li><p>存储</p>
<ul>
<li><a href="https://github.com/FahimF/SQLiteDB" target="_blank" rel="external">SQLiteDB in Swift</a>：”This is a basic SQLite wrapper for Swift. It is very simple at the moment and does not provide any advanced functionality. Additionally, it’s not pure Swift at the moment due to some difficulties in making all of the necessary sqlite C API calls from Swift.”</li>
<li><a href="https://github.com/Alecrim/AlecrimCoreData" target="_blank" rel="external">Alecrim/AlecrimCoreData</a>：更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。</li>
<li><a href="http://realm.io/" target="_blank" rel="external">Realm - a mobile database</a>：Realm主打移动数据库。除了更轻量，甚至还可以应用到可穿戴。低耦、面向对象的设计风格也是非常亮丽的。</li>
<li><a href="https://github.com/nerdyc/Squeal" target="_blank" rel="external">nerdyc/Squeal</a>：一套非常完善的 SQLite 数据库访问 API，无论建库，建表，CRUD 等常用数据库操作命令都进行了很好的封装，另外，版本管理、事务管理、并发管理、命令执行及 Prepare Statement 等都提供相应支持。它是一套不可多得的SQLite管理访问库。</li>
<li><a href="https://github.com/stephencelis" target="_blank" rel="external">stephencelis/SQLite.swift</a>：简单、轻量，或是使用上最 SQL 的 SQLit e封装库。</li>
<li><a href="https://github.com/BjornRuud/Swiftache" target="_blank" rel="external">BjornRuud/Swiftache</a>：Mustache 的 Swift 语言实现版本。</li>
<li><a href="https://github.com/Haneke/HanekeSwift" target="_blank" rel="external">Haneke/HanekeSwift</a>：貌似这个轻量地带缓存图片组件还不错。主要功能包括图片二级缓存、异步加载、后台执行、自动缩放等。感兴趣的同学可以试用一下。</li>
<li><a href="https://github.com/SugarRecord/SugarRecord" target="_blank" rel="external">SugarRecord/SugarRecord</a>：相对于 SQL，CoreData 可以更方便、高效存储数据，而 SugarRecord 类库可以让你更方便的使用 CoreData，同时作者已经封装好 iCloud，使你的应用开发更如虎添翼。</li>
<li><a href="https://github.com/michaelarmstrong/SuperRecord" target="_blank" rel="external">michaelarmstrong/SuperRecord</a> ： Swift 版 CoreData 框架扩展类库。相对于同类型 CoreData 框架库 <a href="https://github.com/SugarRecord/SugarRecord" target="_blank" rel="external">SugarRecord/SugarRecord</a>，SuperRecord 要简单、轻量得多。很棒的快速开发类库。</li>
<li><a href="https://github.com/aschuch/AwesomeCache" target="_blank" rel="external">aschuch/AwesomeCache</a>：Swift 语言写的高效能缓存对象存储及管理，定义及使用简单、易于理解。支持为每个 Cache 对象设定缓存有效期。</li>
<li><a href="https://github.com/daltoniam/Skeets" target="_blank" rel="external">daltoniam/Skeets</a>：网络图片的获取、缓存及显示类库，支持缓存的清理及时效性管理。</li>
<li><a href="https://github.com/evermeer/EVCloudKitDao" target="_blank" rel="external">evermeer/EVCloudKitDao</a>：一套使用 CloudKit 简单封装库。作者还提供了示例项目及程序供开发者参考使用。</li>
<li><a href="https://github.com/andrelind/Breeze" target="_blank" rel="external">andrelind/Breeze</a>：轻量 CoreData 管理封装库。支持 iCloud 。</li>
<li><a href="https://github.com/arkverse/SwiftRecord" target="_blank" rel="external">arkverse/SwiftRecord</a>：基于 Core Data 极为轻量、易用的对象持久化工具库，相当于 ActiveRecord 的 Swift 版本。</li>
<li><a href="https://github.com/JohnEstropia/CoreStore" target="_blank" rel="external">JohnEstropia/CoreStore</a>：提供高可读性，一致性及安全性的 Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整，风格传统又实用。非常值得收入。</li>
</ul>
</li>
<li><p>远程访问</p>
<ul>
<li><a href="https://github.com/hallas/agent" target="_blank" rel="external">Minimalistic Swift HTTP request agent for iOS and OS X</a>：一个简单、小巧、实用的 HTTP 请求 Swift 语言实现类（仅一个 Agent.swift 类）</li>
<li><a href="https://github.com/lingoer/GRequest" target="_blank" rel="external">lingoer/GRequest</a>:”@李洁信：个人认为 AFNetworking 这种较重的第三方网络库将逐渐淡出舞台，而像楼主这种基于 NSURLSession 并充分利用 Swift 特性写出来的小而美的库会受到更多人的青睐！” 作者解读<a href="http://swiftist.org/topics/178" target="_blank" rel="external">《GRequest for HTTP Request》</a>。</li>
<li><a href="https://github.com/daltoniam/SwiftHTTP" target="_blank" rel="external">daltoniam/SwiftHTTP</a>：Thin wrapper around NSURLSession in swift. Simplifies HTTP requests。感兴趣的可以看看代码，比较与 lingoer/GRequest 差别。</li>
<li><a href="https://github.com/AshFurrow/Moya" target="_blank" rel="external">AshFurrow/Moya</a>：如果你需要<a href="https://github.com/artsy/eidolon/issues/9" target="_blank" rel="external">如此功能</a>的 Swift 网络 API，可以考虑使用它。它基于 Alamofire, swfitz 等优秀开源类实现。</li>
<li><a href="https://github.com/aleclarson/emitter-kit" target="_blank" rel="external">aleclarson/emitter-kit</a>:用 EmitterKit 代替 NSNotificationCenter。这个库貌似短小、精悍、实用的样子。更重要是语法精练。</li>
<li><a href="https://github.com/daltoniam/starscream" target="_blank" rel="external">daltoniam/starscream</a>：Swift 版本 WebSocket 客户端类库，支持 iOS/OS X 。 使用方便，跨平台开发不可或缺的“轮子”。</li>
<li><a href="https://github.com/shuoli84/SocketIOCocoa" target="_blank" rel="external">shuoli84/SocketIOCocoa</a>：又一款 WebSocket 实用客户端类库，作者提供了详细的测试用例可以做为<a href="https://github.com/shuoli84/SocketIOCocoa/blob/master/SocketIOCocoaTests/SocketIOTests.swift" target="_blank" rel="external">示例代码</a>使用。</li>
<li><a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="external">socketio/socket.io-client-swift</a>：WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。</li>
<li><a href="https://github.com/marcelofabri/BigBrother" target="_blank" rel="external">marcelofabri/BigBrother</a>：网络请求活动状态监视器类。由于 Alamofire 库并无此项特性，因此它可以做为 Alamofire 的一个扩展功能。</li>
<li><a href="https://github.com/ishkawa/APIKit" target="_blank" rel="external">ishkawa/APIKit</a>：为不同来源或类型 Web 服务，提供安全地可定制化网络请求 API 的基础类库。很好的面向对象设计思路实例。</li>
<li><a href="https://github.com/contentful-labs/Stargate" target="_blank" rel="external">contentful-labs/Stargate</a>：通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。</li>
<li><a href="https://github.com/JustHTTP/Just" target="_blank" rel="external">JustHTTP/Just</a>：小而美的 HTTP 类。功能简单、直接、完整且健壮性高。</li>
<li><a href="https://github.com/CloudKitSpace/CKSIncrementalStore" target="_blank" rel="external">CloudKitSpace/CKSIncrementalStore</a>：基于 CloudKit 服务器实现多终端数据同步。附示例动态图。</li>
</ul>
</li>
<li><p>社交网络</p>
<ul>
<li><a href="https://github.com/lingoer/SwiftWeiboKit" target="_blank" rel="external">lingoer/SwiftWeiboKit</a>：”封装了整个 OAuth 2.0 的授权流程,并提供了几个简便易用的请求方法”</li>
<li><a href="https://github.com/mattdonnelly/Swifter" target="_blank" rel="external">A Twitter framework for iOS &amp; OS X written in Swift</a>：一套很完整的 Twitter 访问框架类库，支持 iOS/OS X</li>
</ul>
</li>
<li><p>框架</p>
<ul>
<li><a href="https://github.com/robb/Cartography" target="_blank" rel="external">robb/Cartography</a>：Set up your Auto Layout constraints declaratively. 这是有关自动布局约束一个实用的 Swift 项目，代码看似简单清晰，不过由于设计巧妙。<a href="http://cheunghy.github.io/blog/2014/10/12/intro-to-cartography/" target="_blank" rel="external">代码解读</a> By <a href="http://weibo.com/kaiyuz" target="_blank" rel="external">@kaiyuz</a></li>
<li><a href="https://github.com/railsware/Sleipnir" target="_blank" rel="external">railsware/Sleipnir</a>：一个基于 Swift 的行为驱动开发框架(BDD-style framework)。API 安装，示例及说明相对比较齐全。</li>
<li><a href="https://github.com/Quick/Quick" target="_blank" rel="external">Quick/Quick</a>：另一款基于 Swift 的行为驱动开发框架。</li>
<li><a href="https://github.com/inamiy/SwiftTask" target="_blank" rel="external">inamiy/SwiftTask</a>： 一个很标准的任务及其生命周期管理类库。作者还附上了一个基于 Alamofire 库完成的网络文件下载的任务管理示例。</li>
<li><a href="https://github.com/inamiy/SwiftState" target="_blank" rel="external">inamiy/SwiftState</a>：Swift 版本 State Machine，这是 SwiftTask 的姐妹篇。开发过 Workflow 类应用的同学有没有很亲切。</li>
<li><a href="https://github.com/colemancda/NetworkObjects" target="_blank" rel="external">colemancda/NetworkObjects</a>：基于Swift的轻量版HttpServer框架，可以做为iOS/OS X分布式对象的替代。可惜缺少演示或示例代码。</li>
<li><a href="https://github.com/Masonry/Snappy" target="_blank" rel="external">Masonry/Snappy</a>：一个基于 AutoLayout 封装，语法简洁的轻量级布局框架。当然，用代码还是 storyboard，全凭开发者喜好。若偏好可视化自动布局，@DevTalking 的两篇译文值得参考<a href="http://www.devtalking.com/articles/adaptive-layout-1/" target="_blank" rel="external">《Swift 自适应布局教程》</a>和<a href="http://www.devtalking.com/articles/adaptive-layout-for-iphone6-1/" target="_blank" rel="external">《为 iPhone 6 设计自适应布局》</a>。</li>
<li><a href="https://github.com/jpsim/PeerKit" target="_blank" rel="external">jpsim/PeerKit</a>：基于事件驱动的多端对等连接开源框架。作者提供了该组件使用案例<a href="https://github.com/jpsim/CardsAgainst" target="_blank" rel="external">jpsim/CardsAgainst</a>，具体引用代码详见<a href="https://github.com/jpsim/CardsAgainst/blob/master/CardsAgainst/Controllers/ConnectionManager.swift" target="_blank" rel="external">这里</a>。</li>
<li><a href="https://github.com/Quick/Nimble" target="_blank" rel="external">Quick/Nimble</a>：功能更强于Xcode自带测试框架（XCTest）的测试类库。</li>
<li><a href="https://github.com/venmo/DVR" target="_blank" rel="external">venmo/DVR</a>：针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。</li>
<li><a href="https://github.com/owensd/swift-perf" target="_blank" rel="external">owensd/swift-perf</a>：针对 Swift 的性能测试方案。通过抽样场景关键代码与 C 或 Objective-C 的比较做为其测试基准。</li>
<li><a href="https://github.com/nghialv/MaterialKit" target="_blank" rel="external">nghialv/MaterialKit</a>：Swift 版 Google Material Design 组件库。虽然个人并不推荐在 iOS 平台上使用非 iOS 风格界面，不过，对于 Android 强迫症“患者”，多一种选择也是友好的。顺带附上 Google 提供的开源<a href="https://github.com/google/material-design-icons" target="_blank" rel="external">Material Design 图标集</a>，可以一起收入。</li>
<li><a href="https://github.com/facebook/AsyncDisplayKit" target="_blank" rel="external">facebook/AsyncDisplayKit</a>：它是由 Facebook 开发并用于其 Paper 应用的 iOS UI 框架，它主要解决问题是提供界面的高流畅性切换及更灵敏的响应，解决思路是将部分 UI 渲染及复杂计算交由独立于主线程的处理程序负责。中译教程《<a href="https://github.com/nixzhu/dev-blog/blob/master/2014-11-22-asyncdisplaykit-tutorial-achieving-60-fps-scrolling.md" target="_blank" rel="external">AsyncDisplayKit 教程 - 达到 60 FPS 的滚动帧率</a> By <a href="http://weibo.com/nixzhu" target="_blank" rel="external">@nixzhu</a>》，教程原文《<a href="http://www.raywenderlich.com/86365/asyncdisplaykit-tutorial-achieving-60-fps-scrolling" target="_blank" rel="external">AsyncDisplayKit Tutorial: Achieving 60 FPS scrolling</a>》。</li>
<li><a href="https://github.com/mutualmobile/MMWormhole" target="_blank" rel="external">mutualmobile/MMWormhole</a>：提供了 iOS 应用与扩展之间的消息传递，其最有价值之处当属 iPhone 与  Watch 间的消息传递，从而实现相互操控的功能。</li>
<li><a href="https://github.com/Thomvis/BrightFutures" target="_blank" rel="external">Thomvis/BrightFutures</a>：漫长或复杂计算由独立线程异步来完成。</li>
<li><a href="https://github.com/Khan/Prototope" target="_blank" rel="external">Khan/Prototope</a>：虽然看不懂这套用户交互层面的轻量级原型框架用处在哪里（哪位同学能给俺提示一下）？不过，作者将这套框架的 Swift API完整桥接为 JS 接口倒是很有意思。</li>
<li><a href="https://github.com/MHaroonBaig/MotionKit" target="_blank" rel="external">MHaroonBaig/MotionKit</a>：为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。</li>
<li><a href="https://github.com/uber/jetstream-ios" target="_blank" rel="external">uber/jetstream-ios</a>：一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。</li>
<li><a href="https://github.com/jessesquires/JSQNotificationObserverKit" target="_blank" rel="external">jessesquires/JSQNotificationObserverKit</a>：一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires ，也是一位知名博主，收录过其文章『An analysis of sorts between Objective-C and Swift』。</li>
<li><a href="https://github.com/morizotter/TouchVisualizer" target="_blank" rel="external">morizotter/TouchVisualizer</a>：实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。这个组件对于需要做应用演示的同学尤其有用。</li>
<li><a href="https://github.com/FutureKit/FutureKit" target="_blank" rel="external">FutureKit/FutureKit</a>：“是一个 100% Swift 实现的 Future/Promises 库，由 Swift Generic 带来的类型安全、由 GCD 带来的线程安全，通过 FutureKit 可以在 iOS/OS X 下灵活玩转 Future/Promises 式编程了”。推荐者：<a href="http://weibo.com/tualatrix" target="_blank" rel="external">@图拉鼎</a></li>
<li><a href="https://github.com/SwiftBond/Bond" target="_blank" rel="external">SwiftBond/Bond</a>：使用简单、易于理解的对象绑定框架。比如：你可以使用代码 textField -&gt;&gt; label 将输入框文本映射到标签中的文字属性，当文本变化时，标签文字随动变化。 真的很方便。</li>
<li><a href="https://github.com/nabilfreeman/ios-universal-webview-boilerplate" target="_blank" rel="external">nabilfreeman/ios-universal-webview-boilerplate</a>： 快速封装 WebApp 到 iOS 应用，即便你毫无 Swift 编程经验。</li>
<li><a href="https://github.com/FabrizioBrancati/BFKit-Swift" target="_blank" rel="external">FabrizioBrancati/BFKit-Swift</a>：作者说这套工具库可以提高应用开发效率。不知效果如果？有兴趣的同学可以试用一下。</li>
</ul>
</li>
<li><p>UI组件</p>
<ul>
<li><a href="https://github.com/jcavar/refresher" target="_blank" rel="external">jcavar/refresher</a>：一个常用的下拉即刷新列表工具类，提供开放接口定制刷新动态变换效果。</li>
<li><a href="https://github.com/ariok/BWWalkthrough" target="_blank" rel="external">ariok/BWWalkthrough</a>：让你的页面切换动起来，示例效果杠杠的。作者还提供了比较完整的开发文档及示例解说。</li>
<li><a href="https://github.com/vikmeup/SCLAlertView-Swift" target="_blank" rel="external">vikmeup/SCLAlertView-Swift</a>：动画效果弹出框封装库（管理于 CocoaPods），使用也足够方便。试着运行了一下，效果还不错。</li>
<li><a href="https://github.com/varshylmobile/MapManager" target="_blank" rel="external">varshylmobile/MapManager</a>:地图管理封装库（默认支持Google和Apple地图服务）。</li>
<li><a href="https://github.com/varshylmobile/LocationManager" target="_blank" rel="external">varshylmobile/LocationManager</a>：位置管理封装库（默认支持 Google 和 Apple 地图服务）。</li>
<li><a href="https://github.com/neoneye/SwiftyFORM" target="_blank" rel="external">neoneye/SwiftyFORM</a>：表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。</li>
<li><a href="https://github.com/ortuman/SwiftForms" target="_blank" rel="external">ortuman/SwiftForms</a>：这个表单递交库简单实用，支持主要数据类型及定制。快速开发利器。</li>
<li><a href="https://github.com/kentya6/KYCircularProgress" target="_blank" rel="external">kentya6/KYCircularProgress</a>：这个进程条类库实现及使用都很简单，支持进程路径的定制，灵活方便。</li>
<li><a href="https://github.com/coolbeet/CBStoreHouseRefreshControl" target="_blank" rel="external">coolbeet/CBStoreHouseRefreshControl</a>：这个下拉刷新库，提供完全可定制进度变换效果，且极具艺术感。建议有能力的同学把 Objective-C 版本改写为Swift版本。</li>
<li><a href="https://github.com/kevinzhow/PNChart-Swift" target="_blank" rel="external">kevinzhow/PNChart-Swift</a>：PNChart 的 Swift 版实现。PNChart <a href="http://t.cn/zRWXJCZ" target="_blank" rel="external">http://t.cn/zRWXJCZ</a> 是饼图、折线图、柱状图等常用可视化图表工具类库。开发者：<a href="http://weibo.com/kevinzhow" target="_blank" rel="external">@周楷雯Kevin</a></li>
<li><a href="https://github.com/exchangegroup/Dodo" target="_blank" rel="external">exchangegroup/Dodo</a>：一款轻量地可定制信息栏小组件。包含 success, info, warning 及 error 类型消息展现。提供基本的按扭及事件绑定。</li>
<li><a href="https://github.com/codestergit/SweetAlert-iOS" target="_blank" rel="external">codestergit/SweetAlert-iOS</a>：该弹窗控件设计简单直接，功能完整，动画效果恰如其分。实在不可多得，必须收录。</li>
<li><a href="https://github.com/Ramotion/animated-tab-bar" target="_blank" rel="external">Ramotion/animated-tab-bar</a>：一款灵动的动画标签栏类库。可在 storyboard 中直接使用，非常方便。Demo 效果非常漂亮。连续三天 GitHub 分类排名第一，且迅速过 600 星。它的代码并非复杂或特别，相信大家中意它的还是其设计感。</li>
<li><a href="https://github.com/Ramotion/paper-switch" target="_blank" rel="external">Ramotion/paper-switch</a>：类库实现了当 Switch 组件开/关切换时，平滑过渡到父视图的变换效果功能（核心类继承了 UISwitch）。P.S. 该开发者也是这几天热门项目 Ramotion/animated-tab-bar 的作者。</li>
<li><a href="https://github.com/FahimF/FloatLabelFields" target="_blank" rel="external">FahimF/FloatLabelFields</a>： 基于”<a href="http://mattdsmith.com/float-label-pattern/" target="_blank" rel="external">Float Label Pattern</a>“的内嵌浮动标签输入效果 Swift 版实现类库。</li>
<li><a href="https://github.com/cemolcay/ReorderableGridView-Swift" target="_blank" rel="external">cemolcay/ReorderableGridView</a>：可以拖拽排列 Grid 框格的 UI 组件。功能说明完整，使用方便，应该是一个不错的 UI “轮子”。</li>
<li><a href="https://github.com/zhxnlai/ZLBalancedFlowLayout" target="_blank" rel="external">zhxnlai/ZLBalancedFlowLayout</a>：一个通过调整 cell 大小来利用空间的 UICollectionViewFlowLayout 子类。</li>
<li><a href="https://github.com/uacaps/PageMenu" target="_blank" rel="external">uacaps/PageMenu</a>：分页式菜单控制及动态页视图切换。这款控件比较实用，且提供 CocoaPods 安装。</li>
<li><a href="https://github.com/Yalantis/Side-Menu.iOS" target="_blank" rel="external">Yalantis/Side-Menu.iOS</a>：一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于 Hamburger 式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比<a href="https://redbooth.com/blog/hamburger-menu-iphone-app" target="_blank" rel="external">进行了抨击</a>，仅做参考。</li>
<li><a href="https://github.com/Mozharovsky/CVCalendar" target="_blank" rel="external">Mozharovsky/CVCalendar</a>：开源 Swift 版日历组件及示例。该项目开发者充分使用了面向对象设计思想，让开发者可以更容易扩展及定制功能。同时，该开发者还提供了详细的组件使用方法（Storyboard 和代码方式指南）。</li>
<li><a href="https://github.com/dekatotoro/SlideMenuControllerSwift" target="_blank" rel="external">dekatotoro/SlideMenuControllerSwift</a>：这是一个侧滑菜单弹窗 UI 组件，它提供高度可定制参数及完整示例。另外，组件代码集中，易用，仅一个核心类 <a href="https://github.com/dekatotoro/SlideMenuControllerSwift/blob/master/Source/SlideMenuController.swift" target="_blank" rel="external">SlideMenuController.swift</a> 。</li>
<li><a href="https://github.com/rhcad/ShapeAnimation-Swift" target="_blank" rel="external">rhcad/ShapeAnimation-Swift</a>：功能强大、使用简单的矢量动画框架。支持多层级，多形状，渐变以及各种常见的动画变化效果。绘图核心基于该作者另一个近期很火的开源项目 <a href="https://github.com/schwa/SwiftGraphics" target="_blank" rel="external">schwa/SwiftGraphics</a>。</li>
<li><a href="https://github.com/raulriera/TextFieldEffects" target="_blank" rel="external">raulriera/TextFieldEffects</a>：具有不同输入风格及变化效果的标签和文本框组件库。它的原型来自 <a href="http://tympanus.net/codrops/2015/01/08/inspiration-text-input-effects/" target="_blank" rel="external">codrops</a> 的 JS/CSS 项目。P.S. 我曾经还推荐过另一款基于 “Float Label Pattern” 风格类似项目 <a href="https://github.com/FahimF/FloatLabelFields" target="_blank" rel="external">FloatLabelFields</a>，与之一样优秀。</li>
<li><a href="https://github.com/MengTo/Spring" target="_blank" rel="external">MengTo/Spring</a>：不仅具有极简制作动画的 API ，还提供 Demo 界面调试动画效果，并生成相应代码。建议同学们在 Xcode 中运行体验一次，相信这个开源项目足够让你惊艳。已将其收入《<a href="https://github.com/ipader/SwiftGuide/blob/master/Featured.md" target="_blank" rel="external">Swift 开源项目精选</a>》。</li>
<li><a href="https://github.com/icanzilb/SwiftSpinner" target="_blank" rel="external">icanzilb/SwiftSpinner</a>：这个图文结合进程条功能完整，整体效果还很酷。当然，使用也很简单。值得收录。</li>
<li><a href="https://github.com/ichaelbabiy/RMParallax" target="_blank" rel="external">michaelbabiy/RMParallax</a>：在应用启动时，提供简单帮助向导步骤的界面组件及示例程序。</li>
<li><a href="https://github.com/ggamecrazy/LoadingImageView" target="_blank" rel="external">ggamecrazy/LoadingImageView</a>：简单实用的异步图片加载类库及示例。使用方便，功能独立、完整（离线存储也在计划中）。</li>
<li><a href="https://github.com/pixyzehn/MediumScrollFullScreen" target="_blank" rel="external">pixyzehn/MediumScrollFullScreen</a>：上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，<a href="https://github.com/pixyzehn" target="_blank" rel="external">他</a>的另外几个菜单类项目也都不错，值得参考，比如：PathMenu, MediumMenu 等。</li>
<li><a href="https://github.com/MoZhouqi/KMPlaceholderTextView" target="_blank" rel="external">MoZhouqi/KMPlaceholderTextView</a>：可显示多行 placeholder 的 textView，实现逻辑简单、巧妙。</li>
<li><a href="https://github.com/prine/ROStorageBar" target="_blank" rel="external">prine/ROStorageBar</a>：存储器使用情况指示条组件，显示参数丰富，易于使用。开始以为它也包含了计算功能，可惜并没有，只是一个纯界面的小组件。不过，仍然有一定的实用性。</li>
<li><a href="https://github.com/Yalantis/Persei" target="_blank" rel="external">Yalantis/Persei</a>：动画隐藏或显示顶部菜单支持库及示例项目。P.S. Yalantis 这个开发商，在 GitHub 上展示开发能力，Dribbble 上展示交互设计能力，并在 Behance 推广项目。整体展现了其出众的软件过程管理及综合开发实力。非常值得国内开发者学习。</li>
<li><a href="https://github.com/KyleGoddard/KGFloatingDrawer" target="_blank" rel="external">KyleGoddard/KGFloatingDrawer</a>：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞。</li>
<li><a href="https://github.com/zemirco/swift-linechart" target="_blank" rel="external">zemirco/swift-linechart</a>：功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件。</li>
<li><a href="https://github.com/khawars/KSTokenView" target="_blank" rel="external">khawars/KSTokenView</a>：带搜索、快捷输入、分段显示关键词的增强输入组件。作者提供了丰富地配置参数。主体功能同群发短信时选择、编辑好友群。</li>
<li><a href="https://github.com/andreamazz/GearRefreshControl" target="_blank" rel="external">andreamazz/GearRefreshControl</a>：这款下拉刷新动画是我所看到最没违和感的一个。</li>
<li><a href="https://github.com/micazeve/MAGearRefreshControl" target="_blank" rel="external">micazeve/MAGearRefreshControl</a>：同样是下拉即刷新，看看人家花了多大的心思写<a href="https://github.com/micazeve/MAGearRefreshControl/blob/master/Classes/MAGearRefreshControl.swift" target="_blank" rel="external">代码</a>。另一位开发者也实现在类似动画效果 <a href="https://github.com/andreamazz/GearRefreshControl" target="_blank" rel="external">andreamazz/GearRefreshControl</a>，可以感受一下编程的多变性。</li>
<li><a href="https://github.com/gali8/Tesseract-OCR-iOS" target="_blank" rel="external">gali8/Tesseract-OCR-iOS</a>：OCR 文字识别也有相应 iOS 项目。虽然是 Objective C 版，不过，提供 CocoaPods 三方库引用。与 Android 版师出同门。属于主流开源项目。</li>
<li><a href="https://github.com/Akkyie/AKPickerView-Swift" target="_blank" rel="external">Akkyie/AKPickerView-Swift</a>：AKPickerView O网页链接：一款小而美的 3D 效果选择器。P.S. 作者分别提供了 CocoaPods 和 Carthage 两种方式的三方接口对外引用和指南，Carthage 获得越来越多主流开发者重视了。</li>
<li><a href="https://github.com/danielgindi/ios-charts" target="_blank" rel="external">danielgindi/ios-charts</a>：一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。P.S. 当然 <a href="http://weibo.com/kevinzhow" target="_blank" rel="external">@周楷雯Kevin</a> 同学的 <a href="https://github.com/kevinzhow/PNChart-Swift" target="_blank" rel="external">PNChart-Swift</a> 也不容错过，同学们可以各取所需比较使用。</li>
<li><a href="https://github.com/scotteg/LayerPlayer" target="_blank" rel="external">scotteg/LayerPlayer</a>：一款全面展示核心动画 API 示例项目（<a href="https://itunes.apple.com/app/layer-player/id949768742" target="_blank" rel="external">上架应用</a>）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。RayWenderlich 有针对该项目的 <a href="http://www.raywenderlich.com/90488/calayer-in-ios-with-swift-10-examples" target="_blank" rel="external">撰文解读</a>（<a href="http://www.cocoachina.com/ios/20150318/11350.html" target="_blank" rel="external">中译文</a> By <a href="http://weibo.com/u/2708375871" target="_blank" rel="external">@TurtleFromMars</a>），与开发者 Scott Gardner 的 <a href="http://www.raywenderlich.com/90919/great-calayer-tour-tech-talk-video" target="_blank" rel="external">视频讨论</a>。</li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveAnimation" target="_blank" rel="external">ReactiveCocoa/ReactiveAnimation</a>：“ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。国外开发者社区就是拽啊！ By <a href="http://weibo.com/tualatrix" target="_blank" rel="external">@图拉鼎</a>”。</li>
<li><a href="https://github.com/larcus94/BRNImagePickerSheet" target="_blank" rel="external">larcus94/BRNImagePickerSheet</a>：图片或视频选择器（可多选）组件及其示例项目。P.S. 作者推荐低藕、非侵入式三方库依赖引用方案 Carthage，从 iOS 8 开始，越来越多开发者推荐 Carthage 做为标配了。</li>
<li><a href="https://github.com/JayGajjar/JGTransitionCollectionView" target="_blank" rel="external">JayGajjar/JGTransitionCollectionView</a>：基于集合视图扩展实现完成自动布局及单元项 Flip 式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。</li>
<li><a href="https://github.com/knutigro/COBezierTableView" target="_blank" rel="external">knutigro/COBezierTableView</a>：通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。#为开源点赞#</li>
<li><a href="https://github.com/jozsef-vesza/ExpandingStackCells" target="_blank" rel="external">jozsef-vesza/ExpandingStackCells</a>：采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。</li>
<li><a href="https://github.com/szk-atmosphere/SAHistoryNavigationViewController" target="_blank" rel="external">szk-atmosphere/SAHistoryNavigationViewController</a>：通过继承 UIViewController 并扩展 UICollectionView，UINavigationController，NSLayoutConstraint 等界面及布局控制核心类，应用内模拟实现 iOS 任务管理界面及切换组件。</li>
<li><a href="https://github.com/szk-atmosphere/SABlurImageView" target="_blank" rel="external">szk-atmosphere/SABlurImageView</a>：支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。</li>
<li><a href="https://github.com/cocoatoucher/AIFlatSwitch" target="_blank" rel="external">cocoatoucher/AIFlatSwitch</a>：一款带平滑过渡动画的 Switch 组件类。记得之前收录过两款相同风格的 <a href="https://github.com/robb/hamburger-button" target="_blank" rel="external">Hamburger - Menu/Close</a> 和 <a href="https://github.com/fastred/HamburgerButton" target="_blank" rel="external">Hamburger - Menu/Back</a>。都是精细之作。</li>
<li><a href="https://github.com/GabrielAlva/Swift-Prompts" target="_blank" rel="external">GabrielAlva/Swift-Prompts</a>：一款漂亮、实用的提示弹窗。使用简单，参数定制完整，还支持窗口拖拽操作。</li>
<li><a href="https://github.com/inFullMobile/WobbleView" target="_blank" rel="external">inFullMobile/WobbleView</a>：当界面组件过渡时，带波纹摆动效果的组件扩展实现类及示例项目。</li>
<li><a href="https://github.com/cjwirth/RichEditorView" target="_blank" rel="external">cjwirth/RichEditorView</a>：一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。</li>
<li><a href="https://github.com/SemperIdem/MKMapView-Extension" target="_blank" rel="external">SemperIdem/MKMapView-Extension</a>：“在用     MapKit 的时候发现MKMapView缺少了极其重要的 ZoomLevel 这一个功能，因此便参照了网上的一些OC例程写了一个Swift版本的扩展，允许开发者获取当前地图的缩放级别和设置缩放级别。By <a href="http://weibo.com/moonisky" target="_blank" rel="external">@星夜暮晨</a>”。</li>
<li><a href="https://github.com/didierbrun/DBPathRecognizer" target="_blank" rel="external">didierbrun/DBPathRecognizer</a>：基于路径模型的手势识别工具（仅一个核心类）。妙处在于作者通过示例项目设置好 A-Z 字母的路径模型后，可以进行相应的手写识别。尽管它可能无法替代专业的手写识别输入，不过对于普通的手势识别还是搓搓有余了。</li>
<li><a href="https://github.com/Yalantis/GuillotineMenu" target="_blank" rel="external">Yalantis/GuillotineMenu</a>：正如其项目名字一样，这是一款极具创意及突破精神的动画演示项目。P.S. 这家公司（Yalantis）做动画，尤其界面特效出神入化。且 iOS / Android 通吃。</li>
<li><a href="https://github.com/aryaxt/ScrollPager" target="_blank" rel="external">aryaxt/ScrollPager</a>：一款小巧、易用的页滚界面组件。结合 storyboard 及滚动视图，轻易实现拖拽页滚功能。</li>
<li><a href="https://github.com/wltrup/iOS-Swift-Circular-Progress-View" target="_blank" rel="external">wltrup/iOS-Swift-Circular-Progress-View</a>：小而精悍地可定制类似 Apple Watch 圆型进程条组件。该组件同时支持代码及 Interface Builder 两种使用方式。</li>
<li><a href="https://github.com/haaakon/SingleLineShakeAnimation" target="_blank" rel="external">haaakon/SingleLineShakeAnimation</a>：用一行代码给视图加上抖动效果。</li>
<li><a href="https://github.com/indragiek/MarkdownTextView" target="_blank" rel="external">indragiek/MarkdownTextView</a>：非常轻量、简洁、高效的 Markdown 编辑组件及示例。这样的开源项目太喜欢了。</li>
<li><a href="https://github.com/nickoneill/PermissionScope" target="_blank" rel="external">nickoneill/PermissionScope</a>：向用户请求 iOS 权限的封装组件。封装库 API 调用非常方便，调用代码也很精简。一个很好的“轮子”，值得收录。</li>
<li><a href="https://github.com/zhxnlai/UIColor-ChineseTraditionalColors" target="_blank" rel="external">zhxnlai/UIColor-ChineseTraditionalColors</a>：中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() …”，如此引用是否感觉亲切多了。P.S. 好的项目，源于用心，技术次之。这位同学已经深谙其道了。</li>
<li><a href="https://github.com/zhxnlai/ZLSwipeableViewSwift" target="_blank" rel="external">zhxnlai/ZLSwipeableViewSwift</a>：多变的卡片切换转场动画封装类库。</li>
<li><a href="https://github.com/FlexMonkey/ShinpuruLayout" target="_blank" rel="external">FlexMonkey/ShinpuruLayout</a>：通过水平和垂直分组模块实现简单、快速布局的组件库。作者提供了多种不同类型的布局示例。</li>
<li><a href="https://github.com/ziligy/JGFlipMenu" target="_blank" rel="external">ziligy/JGFlipMenu</a>：Flip 式菜单及其对应动画组件。使用也很简单直接 Interface Builder 。赞不赞自己看。</li>
<li><a href="https://github.com/Draveness/DKChainableAnimationKit" target="_blank" rel="external">Draveness/DKChainableAnimationKit</a>：高可读、链式代码风格动画框架库。</li>
<li><a href="https://github.com/icanzilb/EasyAnimation" target="_blank" rel="external">icanzilb/EasyAnimation</a>：又一款使用简单、功能强大的动画类库。</li>
<li><a href="https://github.com/andreamazz/BubbleTransition" target="_blank" rel="external">andreamazz/BubbleTransition</a>：以气泡膨胀和缩小的动画效果来显示切换界面。代码实现很简单，效果很突出。</li>
<li><a href="https://github.com/KittenYang/KYFloatingBubble" target="_blank" rel="external">KittenYang/KYFloatingBubble</a>：实现iOS7 Game Center浮动气泡的一种思路。示例代码不多，效果还真得赞。</li>
<li><a href="https://github.com/i-schuetz/SwiftCharts" target="_blank" rel="external">i-schuetz/SwiftCharts</a>：基于层架构设计思想的图表类库。基于层架构，无论定制新的图表类型还是已有图表的叠加，都变得非常的容易。</li>
<li><a href="https://github.com/tristanhimmelman/ZoomTransition" target="_blank" rel="external">tristanhimmelman/ZoomTransition</a>：通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。</li>
<li><a href="https://github.com/Yalantis/PullToRefresh" target="_blank" rel="external">Yalantis/PullToRefresh</a>：刷新动画可定制的下拉数据请求更新组件（类库非常简洁易用）。该组件由知名开源开发商 Yalantis 开发，并且还提供了完整动画定制演示项目 <a href="https://github.com/Yalantis/PullToMakeSoup" target="_blank" rel="external">PullToMakeSoup</a></li>
<li><a href="https://github.com/mikaoj/BSImagePicker" target="_blank" rel="external">mikaoj/BSImagePicker</a>：图片多选组件。接口简单，使用很方便。</li>
<li><a href="https://github.com/skywinder/GaugeKit" target="_blank" rel="external">skywinder/GaugeKit</a>：模拟实现  Watch 风格运动进程表盘示例。P.S. 顺附  Watch 另一个圆型进程条参考项目 <a href="https://github.com/wltrup/iOS-Swift-Circular-Progress-View" target="_blank" rel="external">iOS-Swift-Circular-Progress-View</a></li>
<li><a href="https://github.com/wongzigii/Butterfly" target="_blank" rel="external">wongzigii/Butterfly</a>：一款轻量、优雅的缺陷报告及反馈组件。与应用集成极为简单（仅需 2 行代码）。这个“轮子”实在太实用了，强烈推荐。附演示示例动态图。作者：<a href="http://weibo.com/wongzigii" target="_blank" rel="external">@Wongzigii</a></li>
</ul>
</li>
<li><p>测试相关</p>
<ul>
<li><a href="https://github.com/kylef/Mockingjay" target="_blank" rel="external">kylef/Mockingjay</a>：在单元测试时，模拟匹配条件的任意 HTTP 请求，该类库集成于 XCTest 框架内。是一套不可多得的快速开发工具库。</li>
<li><a href="https://github.com/practicalswift/swift-compiler-crashes" target="_blank" rel="external">practicalswift/swift-compiler-crashes</a>：旨在收集使 Swift 编译器崩溃的测试用例。这是一个疯狂又非常有意义的开源项目。可以定期关注一下。P.S. 该开源项目作者最新提示：Xcode 6.3 beta 与 Swift 1.2 已修复了其已发现编译器崩溃级缺陷的 83% 。</li>
<li><a href="https://github.com/czechboy0/Buildasaur" target="_blank" rel="external">czechboy0/Buildasaur</a>：自动测试 GitHub Pull Requests，以提高团队生产力。Buildasaur 安装条件：Xcode 6+, Xcode Server 4+ 和 GitHub 仓库证书。</li>
<li><a href="https://github.com/czechboy0/XcodeServerSDK" target="_blank" rel="external">czechboy0/XcodeServerSDK</a>：非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 <a href="https://github.com/czechboy0/Buildasaur" target="_blank" rel="external">Buildasaur</a>。</li>
<li><a href="https://github.com/realm/SwiftCov" target="_blank" rel="external">realm/SwiftCov</a>：Realm 开发的 Swift 代码测试覆盖率命令行工具。大家可以用用看，试试效果如何？</li>
</ul>
</li>
</ul>
<h3 id="2-示例项目"><a href="#2-示例项目" class="headerlink" title="2. 示例项目"></a><a id="examples"></a>2. 示例项目</h3><ul>
<li><a href="https://developer.apple.com/wwdc/resources/sample-code/" target="_blank" rel="external">官方示例</a>：”比起 GitHub 上的开源项目来说，官方的代码我觉得是更有参考价值的，比如 Session 406 的代码，Lister，就用一个 Swift 实现的包含 OSX 和 iOS 的” By <a href="http://weibo.com/lancy1014" target="_blank" rel="external">@晨钰Lancy</a></li>
<li><a href="https://developer.apple.com/library/ios/samplecode/Lister/Introduction/Intro.html" target="_blank" rel="external">官方示例 － Lister</a>：“Lister 这个官方 demo 也跑起来了。Apple 还是很用心的，不仅做了 iOS、Mac 和 Apple Watch 版本，并且为这个 demo 分别用 Objective-C 和 Swift 实现了一遍，最后还配了整整 30 页的文档！By <a href="http://weibo.com/tualatrix" target="_blank" rel="external">@图拉鼎</a>”。官方示例一份顶十份，学走路从官方文档及示例开始。</li>
<li><a href="https://github.com/tsunghao/learn-swift" target="_blank" rel="external">tsunghao/learn-swift</a>：该项目是 <a href="https://github.com/nettlep/learn-swift" target="_blank" rel="external">nettlep/learn-swift</a> 项目的（正体）中译版。最难能可贵的是原项目最后更新是 6 个多月前了。而中译项目已经更新至 Xcode 6.2(6C131e) ，且下一版（Swift 1.2）正式发布后，作者还会继续更新。</li>
<li><a href="https://github.com/ipader/SwiftGuide/tree/master/VirtualGS" target="_blank" rel="external">VirtualGS教程示例</a>：以下示例程序来源于林泰前老师<a href="http://weibo.com/limtc" target="_blank" rel="external">微博</a>或<a href="http://blog.sina.com.cn/virtualgs" target="_blank" rel="external">博客</a>发布，为方便大家学习 Swift 编程，有幸获得林老师的准许在这里发布。</li>
<li><a href="https://github.com/onevcat/Easy-Cal-Swift" target="_blank" rel="external">Easy-Cal-Swift</a>：”实在忍不了 Swift 的数字计算时候的好麻烦的强制转换了，重载了一下加减乘除之类的操作符，这样就不用显式地转换类型了…（对于像我这样现在连补全都没有的孩子来说，能省好多时间啊- -）” By <a href="http://weibo.com/onevcat" target="_blank" rel="external">@onevcat</a></li>
<li><a href="https://github.com/roadfire/SwiftFonts" target="_blank" rel="external">An app to list the available fonts on iOS</a>：用 Swift 语言调用 UIKit，列出设备内所有字体名称的小程序。</li>
<li><a href="https://github.com/jxd001/Swift-ZhihuDaily" target="_blank" rel="external">Swift版的知乎日报</a>：学习一门新语言，光看是没有用的，想要快速的掌握它，就得投入到真实项目的开发中，仿照 @YANGReal 的糗事百科，做了一个 Swift 版的知乎日报</li>
<li><a href="https://github.com/wantedly/swift-rss-sample" target="_blank" rel="external">Swift RSS Sample</a>：用 Swift 语言开发的 RSS 阅读器</li>
<li><a href="https://github.com/sxyx2008/Swift-PM25" target="_blank" rel="external">Swift版PM2.5的例子</a>：一个很好的 Swift 与 Objective C 协同工作 GitHub 开源项目。用到的开源类库有 <a href="https://github.com/topfunky/hpple" target="_blank" rel="external">TFHpple</a>：以 XPath 方式解析 HTML，<a href="https://github.com/vikmeup/SCLAlertView-Swift" target="_blank" rel="external">SCLAlertView</a>：使用 Swift 写的 AlertView SVProgressHUD 进度条 By <a href="http://weibo.com/qq184675420" target="_blank" rel="external">@荧星诉语</a></li>
<li><a href="https://github.com/lexrus/LTMorphingLabel" target="_blank" rel="external">lexrus/LTMorphingLabel</a>：实现文字飘入飘出的效果。效果非常赞！</li>
<li><a href="https://github.com/android1989/CharacterText" target="_blank" rel="external">android1989/CharacterText</a>：相比<a href="https://github.com/lexrus/LTMorphingLabel" target="_blank" rel="external">lexrus/LTMorphingLabel</a> 的各种酷炫效果，这个版本比较简单实用。</li>
<li><a href="http://t.cn/RveAZ53" target="_blank" rel="external">practicalswift/Pythonic.swift</a>：用 Swift 语言实现 Python 标准库的一部分。然后，用 Swift 写一段 Python 风格的程序，这是 Python 程序员想要的吗？相信这不过是一个实验，以此说明 Swift 语言的多变性、动态性的能力。</li>
<li><a href="https://github.com/AshRobinson/GoogleWearAlert" target="_blank" rel="external">AshRobinson/GoogleWearAlert</a>：Swift 语言实现模拟 Google Wear 风格 Alert 窗口。</li>
<li><a href="https://github.com/rafaelconde/ios8-ui-kit" target="_blank" rel="external">rafaelconde/ios8-ui-kit</a>：IOS 8 UI KIT + FOR SKETCH — 最新IOS8免费设计资源</li>
<li><a href="https://github.com/gemtot/iBeacon" target="_blank" rel="external">gemtot/iBeacon</a>：Swift 版 iBeacon 简单项目（支持最新Beta 6编译）。感兴趣的同学可以学习一下。有关于 Passbook 应用及 Passkit 框架编程知识这里有一篇网友较早发布的<a href="http://blog.csdn.net/eqera/article/details/8136880" target="_blank" rel="external">《iOS 6 - PassKit 编程指南》</a></li>
<li><a href="https://github.com/evnaz/ENSwiftSideMenu" target="_blank" rel="external">evnaz/ENSwiftSideMenu</a>：一个简单的 Slide 侧拉菜单实现。使用很方便：sideMenu = SideMenu(sourceView: self.view, menuData: [“UIDynamics”, “UIGestures”, “UIBlurEffect”])</li>
<li><a href="https://github.com/iluuu1994/Pathfinder" target="_blank" rel="external">iluuu1994/Pathfinder</a>：一个有趣的算法类项目。虽然目前只是个演示项目，不过，作者有计划加入更多算法优化程序，同时，也有计划支持3D地图。</li>
<li><a href="https://github.com/KhaosT/HomeKit-Demo" target="_blank" rel="external">KhaosT/HomeKit-Demo</a> ：HomeKit 演示项目，可以与HomeKit模拟器协同工作。由此进一步思考：HomeKit 配合 iBeacon、蓝牙，甚至更具DIY潜力的树莓派（Raspberry Pi）组成未来家居智控中心，这个方向上的开发潜力巨大。感兴趣的同学可以关注一下。</li>
<li><a href="https://github.com/mathewsanders/Animated-Transitions-Swift-Tutorial" target="_blank" rel="external">mathewsanders/Animated-Transitions-Swift-Tutorial</a>：结合 Xcode 开发步聚介绍如何开发动画过渡 <a href="http://mathewsanders.com/custom-menu-transitions-in-swift/" target="_blank" rel="external">Prototyping Animatted Transition in Swift(Part I)</a></li>
<li><a href="http://mathewsanders.com/custom-menu-transitions-in-swift/" target="_blank" rel="external">mathewsanders/Custom-Menu-Transition-Swift-Tutorial](https://github.com/mathewsanders/Custom-Menu-Transition-Swift-Tutorial)：结合Xcode开发步聚介绍如何开发动画过渡 Transition in Swift(Part II)</a></li>
<li><a href="https://github.com/vandadnp/iOS-8-Swift-Programming-Cookbook" target="_blank" rel="external">vandadnp/iOS-8-Swift-Programming-Cookbook</a>：来自《 O’Reilly’s iOS 8 Swift Programming Cookbook》的配套示例。书买不买另说，如此即时、完整、丰富的新书示例项目真不多见。悟性好的同学，开发时参考一下示例是不是就不用买书了？</li>
<li><a href="https://github.com/ide/UIVisualEffects" target="_blank" rel="external">ide/UIVisualEffects</a>：Swift 实现模糊化等视觉效果示例代码。代码详见<a href="https://github.com/ide/UIVisualEffects/blob/master/UIVisualEffects/ViewController.swift" target="_blank" rel="external">这里</a></li>
<li><a href="https://github.com/sxyx2008/FoodPin" target="_blank" rel="external">sxyx2008/FoodPin</a>：如此完整的 Swift 示例项目，可以帮助学习到不少Swift编程技巧。”用Swift写的一个功能比较完善的App，参照 Beginning iOS 8 Programming with Swift 一书。功能比较完善。AutoLayout、Core Animation、Core Data、国际化等。” By <a href="http://weibo.com/qq184675420" target="_blank" rel="external">@荧星诉语</a></li>
<li><a href="https://github.com/MoZhouqi/PhotoBrowser" target="_blank" rel="external">PhotoBrowser</a>：”展示 Instagram 授权用户发布的照片的 App，参考了Ray Wenderlich 的 Alamofire 教程，还用了 SwiftyJSON 和 FastImageCache。” By <a href="http://weibo.com/u/2626996387" target="_blank" rel="external">@Kyrrr</a></li>
<li><a href="https://github.com/dekatotoro/SlideMenuControllerSwift" target="_blank" rel="external">dekatotoro/SlideMenuControllerSwift</a>：这是一个侧滑菜单弹窗 UI 组件，它提供高度可定制参数及完整示例。另外，组件代码集中，易用，仅一个核心类 <a href="https://github.com/dekatotoro/SlideMenuControllerSwift/blob/master/Source/SlideMenuController.swift" target="_blank" rel="external">SlideMenuController.swift</a> 。</li>
<li><a href="https://github.com/mslathrop/SwiftNote" target="_blank" rel="external">mslathrop/SwiftNote</a>：一款简单的笔记应用及其 Today 插件。可惜开发者还不知道如何与 iCloud 进行数据同步，有兴趣的同学可以参与一下。</li>
<li><a href="https://github.com/gcollazo/mongodbapp" target="_blank" rel="external">gcollazo/mongodbapp</a>：实现在Mac系统菜单栏上快捷启动/停止 MongoDB 的 Swift 项目。代码简单、易读，且核心代码全部在 <a href="https://github.com/gcollazo/mongodbapp/blob/master/MongoDB/AppDelegate.swift" target="_blank" rel="external">AppDelegate.swift</a></li>
<li><a href="https://github.com/441088327/SYKeyboardTextField" target="_blank" rel="external">441088327/SYKeyboardTextField</a>：“开源一个我自己写的键盘附随输入框，为Swift做些贡献”。 作者：<a href="http://weibo.com/ysy441088327" target="_blank" rel="external">@余书懿</a></li>
<li><a href="https://github.com/dasdom/BreakOutToRefresh" target="_blank" rel="external">dasdom/BreakOutToRefresh</a>：下拉加载刷新时，嵌入了用 SpriteKit 框架写的有趣的小游戏播放页。P.S. 此例中作者嵌入的或许并没有让你耳目一新，甚至感到有点牵强，不过，若嵌入更合适的呢？</li>
<li><a href="https://github.com/eleks/rnd-apple-watch-tesla" target="_blank" rel="external">eleks/rnd-apple-watch-tesla</a>：Apple Watch 操作 Tesla 汽车。可惜是 Objective C 版本的，否则，Swift 同学又是一次很好的学习机会。</li>
<li><a href="https://github.com/kenshin03/Cherry" target="_blank" rel="external">kenshin03/Cherry</a>：定时器应用，功能包括在手表上新建活动，启动/停止活动，持久化活动数据在 iPhone，在 Glances 中查看活动状态并可直接切换至该应用。P.S. 该应用由作者之前开发的 Objective-C 项目采用 Swift 重写后获得。</li>
<li><a href="https://github.com/slazyk/SINQ" target="_blank" rel="external">slazyk/SINQ</a>：该项目把来自 C#和VB 的 LINQ 集成查询功能吸收了进来。是不是又一次证明了 Swift 吸纳各语言精华的能力很强大，是不是又一次向”大一统”的编程/编译环境迈进了一步？</li>
<li><a href="https://github.com/MengTo/DesignerNewsApp" target="_blank" rel="external">MengTo/DesignerNewsApp</a>：一款针对 Designer News 网站的完整 iOS 应用，最具特色地是开发者对动画技术得心应手的应用。P.S. 该开发者发布过一套非常完整、实用的优秀动画封装库及演示工具 <a href="http://weibo.com/5167456916/C2l95BHar" target="_blank" rel="external">Spring</a>。</li>
<li><a href="https://github.com/MoZhouqi/VoiceMemos" target="_blank" rel="external">MoZhouqi/VoiceMemos</a>：“语音笔记本应用。用到了一些 iOS 8 新技术，比如 UISplitViewController、UISearchController、UIAlertController、自定义 Presentations、可视化开发，还有一些语音相关的用法。界面开发的新技术介绍可以参考 <a href="http//weibo.com/onevcat">@onevcat</a> 的 <a href="http://onevcat.com/2014/07/ios-ui-unique/" target="_blank" rel="external">这个帖子</a>”。</li>
<li><a href="https://github.com/schwa/TimingFunctionEditor" target="_blank" rel="external">schwa/TimingFunctionEditor</a>：贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 <a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a>。</li>
<li><a href="https://github.com/CarlosButron/Swift" target="_blank" rel="external">CarlosButron/Swift</a>：60 多个 Swift 示例项目及代码集锦，技术及品类几乎涉足方方面面。</li>
<li><a href="https://github.com/lizyyy/Homeoff" target="_blank" rel="external">lizyyy/Homeoff</a>：“用swift写了一个模仿Launcher通知中心快捷方式的应用。支持 20 个应用，并增加了一个返回到桌面来解放Home键的功能 By <a href="http://weibo.com/u/2028497043" target="_blank" rel="external">@Swift攻略</a>”。</li>
<li><a href="https://github.com/MakeZL/ZLSwiftRefresh" target="_blank" rel="external">MakeZL/ZLSwiftRefresh</a>：下拉刷新/上拉加载组件扩展及示例。“支持自定义动画，集成简单，兼容 UITableView，CollectionView，ScrollView，WebView”。</li>
<li><a href="https://github.com/philcn/Auto-Layout-Showcase" target="_blank" rel="external">philcn/Auto-Layout-Showcase</a>：几项常用自动布局技巧示例代码及演示。搭建简单应用够使了。</li>
<li><a href="https://github.com/FlexMonkey/MetalParticles" target="_blank" rel="external">FlexMonkey/MetalParticles</a>：超强计算、极致渲染，发挥 GPU 最高效能 Metal 框架演示项目。P.S. Metal 框架是并驾于 OpenGL ES 的底层图形计算接口。相比于 OpenGL，它甚至更底层、更接近 GPU。它是需求超强计算及渲染性能要求的游<br>戏平台不二之选。</li>
<li><a href="https://github.com/Mav3r1ck/Project-RainMan" target="_blank" rel="external">Mav3r1ck/Project-RainMan</a>：一款很酷的天气预报应用。Forcast.io 提供的天气预报 API 很赞。</li>
<li><a href="https://github.com/kongtomorrow/WatchTransition" target="_blank" rel="external">kongtomorrow/WatchTransition</a>：模拟 Apple Watch 上的动画过渡效果。Objective-C 和 Swift 混搭开发学习参考。</li>
<li><a href="https://github.com/jessesquires/JSQWebViewController" target="_blank" rel="external">jessesquires/JSQWebViewControlle</a>：一款轻量的 WebKit 浏览器视图控制封装库（使用 WKWebView）。</li>
<li><a href="https://github.com/radex/DiffyTables" target="_blank" rel="external">radex/DiffyTables</a>：提供在 WatchKit 应用中有效使用表格的实例。完整实现思路作者已经撰写长文 <a href="http://radex.io/watch/diffing/" target="_blank" rel="external">Practical and efficient WatchKit tables with view model diffing</a>。充分理解该文章作者推荐阅读 <a href="http://techblog.thescore.com/2015/05/20/reducing-watchkit-traffic-with-view-models/" target="_blank" rel="external">Reducing WatchKit Traffic With View Models</a></li>
<li>WWDC 2015 watchOS应用示例：1. <a href="https://developer.apple.com/library/prerelease/watchos/samplecode/Lister/Introduction/Intro.html" target="_blank" rel="external">Lister</a>(大家比较熟了); 2. <a href="https://developer.apple.com/library/prerelease/watchos/samplecode/PotLoc/Introduction/Intro.html" target="_blank" rel="external">PotLoc</a>：使用 CoreLocation 定位；3.<a href="https://developer.apple.com/library/prerelease/watchos/samplecode/WatchKitMoviePlayer/Introduction/Intro.html" target="_blank" rel="external">WatchKitMoviePlayer</a>: 使用 WKInterfaceMovie播放视频。</li>
<li><a href="https://github.com/mengxiangyue/The-Swift-2.0-Programming-Language-playground" target="_blank" rel="external">The-Swift-2.0-Programming-Language-playground</a>：“自己整理的对应最新发布《The Swift Programming Language》Swift 2.0 一书中的内容的Playground，基本在Playground中包含了书中描述的知识点 By <a href="http://weibo.com/u/1750643861" target="_blank" rel="external">@孟祥月</a>”。</li>
<li><a href="https://github.com/alskipp/Swift-Diagram-Playgrounds" target="_blank" rel="external">alskipp/Swift-Diagram-Playgrounds</a>：面向协议的编程示例 Playgrounds 。P.S. 编程技术真是日新月异啊。</li>
<li><a href="https://github.com/jstart/UIStackView-Playground" target="_blank" rel="external">jstart/UIStackView-Playground</a>：采用 UIStackView 平铺式自动布局演示示例 Playground。#为开源点赞# P.S. 顺附 <a href="http://www.cnblogs.com/tieria/p/4572882.html" target="_blank" rel="external">UIStackView 官方文档译文</a> By <a href="http://weibo.com/tieria0512" target="_blank" rel="external">@潇湘TT</a>。</li>
<li><a href="https://github.com/phpmaple/Stick-Hero-Swift" target="_blank" rel="external">phpmaple/Stick-Hero-Swift</a>：“开源小游戏Stick-Hero，和大家一起学习Swift2和Spritekit，基础功能完成，后续添加一些细节方面设计 By <a href="http://weibo.com/phpmaple" target="_blank" rel="external">@KooFrank</a>”。#Swift 2#</li>
</ul>
<h3 id="3-完整项目"><a href="#3-完整项目" class="headerlink" title="3. 完整项目"></a><a id="projects"></a>3. 完整项目</h3><ul>
<li><a href="https://github.com/insidegui/WWDC" target="_blank" rel="external">WWDC app for OS X</a>：去年还只是一个会后的脑补演示项目。而今年已然成为追剧观看的超实用项目。连编译都懒得做的同学直接<a href="https://github.com/insidegui/WWDC/blob/master/Releases/WWDC_latest.zip?raw=true" target="_blank" rel="external">下载应用</a>即可。</li>
<li><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="external">fullstackio/FlappySwift</a>：用 Swift 语言实现的 FlappyBird</li>
<li><a href="https://github.com/JakeLin/SwiftWeather" target="_blank" rel="external">JakeLin/SwiftWeather</a>：天气预报iOS项目，新界面还不错，简单，还带点卡通的味道</li>
<li><a href="https://github.com/TakeFiveInteractive/WeatherMap" target="_blank" rel="external">akeFiveInteractive/WeatherMap</a>：基于地图的天气预报（上架）应用。比较适合长途自驾游的同学。</li>
<li><a href="https://github.com/tnantoka/edhita" target="_blank" rel="external">tnantoka/edhita</a>：edhita 是一款用 Swift 重写并完全开源的文本编辑器。AppStore 上已经有更新版下载。试用后感觉还不错。它甚至支持 Markdown, HTML 等文件编辑后的预览显示。</li>
<li><a href="https://github.com/jurre/TravisToday" target="_blank" rel="external">jurre/TravisToday</a>：一个功能相对完整的服务于 Travis CI 系统的 OS X 应用扩展 Today 项目案例。</li>
<li><a href="https://github.com/stakes/Frameless" target="_blank" rel="external">stakes/Frameless</a>：一款基于 WKWebView 的最小化全屏浏览器，主要功能是方便开发者采用HTML5做原型设计或 App 发布。对于测试工程师或喜欢极简、全屏浏览用户，可以直接在<a href="https://itunes.apple.com/us/app/id933580264" target="_blank" rel="external">AppStore下载</a>使用。</li>
<li><a href="https://github.com/mozilla/firefox-ios" target="_blank" rel="external">mozilla/firefox-ios</a>：Swift 写的 iOS 版 Firefox。P.S. 第三方库用到了 Alamofire, Snappy, swift-json 等，内置阅读器还使用了 Readability。</li>
<li><a href="https://github.com/lexrus/VPNOn" target="_blank" rel="external">lexrus/VPNOn</a>：一款驻在通知中心内的基于 Today 扩展的 VPN 开关应用。</li>
<li><a href="https://github.com/victor/whereami" target="_blank" rel="external">victor/whereami</a>：一款用 Swift 语言写的通过命令行获得当前设备地理位置程序。虽然很简单，不过，实用性及学习性俱佳。</li>
<li><a href="https://github.com/Ahmed-Ali/RealmObjectEditor" target="_blank" rel="external">Ahmed-Ali/RealmObjectEditor</a>：Realm 数据库 Swift 版开源编辑器。提供针对实体，属性及关系的编辑功能，完成后可以将实体结构导出为 Swift, Objective-C 或 Java 类模型。非常实用。</li>
<li><a href="https://github.com/jpsim/DeckRocket" target="_blank" rel="external">jpsim/DeckRocket</a>：在相同 WiFi 网络环境内，通过 iPhone 控制并播放 Mac 中的 PDF 文档。ft 编译器崩溃的测试用例。这是一个疯狂又非常有意义的开源项目。可以定期关注一下。P.S. 该开源项目作者最新提示：Xcode 6.3 beta 与 Swift 1.2 已修复了其已发现编译器崩溃级缺陷的 83%。</li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage/Carthage</a>：更简单的方式来管理 Cocoa 第三方框架。有了 CocoaPods 为何还要使用 Carthage，作者在 README.md（<a href="http://www.cocoachina.com/ios/20141204/10528.html" target="_blank" rel="external">中译</a>） 已经做了充分说明。</li>
<li><a href="https://github.com/artsy/eidolon" target="_blank" rel="external">artsy/eidolon</a>：艺术品拍卖的投标亭平台。作者提供了一个<a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/" target="_blank" rel="external">很励志的开发故事</a>：从商业创意到最终实现。心路历程从不开源到开源，从 Objective-C 到 Swift（去年夏天的事，现在当然是 Swift），以及选择时髦的反应式编程框架 ReactiveCocoa……</li>
<li><a href="https://github.com/mortenjust/androidtool-mac" target="_blank" rel="external">mortenjust/androidtool-mac</a>：“一款用 Swift 写的可在 Mac 上使用的 Android 工具, 支持一键截屏, 视频录制, APK 安装等功能”。</li>
<li><a href="https://github.com/lexrus/JSCoreDemo" target="_blank" rel="external">lexrus/JSCoreDemo</a>：“演示了一下怎样在 Swift 里用 JavaScriptCore 把原生功能桥接给 JS 用，代码少很容易理解”。简单、易懂的基础演示代码。P.S. 希望进阶学习的同学，这里有一个完整项目供参考 <a href="https://github.com/cjwirth/RichEditorView" target="_blank" rel="external">RichEditorView</a>：基于 HTML 5 的可定制富文本编辑器组件及示例。</li>
<li><a href="https://github.com/gilesvangruisen/Swift-YouTube-Player" target="_blank" rel="external">gilesvangruisen/Swift-YouTube-Player</a>：用不了的同学就当学习吧。或参考并试着写个 Swift-(…)-Player。</li>
<li><a href="https://github.com/Imperiopolis/WatchScreenshotMagic" target="_blank" rel="external">Imperiopolis/WatchScreenshotMagic</a>：快速生成干净、漂亮的 Apple Watch 截图的实用工具应用。</li>
<li><a href="https://github.com/beltex/dshb" target="_blank" rel="external">beltex/dshb</a>：OS X 系统状态（CPU、电池、内存、温度传感器、风扇及杂项）监视器应用。每秒刷新文本界面，极低系统开销。</li>
<li><a href="https://github.com/nscoding/sleep-osx" target="_blank" rel="external">nscoding/sleep-osx</a>：在 Spotlight 中输入 sleep 即休眠你的 Mac。实现特别简单，几行代码而已。</li>
<li><a href="https://github.com/dasdom/Tomate" target="_blank" rel="external">dasdom/Tomate</a>：这个圆盘式计时器让你更专注于工作或学习。P.S. <a href="https://itunes.apple.com/de/app/fojusi/id923044693" target="_blank" rel="external">App Store 上架收费应用</a>（0.99 欧），开发者福利呀。</li>
</ul>
<h3 id="3-项目评测"><a href="#3-项目评测" class="headerlink" title="3. 项目评测"></a><a id="project_reviews"></a>3. 项目评测</h3><ul>
<li><a href="http://jbguide.me/2014/12/18/workflow-review-what-is-workflow/" target="_blank" rel="external">【Workflow 测评】Workflow 是款什么软件？</a>（作者：<a href="http://weibo.com/jailbreakhum" target="_blank" rel="external">@JailbreakHum</a>）：”除了圣诞降价以外最近最火的软件话题应当是 #Workflow# 了。如果你没接触过此类软件,或许会纳闷它有何魅力。我们针对这款软件的测评系列的第一篇就是来向你概述它是什么软件的,所以文中给出大多是基本知识,不过相信也会给老手一定的启发。”</li>
</ul>
<h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a><a id="tools"></a>相关工具</h2><h3 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1. 开发工具"></a>1. 开发工具</h3><ul>
<li><a href="https://developer.apple.com/swift/resources/" target="_blank" rel="external">Xcode 6 beta下载</a>：苹果应用集成开发环境。支持 C/C++, Objective C, Swift 等。不用购买开发者计划，直接下载。</li>
<li><a href="http://macromates.com/" target="_blank" rel="external">Textmate</a>：Mac OS X 上一个可高度自定义的编辑器，尤其在我想做出一个快速改变但又不想等待 Xcode 加载的时候。该工具目前已经<a href="https://github.com/textmate/textmate" target="_blank" rel="external">开源</a></li>
<li><a href="http://mouapp.com/" target="_blank" rel="external">Mou</a>：OS X 上一款 Markdown 的编辑器。非常适用于编写自述文件、变更日志以及其他方面的内容。作者：<a href="http://chenluois.com/" target="_blank" rel="external">罗晨</a></li>
<li><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text ($)</a>：Mac OS X 上另一款非常受欢迎的轻量级，可高度自定义的编辑器。</li>
<li><a href="http://www.runswiftlang.com/" target="_blank" rel="external">RunSwift</a>:正在犹豫是否入手苹果电脑开始一段 Swift 编程旅程的同学们，或仅仅为了试验一段简单 Swift 代码又懒得打开 Xcode，可以试试这款 Web 版 Swift 编译环境 RunSwift。</li>
<li><a href="http://infinitapps.com/bezel" target="_blank" rel="external">InfinitApps - Bezel</a>：“嫌 Xcode 6 目前提供的 Watch 模拟器不够直观？Bezel 是一个用于视觉预览 WatchKit 所开发程序效果的小工具，前提是你安装了 xScope 软件（Mac端）或 xScopeMirror（iPhone端）。 By <a href="http://weibo.com/twios" target="_blank" rel="external">@WatchKit开发</a>”</li>
<li><a href="https://github.com/jas/playground" target="_blank" rel="external">Markdown -&gt; Playground</a>：该开源项目可将内含有 Swift 代码的 Markdown 自动转换为 Xcode Playgrounds 文件。喜欢用 Markdown 编辑的同学很激动吧。P.S. 这款工具写于 NodeJS，原因作者有交待。</li>
<li><a href="http://constraints.icodeforlove.com/" target="_blank" rel="external">iOS/Mac Autolayout Constraints</a>：这个工具不错，很直观，布局时可以省不少工夫。推荐者：<a href="http://weibo.com/qq184675420" target="_blank" rel="external">@荧星诉语</a></li>
<li><a href="https://appscreens.io/yK7cLuBNij" target="_blank" rel="external">在线生成 AppStore 审核用截图</a>：便捷的生产力工具。免费，易操作，可自定义。</li>
</ul>
<h3 id="2-代码管理"><a href="#2-代码管理" class="headerlink" title="2. 代码管理"></a>2. 代码管理</h3><ul>
<li><a href="http://github.com/" target="_blank" rel="external">GitHub</a>：声望日盛的资源分享之地。</li>
<li><a href="https://mac.github.com/" target="_blank" rel="external">GitHub for Mac</a>：一个设计的非常美观的 git 客户端，不能取代你从命令行获得的所有功能，但使用起来非常简单。</li>
<li><a href="http://gitcafe.com" target="_blank" rel="external">GitCafe</a>：GitCafe is a source code hosting service based on version control system Git。国内的代码托管服务，基于 Git，值得一提的是最近也推出了和 GitHub Pages 类似的服务 Gitcafe Pages。因为是在国内，所以相比较 GitHub 有速度优势，在网络环境差的情况下也许可以作为 GitHub 的备用。</li>
<li><a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>：国外的代码托管服务，不同于 GitHub 的是，Bitbucket 可以免费建立 private 项目。</li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a>：分布式版本控制系统和源码管理系统，其优点是：快和简单易用。对于新手来说，可在此查看免费电子书籍。</li>
</ul>
<h3 id="3-Xcode-插件"><a href="#3-Xcode-插件" class="headerlink" title="3. Xcode 插件"></a>3. Xcode 插件</h3><ul>
<li><a href="http://beta.cocoapods.org/" target="_blank" rel="external">CocoaPods</a>：第三方库的管理利器，允许你简单地把第三方库整合进自己的应用中。对我个人来说，我基本上每个项目都使用 CocoaPods。</li>
<li><a href="https://github.com/kattrali/cocoapods-xcode-plugin" target="_blank" rel="external">CocoaPods Xcode Plugin</a>：一款 Xcode 插件，允许你直接从 Xcode 管理 CocoaPod 依赖。</li>
<li><a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">onevcat/VVDocumenter-Xcode</a>：快捷注释 Xcode 插件。By <a href="http://weibo.com/onevcat" target="_blank" rel="external">@onevcat</a></li>
<li><a href="https://github.com/omz/ColorSense-for-Xcode" target="_blank" rel="external">ColorSense</a>：一款显示颜色数值的插件，还可以直接通过系统的ColorPicker来自动生成对应颜色代码</li>
<li><a href="https://github.com/ddapps/DeepIniOS" target="_blank" rel="external">Xcode 优秀插件整理</a>:持续保持整理更新的 Xcode 插件整理 By <a href="https://github.com/ddapps" target="_blank" rel="external">@ddapps</a></li>
<li><a href="https://github.com/CodeEagle/SwiftCodeSnippets" target="_blank" rel="external">CodeEagle/SwiftCodeSnippets</a>：自动下载指定 Xcode Snippet 源的 Xcode Plugin。项目缺省提供 Snippet 代码源 <a href="https://github.com/burczyk/XcodeSwiftSnippets/tree/master/plist" target="_blank" rel="external">burczyk/XcodeSwiftSnippets</a> 。</li>
<li><a href="https://github.com/realm/SwiftLint" target="_blank" rel="external">realm/SwiftLint</a>：Realm 采用 Swift 编写的基于 GitHub’s Swift Style Guide 规则的检查工具。除了命令行运行方式，也提供集成 Xcode 的方法。对于新团队，这样的工具可以自动约束大家遵循编程规范。</li>
<li><a href="http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/" target="_blank" rel="external">XCode 升级后插件失效的原理与修复办法</a>：由一条命令引发的分析文章。<a href="http://weibo.com/u/2068840121" target="_blank" rel="external">@_TongJZ</a></li>
<li><a href="https://github.com/feinstruktur/CoPilot" target="_blank" rel="external">feinstruktur/CoPilot</a>：通过此插件，Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。<a href="https://vimeo.com/128713880" target="_blank" rel="external">演示视频</a></li>
</ul>
<h3 id="4-管理工具"><a href="#4-管理工具" class="headerlink" title="4. 管理工具"></a>4. 管理工具</h3><ul>
<li><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">HomeBrew</a>：OS X 上非常出色的包管理工具。</li>
<li><a href="http://panic.com/transmit/" target="_blank" rel="external">Transmit ($)</a>：一个Mac OS X 上 FTP 客户端，有着非常漂亮的用户界面和有用的功能。</li>
</ul>
<h3 id="5-调试工具"><a href="#5-调试工具" class="headerlink" title="5. 调试工具"></a>5. 调试工具</h3><ul>
<li><a href="http://fuckingclangwarnings.com/" target="_blank" rel="external">mattt/fuckingclangwarnings.com</a>：警告与语义对照表。以后再也不用为 Xcode 各种警告纠结啦！By <a href="http://weibo.com/foogry" target="_blank" rel="external">@foogry</a></li>
</ul>
<h3 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6. 参考文章"></a>6. 参考文章</h3><ul>
<li><a href="http://www.cocoachina.com/newbie/basic/2014/0417/8187.html" target="_blank" rel="external">iOS 开发工具</a>：”这是我们多篇 iOS 开发工具系列篇中的一篇，此前的文章比如：那些不能错过的 Xcode 插件，iOS 开发者有价值的工具集，iOS/OS X 开发：各种工具快到碗里来！，App 原型设计工具使用心得（上）&amp; App 原型设计工具使用心得（下），你用哪种工具进行 iOS app 自动化功能测试？iOS 开发者必知的 75 个工具” By @CocoaChina</li>
<li><a href="http://www.cnblogs.com/daiweilai/p/4421340.html" target="_blank" rel="external">IOS 各种调试技巧豪华套餐</a>：讲得很细。对于初学 Xcode 开发的同学值得参考，对于有经验的同学可以略过。作者：<a href="http://weibo.com/daiweilai" target="_blank" rel="external">@David戴未来</a></li>
<li><a href="http://www.cocoachina.com/ios/20150423/11658.html" target="_blank" rel="external">详解Xcode 6的视图调试</a>：教程非常实用，值得学习。另外，教程选用的开源项目（<a href="https://github.com/jessesquires/JSQMessagesViewController" target="_blank" rel="external">jessesquires/JSQMessagesViewController</a>）也很经典。来源：Ray Wenderlich，译者：<a href="http://weibo.com/cocoachina" target="_blank" rel="external">@CocoaChina</a> 翻译组</li>
</ul>
<h3 id="7-示例项目"><a href="#7-示例项目" class="headerlink" title="7. 示例项目"></a>7. 示例项目</h3><ul>
<li><a href="https://github.com/dominic/ViewSource" target="_blank" rel="external">ViewSource(Swift+Objective-C)</a>：通过 iOS 8 Extension 实现让 Web 工程师喜欢的”显示网页源代码”。</li>
<li><a href="https://github.com/indragiek/Unzip" target="_blank" rel="external">indragiek/Unzip</a>：浏览ZIP文件的 iOS 8 Action 扩展。</li>
</ul>
<h3 id="8-实用资源"><a href="#8-实用资源" class="headerlink" title="8. 实用资源"></a>8. 实用资源</h3><ul>
<li><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">google/material-design-icons</a> ：对于喜欢 Material Design 风格的同学，这是难得好资源。Google 提供了极为完整的各种图标（包含 iOS 各种精度及 SVG）设计资源。</li>
<li><a href="https://github.com/hxgdzyuyi/tang_poetry" target="_blank" rel="external">全唐诗数据库</a>：SQLite 数据库脚本。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;swift-open-project&quot;&gt;&lt;a href=&quot;#swift-open-project&quot; class=&quot;headerlink&quot; title=&quot;swift-open-project&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/thinkloki/swift-open-project&quot;&gt;swift-open-project&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这里汇集了目前为止最为流行的Swift开源项目，选取SwiftGuide中的开源部分，这里将每周对项目进行总结，如果大家有推荐的可以联系thinkloki@gmail.com,或者issues，欢迎Star、Fork。感谢&lt;a href=&quot;https://github.com/ipader/SwiftGuide&quot;&gt;SwiftGuide&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IOS" scheme="https://wait.im/tags/IOS/"/>
    
      <category term="swift" scheme="https://wait.im/tags/swift/"/>
    
      <category term="open" scheme="https://wait.im/tags/open/"/>
    
  </entry>
  
  <entry>
    <title>IOS9AdaptationTips</title>
    <link href="https://wait.im/2015/10/27/IOS9AdaptationTips/"/>
    <id>https://wait.im/2015/10/27/IOS9AdaptationTips/</id>
    <published>2015-10-26T16:15:13.000Z</published>
    <updated>2017-02-06T10:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>#中文快速导航：</p>
<ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#1-demo1_ios9网络适配_ats改用更安全的https" target="_blank" rel="external">iOS9网络适配_ATS：改用更安全的HTTPS（见Demo1）</a> <ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#what什么是ssltls跟http和https有什么关系" target="_blank" rel="external">WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#why以前的http不是也能用吗为什么要用ssltlsapple是不是又在反人类" target="_blank" rel="external">WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？Apple是不是又在反人类？）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#how如何适配---弱弱地问下加班要多久" target="_blank" rel="external">HOW（如何适配？—弱弱地问下：加班要多久？）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#1https-only-只有https所有情况下都使用ats" target="_blank" rel="external">第1种情况：HTTPS Only （只有HTTPS，所有情况下都使用ATS）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#2mix--match混合" target="_blank" rel="external">第2种情况：Mix &amp; Match（混合）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#3-opt-out禁用ats" target="_blank" rel="external">第3种情况：Opt Out（禁用ATS）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#4-opt-out-with-exceptions除特殊情况外都不使用ats" target="_blank" rel="external">第4种情况：Opt Out With Exceptions（除特殊情况外，都不使用ATS）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#certificate-transparency" target="_blank" rel="external">Certificate Transparency</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#q-a" target="_blank" rel="external">Q-A</a> </li>
</ol>
</li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#2demo2_ios9新特性_更灵活的后台定位" target="_blank" rel="external">iOS9新特性_更灵活的后台定位（见Demo2）</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#3企业级分发" target="_blank" rel="external">企业级分发</a> <ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#1-ios9以后企业级分发ipa包将遭到与mac上dmg安装包一样的待遇默认不能安装也不再出现信任按钮" target="_blank" rel="external">iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#2-ios9以后企业分发时可能存在下载的ipa包与网页两者的-bundle-id-无法匹配而导致下载失败的情况" target="_blank" rel="external">iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</a> </li>
</ol>
</li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#4bitcode" target="_blank" rel="external">Bitcode</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#5demo3---ios9-url-scheme-适配_引入白名单概念" target="_blank" rel="external">iOS9 URL Scheme 适配_引入白名单概念（见Demo3）</a> <ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#常见-url-scheme" target="_blank" rel="external">常见 URL Scheme</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#q-a-1" target="_blank" rel="external">Q-A</a> </li>
</ol>
</li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#6-ipad适配slide-over-和-split-view" target="_blank" rel="external"> iPad适配Slide Over 和 Split View</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#7字体间隙变大导致-ui-显示异常" target="_blank" rel="external">字体间隙变大导致 UI 显示异常</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#8升级-xcode7-后的崩溃与警告" target="_blank" rel="external">升级 Xcode7 后的崩溃与警告</a> <ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#ios9-下使用-masonry-会引起崩溃的一种情况" target="_blank" rel="external">iOS9 下使用 Masonry 会引起崩溃的一种情况</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#xcode-升级后旧的状态栏的样式设置方式会引起警告" target="_blank" rel="external">Xcode 升级后，旧的状态栏的样式设置方式会引起警告</a> <ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#demo4---navigationcontroller状态栏样式新的设置方法" target="_blank" rel="external">Demo4—navigationController状态栏样式新的设置方法</a> </li>
</ol>
</li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#xcode7-在-debug-状态下也生成-dsym-文件引起的警告" target="_blank" rel="external">Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#xcode7-无法使用-8x-系统的设备调试一运行就报错-there-is-an-intenal-api-error" target="_blank" rel="external">Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 there is an intenal API error</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#使用了-html-的-iframe-元素可能导致无法从-safari-跳转至-app" target="_blank" rel="external">使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#ios9锁屏控制台会打印警告" target="_blank" rel="external">iOS9锁屏控制台会打印警告</a></li>
<li><a href="http://stackoverflow.com/questions/32622899/itms-90535-unable-to-publish-ios-app-with-latest-google-signin-sdk" target="_blank" rel="external">Xcode7 上传应用时提示 ITMS-90535 Unable to publish iOS app with xxx SDK 的问题</a></li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#在didfinishlaunchingwithoptions结束后还没有设置window的rootview
controller会导致崩溃" target="_blank" rel="external">在didFinishLaunchingWithOptions结束后还没有设置window的rootViewController会导致崩溃</a> </li>
</ol>
</li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#9demo5demo6----搜索-api" target="_blank" rel="external">Demo5、Demo6— 搜索 API</a>  </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#10ios国际化问题当前设备语言字符串返回有变化" target="_blank" rel="external">iOS国际化问题：当前设备语言字符串返回有变化</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#11uitableview显示异常" target="_blank" rel="external">UITableView显示异常</a> <ol>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#代码创建的-tableview-无法隐藏-cell-分割线" target="_blank" rel="external">代码创建的 tableView 无法隐藏 cell 分割线</a> </li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#reloaddata-刷新失效" target="_blank" rel="external">reloadData 刷新失效</a></li>
</ol>
</li>
</ol>
<a id="more"></a>
<h1 id="English⬇️⬇️"><a href="#English⬇️⬇️" class="headerlink" title="English⬇️⬇️"></a>English⬇️⬇️</h1><p>For more infomation ，welcome to follow <a href="https://twitter.com/stevechen1010" target="_blank" rel="external">my twitter</a></p>
<h2 id="1-Demo1-You’d-better-Convert-HTTP-to-HTTPS"><a href="#1-Demo1-You’d-better-Convert-HTTP-to-HTTPS" class="headerlink" title="1. Demo1_You’d better Convert HTTP to HTTPS"></a>1. Demo1_You’d better Convert HTTP to HTTPS</h2><p>As the  <a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13" target="_blank" rel="external">Apple</a> say :</p>
<p>  <img src="https://i.imgur.com/eTgSHZY.png" alt="enter image description here"></p>
<p><img src="https://i.imgur.com/Tc0fS6p.jpg" alt="enter image description here"></p>
<p><img src="https://i.imgur.com/v2Tskwh.jpg" alt="enter image description here"></p>
<p>iOS 9 and OSX 10.11 require TLSv1.2 SSL for all hosts you plan to request data from unless you specify exception domains in your app’s Info.plist file.</p>
<p>The syntax for the Info.plist configuration looks like this:</p>
<pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;
&lt;dict&gt;
  &lt;key&gt;NSExceptionDomains&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;yourserver.com&lt;/key&gt;
    &lt;dict&gt;
      &lt;!--Include to allow subdomains--&gt;
      &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;
      &lt;true/&gt;
      &lt;!--Include to allow insecure HTTP requests--&gt;
      &lt;key&gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&lt;/key&gt;
      &lt;true/&gt;
      &lt;!--Include to specify minimum TLS version--&gt;
      &lt;key&gt;NSTemporaryExceptionMinimumTLSVersion&lt;/key&gt;
      &lt;string&gt;TLSv1.1&lt;/string&gt;
    &lt;/dict&gt;
  &lt;/dict&gt;
&lt;/dict&gt;
</code></pre><p>If your application (a third-party web browser, for instance) needs to connect to arbitrary hosts, you can configure it like this:</p>
<pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;
&lt;dict&gt;
    &lt;!--Connect to anything (this is probably BAD)--&gt;
    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
</code></pre><p>If you’re having to do this, it’s probably best to update your servers to use TLSv1.2 and SSL, if they’re not already doing so. This should be considered a temporary workaround.</p>
<p>As of today, the prerelease documentation makes no mention of any of these configuration options in any specific way. Once it does, I’ll update the answer to link to the relevant documentation.</p>
<p>If your server is support  TLSv1.2 ,but you also have to do what I say just now if you want to connect success in iOS9:</p>
<p>After some discussion with Apple Support, the issue is due to the self signed certificate.</p>
<p>ATS trusts only certificate signed by a well known CA, all others are rejected. As a consequence the only solution with a Self signed certificate is to set an exception with NSExceptionDomains.</p>
<p>##2.Demo2_iOS9 new feature  in CoreLocation :  background only when you need<br>If you’re using CoreLocation framework in your app in Xcode7(pre-released),and you may notice that there is a newly added property called allowsBackgroundLocationUpdates in CLLocationManager class.</p>
<p>This new property is explained in the WWDC session <a href="https://developer.apple.com/videos/wwdc/2015/?id=714" target="_blank" rel="external">“What’s New in Core Location”</a>.<br> <img src="https://i.imgur.com/pvVh1fx.png" alt="enter image description here"></p>
<p>The default value is <code>NO</code> if you link against iOS 9.</p>
<p>If your app uses location in the background (without showing the blue status bar) you have to set <code>allowsBackgroundLocationUpdates</code> to <code>YES</code> in addition to setting the background mode capability in Info.plist. Otherwise location updates are only delivered in foreground. The advantage is that you can now have location managers with background location updates and other location managers with only foreground location updates in the same app. You can also reset the value to <code>NO</code> to change the behavior.</p>
<p>The documentation is pretty clear about it:</p>
<blockquote>
<p>By default, this is NO for applications linked against iOS 9.0 or<br>later, regardless of minimum deployment target.</p>
<p>With UIBackgroundModes set to include “location” in Info.plist, you<br>must also set this property to YES at runtime whenever calling<br>-startUpdatingLocation with the intent to continue in the background.</p>
<p>Setting this property to YES when UIBackgroundModes does not include<br>“location” is a fatal error.</p>
<p>Resetting this property to NO is equivalent to omitting “location”<br>from the UIBackgroundModes value.  Access to location is still<br>permitted whenever the application is running (ie not suspended), and<br>has sufficient authorization (ie it has WhenInUse authorization and is<br>in use, or it has Always authorization).  However, the app will still<br>be subject to the usual task suspension rules.</p>
<p>See -requestWhenInUseAuthorization and -requestAlwaysAuthorization for<br>more details on possible authorization values.</p>
</blockquote>
<p>Set  Info.plist like：<br> <img src="https://i.imgur.com/MAoKbUe.png" alt="enter image description here"></p>
<p>The syntax for the Info.plist configuration looks like this:</p>
<pre><code>&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;
&lt;string&gt;微博@iOS程序犭袁 请求后台定位权限&lt;/string&gt;

&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;location&lt;/string&gt;
&lt;/array&gt;
</code></pre><p>Use like:</p>
<pre><code>_locationManager = [[CLLocationManager alloc] init];
_locationManager.delegate = self;
[_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8) {
    [_locationManager requestAlwaysAuthorization];
}
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 9) {
    _locationManager.allowsBackgroundLocationUpdates = YES;
}
[_locationManager startUpdatingLocation];
</code></pre><p>##3.iOS9 Untrusted Enterprise Developer with no option to trust</p>
<p>Since iOS9 there is no option to trust an enterprise build.<br>Before iOS9，it’s very easy to use:if you touch the app,it’ll apear this :</p>
<p> <img src="http://i.stack.imgur.com/WwF76.png" alt="enter image description here"></p>
<p>Now:</p>
<p> <img src="http://i58.tinypic.com/2zecm83.jpg" alt="enter image description here"></p>
<p>You have to let the user  do like:<br>Go to Settings - General - Profiles - tap on your Profile - tap on Trust button.</p>
<p>  <img src="https://i.imgur.com/AdGNYHe.gif" alt="enter image description here"></p>
<p>##4.bitcode optional<br>After Xcode 7,bitcode option will be enabled by default,If your library was compiled without bitcode but the bitcode option is enabled in your project settings.You can</p>
<blockquote>
<ol>
<li>Update your library with bit code, or you’ll get warnings like:</li>
</ol>
<p>(null): URGENT: all bitcode will be dropped because<br>‘/Users/myname/Library/Mobile<br>Documents/com~apple~CloudDocs/foldername/appname/GoogleMobileAds.framework/GoogleMobileAds(GADSlot+AdEvents.o)’<br>was built without bitcode. You must rebuild it with bitcode enabled<br>(Xcode setting ENABLE_BITCODE), obtain an updated library from the<br>vendor, or disable bitcode for this target. Note: This will be an<br>error in the future.</p>
<ol>
<li>Say NO to Enable Bitcode in your target Build Settings </li>
</ol>
<p> <img src="https://i.imgur.com/OoOogUe.gif" alt="enter image description here"></p>
</blockquote>
<p>and the Library Build Settings to remove the warnings</p>
<p>For more information,go to<br><a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2" target="_blank" rel="external">documentation of bitcode in developer library</a></p>
<p>,and WWDC 2015 Session 102: <a href="https://developer.apple.com/videos/wwdc/2015/?id=102" target="_blank" rel="external">“Platforms State of the Union”</a></p>
<p> <img src="http://mobileforward.net/wp-content/uploads/2015/06/Screen-Shot-2015-06-12-at-6.57.54-PM-697x351.png" alt="enter image description here"></p>
<p>##5.Privacy and Your App【URL scheme changes】<br>iOS 9 has made a small change to the handling of URL scheme. You must whitelist the url’s that your app will call out to using the <code>LSApplicationQueriesSchemes</code> key in your <code>Info.plist</code>. </p>
<p>Please see post here: <a href="http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes" target="_blank" rel="external">http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes</a></p>
<p>The main conclusion is that:</p>
<blockquote>
<p>If you call the “canOpenURL” method on a URL that is not in your whitelist, it will return “NO”, even if there is an app installed that has registered to handle this scheme. A “This app is not allowed to query for scheme xxx” syslog entry will appear.</p>
<p>If you call the “openURL” method on a URL that is not in your whitelist, it will fail silently. A “This app is not allowed to query for scheme xxx” syslog entry will appear.</p>
</blockquote>
<p>The author also speculates that this is a bug with the OS and Apple will fix this in a subsequent release.</p>
<p>This is a new security feature of iOS 9. Watch <a href="https://developer.apple.com/videos/wwdc/2015/?id=703" target="_blank" rel="external">WWDC 2015 Session 703</a> for more information. </p>
<p> <img src="https://i.imgur.com/2HxWQqq.png" alt="enter image description here"></p>
<p>Any app built with SDK 9 needs to provide a <code>LSApplicationQueriesSchemes</code> entry in its plist file, declaring which schemes it attempts to query.</p>
<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
 &lt;string&gt;urlscheme&lt;/string&gt;
 &lt;string&gt;urlscheme2&lt;/string&gt;
 &lt;string&gt;urlscheme3&lt;/string&gt;
 &lt;string&gt;urlscheme4&lt;/string&gt;
&lt;/array&gt; 
</code></pre><p>Assuming two apps TestA and TestB. TestB wants to query if TestA is installed. “TestA” defines the following URL scheme in its info.plist file:</p>
<pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;testA&lt;/string&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre><p>The second app “TestB” tries to find out if “TestA” is installed by calling:</p>
<pre><code>[[UIApplication sharedApplication]
                    canOpenURL:[NSURL URLWithString:@&quot;TestA://&quot;]];
</code></pre><p>But this will normally return NO in iOS9 because “TestA” needs to be added to the LSApplicationQueriesSchemes entry in TestB’s info.plist file. This is done by adding the following code to TestB’s info.plist file:</p>
<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;TestA&lt;/string&gt;
&lt;/array&gt;
</code></pre><p>A working implementation can be found here:<br><a href="https://github.com/gatzsche/LSApplicationQueriesSchemes-Working-Example" target="_blank" rel="external">https://github.com/gatzsche/LSApplicationQueriesSchemes-Working-Example</a></p>
<p>##6. Support Slide Over and Split View of iOS 9</p>
<p><img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/ew-.gif" alt="enter image description here"><br>How to transition an an older project to support Slide Over and Split View of iOS 9？<br>You may find that all the demo projects was written by storyboard or xib,<br>but the older project’s UI is written by code！</p>
<p>I would suggest switching to storyboards to make your life easy.</p>
<p>I would highly recommend you watch the following WWDC videos and then think about what exactly you need to do in order to support multi tasking.</p>
<ol>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=218" target="_blank" rel="external">Mysteries of Auto Layout, Part 1</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=215" target="_blank" rel="external">What’s New in Storyboards</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=407" target="_blank" rel="external">Implementing UI Designs in Interface Builder</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=205" target="_blank" rel="external">Getting Started with Multitasking on iPad in iOS 9</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=212" target="_blank" rel="external">Optimizing Your App for Multitasking on iPad in iOS</a></p>
</li>
</ol>
<p>##License</p>
<p>Posted by <a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a> </p>
<p> <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="external">Creative Commons BY-NC-ND 3.0</a></p>
<blockquote>
<p>中文</p>
</blockquote>
<h2 id="1-Demo1-iOS9网络适配-ATS：改用更安全的HTTPS"><a href="#1-Demo1-iOS9网络适配-ATS：改用更安全的HTTPS" class="headerlink" title="1. Demo1_iOS9网络适配_ATS：改用更安全的HTTPS"></a>1. Demo1_iOS9网络适配_ATS：改用更安全的HTTPS</h2><p>[摘要]为了强制增强数据访问安全， iOS9 默认会把 <del>所有的http请求</del> 所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求，都改为 HTTPS 请求：iOS9.x-SDK编译时，默认会让所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求统一采用TLS 1.2 协议。因为 AFNetworking 现在的版本底层使用了 <code>NSURLConnection</code> ，众多App将被影响（基于iOS8.x-SDK的App不受影响）。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。而这一做法，官方文档称为ATS，全称为App Transport Security，是iOS9的一个新特性。</p>
<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>
<ol>
<li>Transport Layer Security协议版本要求TLS1.2以上</li>
<li>服务的Ciphers配置要求支持Forward Secrecy等</li>
<li>证书签名算法符合ATS要求等</li>
</ol>
<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240" target="_blank" rel="external"> <strong><em>App Transport Security Technote</em></strong> </a> 对ATS 的介绍：</p>
<p><img src="http://i58.tinypic.com/ajsf0j.jpg" alt="enter image description here"></p>
<p>注：有童鞋反映：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>
<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。下文也会详细描述该问题。</p>
<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240" target="_blank" rel="external"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>
<blockquote>
<p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.<br>Invalid certificates result in a hard failure and no connection</p>
</blockquote>
<p>在讨论之前，跟往常一样，先说下iOS程序猿们最关心的问题：</p>
<p>###跟我有毛关系？需要我加班吗？！</p>
<p>首先咱们来看下业内对Apple这一做法的评论：</p>
<p><img src="https://i.imgur.com/Q17QDG0.png" alt="enter image description here"></p>
<p>这是某社交App上讨论，看来业内还是吐槽声和肯定声同在。</p>
<p>结论是：</p>
<blockquote>
<p>跟你很有关系，加班吧，少年！</p>
</blockquote>
<p>书归正传【严肃脸】，我们正式讨论下 WHAT，WHY，HOW：</p>
<ol>
<li>WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</li>
<li>WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？！Apple是不是又在反人类？）</li>
<li>HOW（如何适配？—弱弱地问下：加班要多久？）</li>
</ol>
<p>###WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</p>
<p>什么是SSL/TLS？<br>SSL你一定知道，在此不做赘述。主要说下什么是TLS，还有跟HTTP和HTTPS有什么关系。</p>
<p>TLS 是 SSL 新的别称：</p>
<p>“TLS1.0”之于“SSL3.1”，犹“公元2015”之于“民国104”，“一千克”之于“一公斤”：称呼不同，意思相同。</p>
<p>SSL 3.0版本之后的迭代版本被重新命名为TLS 1.0：<strong>TLS 1.0＝SSL 3.1</strong>。所以我们平常也经常见到 “SSL/TLS” 这种说法。</p>
<p>目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。目前主流浏览器都已经实现了TLS 1.2的支持。</p>
<p>常用的有下面这些：</p>
<ul>
<li>SSL 2.0</li>
<li>SSL 3.0</li>
<li>TLS 1.0 (SSL 3.1)</li>
<li>TLS 1.1 (SSL 3.1)</li>
<li>TLS 1.2 (SSL 3.1)</li>
</ul>
<p>那为什么标题是“使用HTTPS”而没有提及SSL和TLS什么事？<br>“SSL/TLS”跟HTTP和HTTPS有什么关系？</p>
<p>要理解这个，要看下他们之间的关系：</p>
<blockquote>
<p>HTTP+SSL/TLS+TCP = HTTPS</p>
</blockquote>
<p><img src="http://www.zytrax.com/tech/survival/ssl-layers.gif" alt="HTTP+SSL/TLS+TCP"></p>
<p>或者</p>
<blockquote>
<p>HTTPS = “HTTP over SSL”</p>
</blockquote>
<p>也就是说：</p>
<blockquote>
<p>Apple让你的HTTP采用SSL/TLS协议，就是让你从HTTP转到HTTPS。而这一做法，官方文档称为ATS，全称为App Transport Security。</p>
</blockquote>
<p>###WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？Apple是不是又在反人类？）</p>
<blockquote>
<p>不使用SSL/TLS的HTTP通信，就是不加密的通信！</p>
</blockquote>
<p> 不使用SSL/TLS的HTTP通信，所有信息明文传播，带来了三大风险：</p>
<ol>
<li>窃听风险（eavesdropping）：第三方可以获知通信内容。</li>
<li>篡改风险（tampering）：第三方可以修改通信内容。</li>
<li>冒充风险（pretending）：第三方可以冒充他人身份参与通信。</li>
</ol>
<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：</p>
<ol>
<li>所有信息都是加密传播，第三方无法窃听。</li>
<li>具有校验机制，一旦被篡改，通信双方会立刻发现。</li>
<li>配备身份证书，防止身份被冒充。</li>
</ol>
<p>SSL/TLS的作用，打个比方来讲：</p>
<p>如果原来的 HTTP 是塑料水管，容易被戳破；那么如今新设计的 HTTPS 就像是在原有的塑料水管之外，再包一层金属水管（SSL/TLS协议）。一来，原有的塑料水管照样运行；二来，用金属加固了之后，不容易被戳破。</p>
<h3 id="HOW（如何适配？—弱弱地问下：加班要多久？）"><a href="#HOW（如何适配？—弱弱地问下：加班要多久？）" class="headerlink" title="HOW（如何适配？—弱弱地问下：加班要多久？）"></a>HOW（如何适配？—弱弱地问下：加班要多久？）</h3><p>正如文章开头所说：</p>
<blockquote>
<p>TLS 1.2 协议 强制增强数据访问安全 系统 Foundation 框架下的“相关网络请求”将不再默认使用 HTTP 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。</p>
</blockquote>
<p>总之：</p>
<blockquote>
<p>要么咱们iOS程序猿加班，要么后台加班：</p>
</blockquote>
<p>方案一：立即让公司的服务端升级使用TLS 1.2，以解析相关数据。</p>
<p>方案二：虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http，具体做法见gif图，示例Demo见 <a href="https://github.com/ChenYilong/iOS9AdaptationTips" target="_blank" rel="external">Demo1</a></p>
<p><img src="https://github.com/ChenYilong/iOS9AdaptationTips/blob/master/Demo1_iOS9网络适配_改用更安全的HTTPS/微博%40iOS程序犭袁/http问题.gif" alt="enter image description here"></p>
<p>这也是官方文档和WWDC给出的解决方案：</p>
<ol>
<li><a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13" target="_blank" rel="external">Apple官方文档</a>  <img src="https://i.imgur.com/eTgSHZY.png" alt="enter image description here"></li>
</ol>
<ol>
<li><a href="https://developer.apple.com/videos/wwdc/2015/?id=703" target="_blank" rel="external">WWDC Session： “Networking with NSURLSession” session（ 【WWDC 2015 session 703, “Privacy and Your App” O网页链接 】, 时间在30:18左右）</a></li>
</ol>
<p> <img src="https://i.imgur.com/Tc0fS6p.jpg" alt="enter image description here"></p>
<p> <img src="https://i.imgur.com/v2Tskwh.jpg" alt="enter image description here"></p>
<p>  <img src="https://cdn-images-1.medium.com/max/800/1*9-VeRXU5SAI6lLZeWLI0hQ.png" alt="enter image description here"></p>
<p>即使你的应用使用的是：你没有权限控制的CDN (Content Delivery Network)，而且它不支持HTTPS！</p>
<p>也别担心，Apple都替你考虑好了：</p>
<p> <img src="http://i61.tinypic.com/ae9tgj.jpg" alt="enter image description here"><br> 正如你在上图中看到的：苹果官方提供了一些可选配置项来决定是否开启ATS模式，也就是可以选择开启或者不开启。</p>
<p> 开发者可以针对某些确定的URL不使用ATS，这需要在工程中的info.plist中标记NSExceptionDomains。在NSExceptionDomains字典中，可以显式的指定一些不使用ATS的URL。这些你可以使用的例子可以是:</p>
<ul>
<li><p>NSIncludesSubdomains</p>
</li>
<li><p>NSExceptionAllowInsecureHTTPLoads</p>
</li>
<li><p>NSExceptionRequiresForwardSecrecy</p>
</li>
<li><p>NSExceptionMinimumTLSVersion</p>
</li>
<li><p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
</li>
<li><p>NSThirdPartyExceptionMinimumTLSVersion</p>
</li>
<li><p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
</li>
</ul>
<p>这些关键字使我们可以更加细致的设置针对不使用ATS的域名情况下禁用ATS或者一些特殊的ATS选项。</p>
<p>你可能注意到一些关键字像是使用了一些其他关键字中的词但是在前面加上了”ThirdParty”字样，比如列表里最后三个：</p>
<ul>
<li><p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
</li>
<li><p>NSThirdPartyExceptionMinimumTLSVersion</p>
</li>
<li><p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
</li>
</ul>
<p>在功能上，这些关键字与不含有”ThirdParty”的关键字有同样的效果。而且实际运行中所调用的代码将会完全忽略是否使用”ThirdParty”关键字。你应该使用适用于你的场景的关键字而不必过多考虑这些。</p>
<p>关于App Transport Security，每个应用都属于4个大类当中的一类。我们来看看每一个大类都是怎样影响应用的。</p>
<table>
<thead>
<tr>
<th></th>
<th>–</th>
<th>分类名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.</td>
<td>HTTPS Only （只有HTTPS，所有情况下都使用ATS）</td>
<td>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。但是，注意App Transport Security要求TLS 1.2而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。</td>
</tr>
<tr>
<td>2.</td>
<td>Mix &amp; Match（混合）</td>
<td>你的应用与一个不符合ATS要求的服务器工作是很有可能的。在这种情况下，你需要告诉操作系统哪些站点是涉及到的然后在你的应用的 Info.plist文件中指明哪些要求没有达到。</td>
</tr>
<tr>
<td>3.</td>
<td>Opt Out（禁用ATS）</td>
<td>如果你在创建一个网页浏览器，那么你有一个更大的麻烦。因为你不可能知道你的用户将要访问那个网页，你不可能指明这些网页是否支持ATS要求且在HTTPS上传输。在这种情况下，除了全部撤销 App Transport Security 没有其它办法。</td>
</tr>
<tr>
<td>4.</td>
<td>Opt Out With Exceptions（除特殊情况外，都不使用ATS）</td>
<td>当你的应用撤消了App Transport Security,，但同时定义了一些例外。这非常有用就是当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个例外来表明哪些是必须要求 App Transport Security的。</td>
</tr>
</tbody>
</table>
<p>下面分别做一下介绍：</p>
<p>####1.HTTPS Only （只有HTTPS，所有情况下都使用ATS）<br>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。</p>
<p>唯一需要做的事情就是使用  <code>NSURLSession</code> 。如果你的开发目标是iOS 9或者 OS X EI Capitan之后，ATS 的最佳实践将会应用到所有基于 <code>NSURLSession</code> 的网络。</p>
<p>但也有人遇到过这样的疑惑：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>
<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>
<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240" target="_blank" rel="external"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>
<blockquote>
<p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.<br>Invalid certificates result in a hard failure and no connection</p>
</blockquote>
<p>####2.Mix &amp; Match（混合）<br>你的应用与一个不符合ATS要求的服务器工作是很有可能的，</p>
<p>当你遇到以下三个不符合 ATS 要求的服务器的域名时：</p>
<ol>
<li>api.insecuredomain.com</li>
<li>cdn.domain.com</li>
<li>thatotherdomain.com</li>
</ol>
<p>你可以分别设置如下：        </p>
<ol>
<li><p>api.insecuredomain.com</p>
<p>Info.plist 配置中的XML源码如下所示:</p>
</li>
</ol>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionDomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>api.insecuredomain.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 在 plist 文件里显示如下：</p>
<p> <img src="http://i60.tinypic.com/24y5q4l.jpg" alt="enter image description here"></p>
<p> 我们定义的第一个“例外”（Exception）告诉ATS当与这个子域交互的时候撤销了必须使用HTTPS的要求。注意这个仅仅针对在“例外”（Exception）中声明了的子域。非常重要的一点是要理解NSExceptionAllowsInsecureHTTPLoads关键字并不仅仅只是与使用HTTPS相关。这个“例外”（Exception）指明了对于那个域名，所有的App Transport Security的要求都被撤销了。</p>
<ol>
<li>cdn.domain.com<br>Info.plist 配置中的XML源码如下所示:</li>
</ol>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionDomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>cdn.somedomain.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">string</span>&gt;</span>TLSv1.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 在 plist 文件里显示如下：</p>
<p>  <img src="http://i58.tinypic.com/29atm5k.jpg" alt="enter image description here"></p>
<p> 很可能你的应用是与一个支持HTTPS传输数据的服务器交互，但是并没有使用TLS 1.2或更高。在这种情况下，你定义一个“例外”（Exception），它指明应该使用的最小的TLS的版本。这比完全撤销那个域名的App Transport Security要更好更安全。</p>
<ol>
<li><p>thatotherdomain.com</p>
<p>Info.plist 配置中的XML源码如下所示:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionDomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">key</span>&gt;</span>thatotherdomain.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">             <span class="comment">&lt;!--适用于这个特定域名下的所有子域--&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSIncludesSubdomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">             <span class="comment">&lt;!--扩展可接受的密码列表：这个域名可以使用不支持 forward secrecy 协议的密码--&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionRequiresForwardSecrecy<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">             <span class="comment">&lt;!--允许App进行不安全的HTTP请求--&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">             <span class="comment">&lt;!--在这里声明所支持的 TLS 最低版本--&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionMinimumTLSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">string</span>&gt;</span>TLSv1.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 plist 文件里显示如下：</p>
</li>
</ol>
<p> <img src="http://i61.tinypic.com/w6xn43.jpg" alt="enter image description here"></p>
<p> <code>NSIncludesSubdomains</code> 关键字告诉 App Transport Security 这个“例外”（Exception）适用于这个特定域名的所有子域。这个“例外”（Exception）还进一步通过扩展可接受的密码列表来定义这个域名可以使用不支持forward secrecy( <code>NSExceptionRequiresForwardSecrecy</code> )  协议的密码。想了解更多关于forward secrecy的信息，推荐去看官方文档  <a href="https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html" target="_blank" rel="external"> <strong><em>Apple’s technote</em></strong> </a> 。</p>
<p>如果你的App中同时用到了这三个域名，那么应该是这样：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionDomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>api.insecuredomain.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>cdn.somedomain.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>TLSv1.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>thatotherdomain.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSIncludesSubdomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionRequiresForwardSecrecy<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://i61.tinypic.com/13ynggk.jpg" alt="enter image description here"></p>
<h4 id="3-Opt-Out（禁用ATS）"><a href="#3-Opt-Out（禁用ATS）" class="headerlink" title="3. Opt Out（禁用ATS）"></a>3. Opt Out（禁用ATS）</h4><p>上面是比较严谨的做法，指定了能访问哪些特定的HTTP。当然也有暴力的做法：<br>彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求，比如你在开发一款浏览器App，或者你想偷懒，或者后台想偷懒，或者公司不给你升级服务器。。。</p>
<p>你可以在Info.plist 配置中改用下面的XML源码：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求 (不建议这样做)--&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 plist 文件里显示如下：</p>
<p><img src="http://i57.tinypic.com/9uq2c7.jpg" alt="enter image description here"></p>
<h4 id="4-Opt-Out-With-Exceptions（除特殊情况外，都不使用ATS）"><a href="#4-Opt-Out-With-Exceptions（除特殊情况外，都不使用ATS）" class="headerlink" title="4. Opt Out With Exceptions（除特殊情况外，都不使用ATS）"></a>4. Opt Out With Exceptions（除特殊情况外，都不使用ATS）</h4><p>上面已经介绍了三种情景，还有一种可能你也会遇到：</p>
<p>当你的应用撤消了App Transport Security,，但同时定义了一些“例外”（Exception）。当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个“例外”（Exception）来表明哪些是必须要求 App Transport Security的。下面是Info.plist文件应该会有的内容：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionDomains<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>api.tutsplus.com<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 在 plist 文件里显示如下：</p>
<p><img src="http://i62.tinypic.com/de1rw9.jpg" alt="enter image description here"></p>
 <p><del>【注：以上在Info.plist配置中的做法已经验证可行，但目前Apple的prerelease版本的官方文档并未提及Info.plist中配置的代码，我将密切关注官方文档，如有提及，再来更新<a href="https://github.com/ChenYilong/iOS9AdaptationTips" target="_blank" rel="external">本文</a> .你若发现官方文档有提及了，也可在<a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a>通知下我。】（官方文档已经有阐述）</del></p>

<p>####Certificate Transparency</p>
<p>虽然ATS大多数安全特性都是默认可用的，Certificate Transparency 是必须设置的。如果你有支持Certificate Transparency的证书，你可以检查NSRequiresCertificateTransparency关键字来使用Certificate Transparency。再次强调，如果你的证书不支持Certificate Transparency，此项需要设置为不可用。</p>
<p>如果需要调试一些由于采用了ATS而产生的问题，需要设置CFNETWORK_DIAGNOSTICS为1，这样就会打印出包含被访问的URL和ATS错误在内的NSURLSession错误信息。要确保处理了遇到的所有的错误消息，这样才能使ATS易于提高可靠性和扩展性。</p>
<p>####Q-A</p>
<p>Q：我用xcode7编译的app，如果不在plist里面加关键字说明，ios9下不能进行网络请求，因为我们服务器并不支持 TLS 1.2 ，我要是直接下载app store上的，什么也没有做，也是能正常网络请求。</p>
<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包可以请求到网络，Xcode7给iOS9设备打的包请求不到网络，Xcode7和iOS9缺一不可，才需要网络适配ATS。</strong></p>
<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>
<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here"></p>
<p>Q：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>
<p>A：那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>
<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240" target="_blank" rel="external"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>
<blockquote>
<p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.<br>Invalid certificates result in a hard failure and no connection</p>
</blockquote>
<p>Q：我使用的是第三方的网络框架，比如 AFNetworking 、ASIHTTPRequest、CFSocket 等，这个有影响没有？</p>
<p>A： AFNetworking 有影响，其它没影响。</p>
<p> ATS 是只针对 <code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code> ，如果底层涉及到这三个类就会有影响。</p>
<p>现在的 AFNetworking 的 AFHTTPRequestOperationManager 实现是使用的 <code>NSURLConnection</code> 。</p>
<p>但 AFNetworking 也有更新计划，移除 <code>NSURLConnection</code> 相关API，迁移到 AFHTTPSessionManager ，但还未执行，详情见：<a href="https://github.com/AFNetworking/AFNetworking/issues/2806" target="_blank" rel="external">https://github.com/AFNetworking/AFNetworking/issues/2806</a>。</p>
<p>Q：试了一下禁用 ATS 的方法 但是还是无法联网 仍然提示要使用https?</p>
<blockquote>
<p>App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&#039;s Info.plist file.<br></p>The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.<p></p>
</blockquote>
<p>A：遇到这类问题，90%是出现在“一个 Project 多 Target ”的情况下，所以<br>请确保你修改的，确实是你的 Target 所属的 Info.plist ！</p>
<p>如何确认？请前往这里，确认你 Target 所属的 Info.plist 究竟是哪个：</p>
<p>Project -&gt; Your Target -&gt; Build Settings -&gt; Info.plist File</p>
<p><img src="http://i60.tinypic.com/sbrfrl.jpg" alt="enter image description here"></p>
<p>或者更直截了当一点，直接修改：</p>
<p>Project -&gt; Your Target —&gt;info－&gt; Custom iOS target properties－&gt; 添加禁用 ATS 的属性</p>
<p><img src="http://i60.tinypic.com/zvbt7b.jpg" alt="enter image description here"></p>
<p>还有一种可能性是：禁用 ATS 的代码粘贴进 plist 时，位置不对，可以尝试放在 diwuhang</p>
<p>Q：我的项目是“一个 Project 多 Target ”，按照本文禁用 ATS 的方法，是不是每个 Info.plist 都要修改？</p>
<p>A：不需要，用到哪个 Target 修改哪个的 Info.plist ，Target 是独立的，不受其他 Target 的影响，也不会影响其他 Target。</p>
<p>Q：如何检测我们公司 HTTPS 是否符合 ATS 的要求？</p>
<p>A：<br>如果你的 App 的服务也在升级以适配ATS要求，可以使用如下的方式进行校验：</p>
<p>在OS X EI Capitan系统的终端中通过nscurl命令来诊断检查你的HTTPS服务配置是否满足Apple的ATS要求:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nscurl --verbose --ats-diagnostics https://&lt;your_server_domain&gt;</div></pre></td></tr></table></figure>
<p>当然，你也可以让公司服务端的同事参考Apple提供官方指南App Transport Security Technote进行服务的升级配置以满足ATS的要求：</p>
<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>
<ol>
<li>Transport Layer Security协议版本要求TLS1.2以上</li>
<li>服务的Ciphers配置要求支持Forward Secrecy等</li>
<li>证书签名算法符合ATS要求等</li>
</ol>
<p>##2.Demo2<em>iOS9新特性</em>更灵活的后台定位</p>
<p>【iOS9在定位的问题上，有一个坏消息一个好消息】坏消息：如果不适配iOS9，就不能偷偷在后台定位（不带蓝条，见图）！好消息：将允许出现这种场景：同一App中的多个location manager：一些只能在前台定位，另一些可在后台定位，并可随时开启或者关闭特定location manager的后台定位。</p>
<p>如果没有请求后台定位的权限，也是可以在后台定位的，不过会带蓝条：<br> <img src="https://i.imgur.com/UoqGHlG.png" alt="enter image description here"></p>
<p>如何偷偷在后台定位：请求后台定位权限：</p>
<pre><code> // 1. 实例化定位管理器
_locationManager = [[CLLocationManager alloc] init];
// 2. 设置代理
_locationManager.delegate = self;
// 3. 定位精度
[_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
// 4.请求用户权限：分为：⓵只在前台开启定位⓶在后台也可定位，
//注意：建议只请求⓵和⓶中的一个，如果两个权限都需要，只请求⓶即可，
//⓵⓶这样的顺序，将导致bug：第一次启动程序后，系统将只请求⓵的权限，⓶的权限系统不会请求，只会在下一次启动应用时请求⓶
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8) {
    //[_locationManager requestWhenInUseAuthorization];//⓵只在前台开启定位
    [_locationManager requestAlwaysAuthorization];//⓶在后台也可定位
}
// 5.iOS9新特性：将允许出现这种场景：同一app中多个location manager：一些只能在前台定位，另一些可在后台定位（并可随时禁止其后台定位）。
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 9) {
    _locationManager.allowsBackgroundLocationUpdates = YES;
}
// 6. 更新用户位置
[_locationManager startUpdatingLocation];
</code></pre><p>但是如果照着这种方式尝试，而没有配置Info.plist，100%你的程序会崩溃掉，并报错：</p>
<blockquote>
<p><em>*</em> Assertion failure in -[CLLocationManager setAllowsBackgroundLocationUpdates:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework_Sim/CoreLocation-1808.1.5/Framework/CoreLocation/CLLocationManager.m:593</p>
</blockquote>
<p>这个问题，有两种方式可以解决：</p>
<p>第一种：</p>
<p>要将  Info.plist 配置如下：<br> <img src="https://i.imgur.com/MAoKbUe.png" alt="enter image description here"></p>
<p>对应的 Info.plist 的XML源码是：</p>
<pre><code>&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;
&lt;string&gt;微博@iOS程序犭袁 请求后台定位权限&lt;/string&gt;

&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;location&lt;/string&gt;
&lt;/array&gt;
</code></pre><p>第二种：</p>
<p>在对应 target 的 Capabilities -&gt; Background Modes -&gt; 开启 Location Updates </p>
<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2014/12/background_modes.png" alt="enter image description here"></p>
<p>##3.企业级分发</p>
<p>有两处变化：</p>
<ol>
<li>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</li>
<li>iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</li>
</ol>
<h3 id="1-iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”"><a href="#1-iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”" class="headerlink" title="1. iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”"></a>1. iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</h3><p>iOS9之前，企业级分发十分方便：点击App出现“信任按钮”，</p>
<p> <img src="https://i.imgur.com/aSmM8bk.png" alt="enter image description here"></p>
<p>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</p>
<p> <img src="http://i58.tinypic.com/2zecm83.jpg" alt="enter image description here"></p>
<p>必须让用户进行gif图中的设置：</p>
<p> <img src="https://i.imgur.com/PXM235L.gif" alt="enter image description here"></p>
<h3 id="2-iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的-bundle-ID-无法匹配而导致下载失败的情况"><a href="#2-iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的-bundle-ID-无法匹配而导致下载失败的情况" class="headerlink" title="2. iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况"></a>2. iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</h3><p>iOS9升级后众多企业分发的 app 已经出现了不能安装的情况，而iOS8或更早的系统不受影响。那是因为从iOS9以后，系统会在 ipa 包下载完之后，拿ipa包中的 bundle ID 与网页中的 plist 文件中的 bundle ID 进行比对，不一致不允许安装。</p>
<p>错误提示如下：</p>
<p><img src="http://i57.tinypic.com/28jckus.jpg" alt="enter image description here"></p>
<p>网页中的 plist 文件中的 bundle ID 的作用可参考 <a href="http://blog.sina.com.cn/s/blog_6afb7d800101fa16.html" target="_blank" rel="external">《iOS:苹果企业证书通过网页分发安装app》</a> 。</p>
<p>正如这篇文章提到的，“网页中的 plist 文件”是习惯的叫法，也有人称作“manifest文件”，比如 <a href="http://gknops.github.io/adHocGenerate/" target="_blank" rel="external">这篇文章</a>。</p>
<p>而iOS9之前，苹果不会检查这一项，因此iOS9之前可以安装。</p>
<p>导致这一错误的原因除了粗心，还有开发者是故意设置不一致，据开发者说：</p>
<blockquote>
<p>当初服务器 plist 的 bundle id 上故意做成成不一致。是为了解决一些人安装不上的问题。</p>
</blockquote>
<p>详情可参考： <a href="http://www.cocoachina.com/bbs/read.php?tid-324230-fpage-2-page-1.html" target="_blank" rel="external">《升级到ios 9，企业版发布现在无法安装成功了，有人遇到了这种问题吗？》</a> </p>
<p>如何知道是因为 bundle id 不一致造成的无法安装？</p>
<p>通过查看设备上的日志信息：有一个 itunesstored 进程提示安装信息：</p>
<pre><code>itunesstored →  &lt;Warning&gt;: [Download]: Download task did finish: 8 for download: 2325728577585828282
itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace] Installing download: 2325728577585828282 with step(s): Install
itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Installing software package with bundleID: com.***.***: bundleVersion: 1.01 path: /var/mobile/Media/Downloads/2325728577585828282/-1925357977307433048
itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Bundle validated for bundleIdentifier: com.****.******success: 0
itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling placeholder for app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*******(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*****(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
</code></pre><p>其中的这一句很重要：</p>
<pre><code>itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
</code></pre><p>经过核对，果然是.ipa文件中真实的Bundle ID和manifest文件中配置的信息不匹配，然后测试发现：</p>
<blockquote>
<p>iOS 9是校验bundle-identifier值的，而iOS 9以下版本是不校验，一旦iOS 9发现bundle-identifier不匹配，即使下载成功了，也会 Uninstall(日志中提示的)app的。</p>
</blockquote>
<p>适配方法：</p>
<ol>
<li><p>两者的 bundle id 修改一致</p>
<p>一旦出现iOS9能够安装企业版本APP，iOS9以下版本不能安装，一定先查看安装日志，然后核对每个参数配置。</p>
<p>manifest文件的参考配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"</span></div><div class="line">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- array of downloads. --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!-- an array of assets to download --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- software-package: the ipa to install. --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- required.  the asset kind. --&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- optional.  md5 every n bytes.  --&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- will restart a chunk if md5 fails. --&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>md5-size<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">integer</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- optional.  array of md5 hashes --&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>md5s<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">string</span>&gt;</span>41fa64bb7a7cae5a46bfb45821ac8bba<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">                       <span class="tag">&lt;<span class="name">string</span>&gt;</span>51fa64bb7a7cae5a46bfb45821ac8bba<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- required.  the URL of the file to download. --&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>http://www.example.com/apps/foo.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- display-image: the icon to display during download. --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- optional. icon needs shine effect applied. --&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>http://www.example.com/image.57×57.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- full-size-image: the large 512×512 icon used by iTunes. --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">                   <span class="comment">&lt;!-- optional.  one md5 hash for the entire file. --&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>md5<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>61fa64bb7a7cae5a46bfb45821ac8bba<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">string</span>&gt;</span>http://www.example.com/image.512×512.jpg<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span><span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- required --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.fooapp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- optional (software only) --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- required.  the download kind. --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- optional. displayed during download; --&gt;</span></div><div class="line">               <span class="comment">&lt;!-- typically company name --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>subtitle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">               <span class="comment">&lt;!-- required.  the title to display during the download. --&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">string</span>&gt;</span>Example Corporate App<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用fir.im等第三方分发平台：上述“ bundle id 不一致导致下载失败”这种情况只会出现在企业自己搭建网页分发的情形下，事实证明第三方的分发平台更加专业，已经很好地规避了该情况的发生。</p>
</li>
</ol>
<p>###Q-A</p>
<p>Q：企业分发，企业版证书在iOS9上安装应用报 <code>Ignore manifest download, already have bundleID: com.mycom.MyApp</code>  只有我的手机无法安装，别人 iOS9 都可以安装</p>
<p>A：这并非 iOS9的问题，iOS8及以前的系统也会出现，和缓存有关系，请尝试关机重启手机，然后就可以安装了。</p>
<p>##4.Bitcode</p>
<p>【前言】未来， Watch 应用必须包含 bitcode ，iOS不强制，Mac OS不支持。<br>但最坑的一点是： Xcode7 及以上版本会默认开启 bitcode 。</p>
<p>什么是 bitcode ？</p>
<p>通俗解释：在线版安卓ART模式。</p>
<p>Apple 官方文档–<a href="https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35" target="_blank" rel="external"> <strong><em>App Distribution Guide – App Thinning (iOS, watchOS)</em></strong> </a>是这样定义的：</p>
<blockquote>
<p>Bitcode is an intermediate representation of a compiled program. Apps you upload to iTunes Connect that contain bitcode will be compiled and linked on the App Store. Including bitcode will allow Apple to re-optimize your app binary in the future without the need to submit a new version of your app to the store.</p>
</blockquote>
<p>翻译过来就是：</p>
<blockquote>
<p> bitcode 是被编译程序的一种中间形式的代码。包含 bitcode 配置的程序将会在 App Store 上被编译和链接。 bitcode 允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到 App Store 上。</p>
</blockquote>
<p>在 Xcode简介— <a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_7_0.html" target="_blank" rel="external"> <strong><em>What’s New in Xcode-New Features in Xcode 7</em></strong> </a>中这样描述：</p>
<blockquote>
<p>Bitcode. When you archive for submission to the App Store, Xcode will compile your app into an intermediate representation. The App Store will then compile the bitcode down into the 64 or 32 bit executables as necessary.</p>
</blockquote>
<p>也就是</p>
<blockquote>
<p>当我们提交程序到 App Store上时， Xcode 会将程序编译为一个中间表现形式( bitcode )。然后 App store 会再将这个 bitcode 编译为可执行的64位或32位程序。</p>
</blockquote>
<p>再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关了。</p>
<p>打个比方，没有 bitcode  的 AppStore 里所提供的 App，类似在新华书店里卖捆绑销售的《四大名著丛书–精装版》，要买只能全买走，有了 bitcode 就好比这套四大名著每本都可以单卖，顾客就能按需购买。我们开发者在这个过程中扮演的角色是图书出版商的角色，应该照顾那些没钱一次买四本的顾客。（不要做不珍惜用户流量和存储空间的奸商。。）</p>
<p>那为什么第三方的 SDK 不支持 bitcode，我的 app 也就不能支持？打个比方，《四大名著丛书》只要有一本是可以单卖的，那么你很难再卖捆绑销售款的《四大名著丛书》了，所以干脆全都可以单卖，这大概就是 Apple 的逻辑。</p>
<p> App Thinning 官方文档解释如下：</p>
<blockquote>
<p>The App Store and operating system optimize the installation of iOS and watchOS apps by tailoring app delivery to the capabilities of the user’s particular device, with minimal footprint. This optimization, called app thinning, lets you create apps that use the most device features, occupy minimum disk space, and accommodate future updates that can be applied by Apple. Faster downloads and more space for other apps and content provides a better user experience.</p>
</blockquote>
<p>开发者都知道，当前 iOS App 的编译打包方式是把适配兼容多个设备的执行文件及资源文件合并一个文件，上传和下载的文件则包含了所有的这些文件，导致占用较多的存储空间。</p>
<p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>
<p>根据Apple官方文档的介绍，App Thinning主要有三个机制：</p>
<ol>
<li><p>Slicing</p>
<p>开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)，当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</p>
</li>
<li><p>On-Demand Resources</p>
<p>ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</p>
</li>
<li><p>Bitcode<br>开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</p>
</li>
</ol>
<p>（喵大(@onevcat)在其博客 <a href="http://onevcat.com/2015/06/ios9-sdk/" target="_blank" rel="external">《开发者所需要知道的 iOS 9 SDK 新特性》</a> 中也描述了iOS 9中苹果在App瘦身中所做的一些改进，大家可以转场到那去研读一下。）</p>
<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。</p>
<p> Bitcode 是一种中间代码，那它是什么格式的呢？ LLVM 官方文档有介绍这种文件的格式：  <a href="http://llvm.org/docs/BitCodeFormat.html#llvm-bitcode-file-format" target="_blank" rel="external"> <strong><em>LLVM Bitcode File Format</em></strong> </a> 。</p>
<p>如果你的应用也准备启用 Bitcode 编译机制，就需要注意以下几点：</p>
<ol>
<li>Xcode 7默认开启 Bitcode ，如果应用开启 Bitcode，那么其集成的其他第三方库也需要是 Bitcode 编译的包才能真正进行 Bitcode 编译</li>
<li>开启 Bitcode 编译后，编译产生的  <code>.app</code>  体积会变大(中间代码，不是用户下载的包)，且  <code>.dSYM</code>  文件不能用来崩溃日志的符号化(用户下载的包是 Apple 服务重新编译产生的，有产生新的符号文件)</li>
<li>通过 Archive 方式上传 AppStore 的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>
</ol>
<p>如何适配？</p>
<p>在上面的错误提示中，提到了如何处理我们遇到的问题：</p>
<blockquote>
<p>You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>
<p>正如开头所说的：</p>
<blockquote>
<p>未来， Watch 应用必须包含 Bitcode ，iOS不强制，Mac OS不支持。<br>但最坑的一点是： Xcode7 及以上版本会默认开启 Bitcode 。</p>
</blockquote>
<p>Xcode 7 + 会开启 Bitcode。</p>
<p>也就是说，也两种方法适配：</p>
<p>方法一：更新 library 使包含 Bitcode ，否则会出现以下中的警告；</p>
<blockquote>
<p>(null): URGENT: all bitcode will be dropped because<br>‘/Users/myname/Library/Mobile<br>Documents/com~apple~CloudDocs/foldername/appname/GoogleMobileAds.framework/GoogleMobileAds(GADSlot+AdEvents.o)’<br>was built without bitcode. You must rebuild it with bitcode enabled<br>(Xcode setting ENABLE_BITCODE), obtain an updated library from the<br>vendor, or disable bitcode for this target. Note: This will be an<br>error in the future.</p>
</blockquote>
<p>甚至有的会报错误，无法通过编译：</p>
<blockquote>
<p>ld: ‘/Users/<strong>/Framework/SDKs/PolymerPay/Library/mobStat/lib</strong>SDK.a(**ForSDK.o)’ does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>
<p>或：</p>
<blockquote>
<p>ld: -undefined and -bitcode_bundle (Xcode setting  <code>ENABLE_BITCODE</code> =YES) cannot be used together<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)</p>
</blockquote>
<p><img src="http://i62.tinypic.com/330vhug.jpg" alt="enter image description here"></p>
<p>无论是警告还是错误，得到的信息是：我们引入的一个第三方库不包含bitcode。</p>
<p>方法二：关闭Bitcode，方法见下图</p>
<blockquote>
<p> <img src="https://i.imgur.com/OoOogUe.gif" alt="enter image description here"></p>
</blockquote>
<p>我们可以在”Build Settings”-&gt;”Enable Bitcode”选项中看到：</p>
<p>用 Xcode 7+ 新建一个 iOS 程序时， bitcode 选项默认是设置为YES的。现在需要改成NO。</p>
<p>如果我们开启了 bitcode ，在提交包时，下面这个界面也会有个 bitcode 选项：</p>
<p><img src="http://i60.tinypic.com/5b2q7m.jpg" alt="enter image description here"></p>
<p>那么 SDK 厂商如何支持 bitcode 呢？答案是只要在 Xcode7上重新编译一下就 ok 了。（请确保默认开启的 bitcode 没有去主动关闭）</p>
<p>但是如果仅仅是编译一下，则会出现下类似的如下警告：</p>
<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150928/17/1733887242015092817143106.jpg?1462x120_120" alt="enter image description here"></p>
<blockquote>
<p>ld: warning: full bitcode bundle could not be generated because ‘Lookback(Lookback.o)’ was built only with bitcode marker. The library must be generated from Xcode archive build with bitcode enabled (Xcode setting ENABLE_BITCODE)</p>
</blockquote>
<p>警告的消除步骤：</p>
<p>模拟器、真机分开打包，SDK在build的时候，让模拟器与真机分开build，模拟器不设置bitcode的参数，真机的加上，然后再合起来。（“合起来”指的是指令集，好比 x86_64 i386 跟 armv7 arm64合起来。）用命令行打包的话 加上这个参数OTHER_CFLAGS=“-fembed-bitcode”。</p>
<p>详情可移步：<a href="http://stackoverflow.com/a/31486233/3395008" target="_blank" rel="external"> <strong><em>How do I xcodebuild a static library with Bitcode enabled?</em></strong> </a> </p>
<p>更多信息，请移步</p>
<ol>
<li><a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2" target="_blank" rel="external">bitcode 苹果官方文档</a></li>
</ol>
<ol>
<li>WWDC 2015 Session 102: <a href="https://developer.apple.com/videos/wwdc/2015/?id=102" target="_blank" rel="external">“Platforms State of the Union”</a></li>
</ol>
<p> <img src="http://mobileforward.net/wp-content/uploads/2015/06/Screen-Shot-2015-06-12-at-6.57.54-PM-697x351.png" alt="enter image description here"></p>
<p>##5.Demo3—iOS9 URL Scheme 适配_引入白名单概念</p>
<p> <a href="https://developer.apple.com/videos/wwdc/2015/?id=703" target="_blank" rel="external"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> （ 时间在30：18左右）关于 <code>URL scheme</code> 的介绍，指出：</p>
<p> <img src="https://i.imgur.com/2HxWQqq.png" alt="enter image description here"></p>
<p>也就是说：在iOS9中，如果使用 <code>canOpenURL:</code> 方法，该方法所涉及到的  <code>URL scheme</code> 必须在”Info.plist”中将它们列为白名单，否则不能使用。key叫做LSApplicationQueriesSchemes ，键值内容是</p>
<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
 &lt;string&gt;urlscheme&lt;/string&gt;
 &lt;string&gt;urlscheme2&lt;/string&gt;
 &lt;string&gt;urlscheme3&lt;/string&gt;
 &lt;string&gt;urlscheme4&lt;/string&gt;
&lt;/array&gt; 
</code></pre><p>白名单上限是50个：</p>
<p> <a href="https://developer.apple.com/videos/wwdc/2015/?id=703" target="_blank" rel="external"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> ）有说明：</p>
<blockquote>
<p> “So for apps that are linked before iOS 9 and are running on iOS 9, they will be given 50 distinct URL schemes.”  –  WWDC 2015 session 703 Privacy and Your App </p>
</blockquote>
 <p><del><br>然而，我们却发现了一件意外的事：<br>当我们在 iOS9-beta（截至本文发布时，iOS9正式版还未发布）中，使用 <code>openURL:</code>  方法时，不在白名单中的 URL 会报错 &gt; “This app is not allowed to query for scheme xxx” 。<br>无论是官方文档还是 WWDC 的视频中都没有提及 <code>openURL:</code>  方法的这一变动，所以猜测这是 beta 版本一个 bug ，截至本文发布时，iOS9正式版还未发布，期望在正式版中能得以修复。在此之前，可通过将 <code>openURL:</code>  用到的 <code>URL scheme</code> 列入白名单来解决这个 bug 。（经测试：iOS9 beta5中已经修复）</del></p>

<p>iOS9中 <code>openURL:</code> 方法没有什么实质性的变化，仅仅多了一个确认动作：</p>
<p><img src="http://i57.tinypic.com/8zjh35.jpg" alt="enter image description here"></p>
<p>苹果为什么要这么做？</p>
<p>在 iOS9 之前，你可以使用 <code>canOpenURL:</code> 监测用户手机里到底装没装微信，装没装微博。但是也有一些别有用心的 App ，这些 App 有一张常用 App 的 <code>URL scheme</code>，然后他们会多次调用<code>canOpenURL:</code> 遍历该表，来监测用户手机都装了什么 App ，比如这个用户装了叫“大姨妈”的App，你就可以知道这个用户是女性，你就可以只推给这个用户女性用品的广告。这是侵犯用户隐私的行为。</p>
<p>这也许就是原因。</p>
<p>本项目中给出了一个演示用的 Demo ，仓库的文件夹叫“Demo3<em>iOS9URLScheme适配</em>引入白名单概念”，Demo引用自<a href="https://github.com/gatzsche/LSApplicationQueriesSchemes-Working-Example" target="_blank" rel="external"> <strong><em>LSApplicationQueriesSchemes-Working-Example</em></strong> </a></p>
<p>Demo结构如下：</p>
<p><img src="http://i61.tinypic.com/2hyyuqv.jpg" alt="enter image description here"></p>
<p>主要演示的情景是这样的：</p>
<p>假设有两个App： weixin(微信) and 我的App. 我的App 想监测 weixin(微信) 是否被安装了. “weixin(微信)” 在 info.plist  中定义了 URL scheme :</p>
<pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;weixin&lt;/string&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre><p> 我的App 想监测 weixin(微信) 是否被安装了 ：</p>
<pre><code>[[UIApplication sharedApplication]
                    canOpenURL:[NSURL URLWithString:@&quot;weixin(微信)://&quot;]];
</code></pre><p>即使你安装了微信，在iOS9中，这有可能会返回NO：</p>
<p>因为你需要将 “weixin(微信)” 添加到 “我的App” 的 info.plist 文件中：</p>
<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;weixin&lt;/string&gt;
&lt;/array&gt;
</code></pre><p>（以上只是为了演示，实际开发中，你不仅需要添加“weixin”还需要“wechat”这两个。具体 ）</p>
 <p><del>关于 <code>openURL:</code> 这个问题，可在 Demo3 中自行测试，如果该 bug 修复了的话，请私信<a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a>，我再来更新本文。（经测试：iOS9 beta5中已经修复）</del></p>


<p>另外，推荐一篇<a href="http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes" target="_blank" rel="external">博文</a>，其中最关键的是以下部分：</p>
<blockquote>
<p>If you call the “canOpenURL” method on a URL that is not in your whitelist, it will return “NO”, even if there is an app installed that has registered to handle this scheme. A “This app is not allowed to query for scheme xxx” syslog entry will appear.</p>
</blockquote>
 <p><del>&gt; If you call the “openURL” method on a URL that is not in your whitelist, it will fail silently. A “This app is not allowed to query for scheme xxx” syslog entry will appear.<br></del></p>


<h3 id="常见-URL-Scheme"><a href="#常见-URL-Scheme" class="headerlink" title="常见 URL Scheme"></a>常见 URL Scheme</h3><p>如果想一次性集成最常用的微信、新浪微博、QQ、支付宝四者的白名单，则配置如下：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 微信 URL Scheme 白名单--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>wechat<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>weixin<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 新浪微博 URL Scheme 白名单--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>sinaweibohd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>sinaweibo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>sinaweibosso<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>weibosdk<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>weibosdk2.5<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- QQ、Qzone URL Scheme 白名单--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqapi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqq<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqOpensdkSSoLogin<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqconnect<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqopensdkdataline<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqopensdkgrouptribeshare<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqopensdkfriend<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqopensdkapi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqopensdkapiV2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqopensdkapiV3<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzoneopensdk<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>wtloginmqq<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>wtloginmqq2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqqwpa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzone<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzonev2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzoneshare<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>wtloginqzone<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzonewx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzoneopensdkapiV2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzoneopensdkapi19<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzoneopensdkapi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>mqzoneopensdk<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 支付宝  URL Scheme 白名单--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>alipay<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>alipayshare<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure>
<p>plist 文件看起来会是这样的：</p>
<p><img src="http://i58.tinypic.com/e5pyee.jpg" alt="enter image description here"></p>
<p>其他平台可在下面的列表中查询：<br>各平台OpenURL白名单说明</p>
<table>
<thead>
<tr>
<th>平台名称</th>
<th>URL Schem</th>
<th>补充说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>微信</td>
<td>wechat,<p></p> weixin</td>
</tr>
<tr>
<td>支付宝</td>
<td>alipay,<p></p>alipayshare</td>
</tr>
<tr>
<td>QQ</td>
<td>mqqOpensdkSSoLogin, <p></p>mqqopensdkapiV2,<p></p>mqqopensdkapiV3,<p></p>wtloginmqq2,<p></p>mqq,<p></p>mqqapi</td>
<td></td>
</tr>
<tr>
<td>QZONE</td>
<td>mqzoneopensdk, <p></p>mqzoneopensdkapi,<p></p>mqzoneopensdkapi19,<p></p>mqzoneopensdkapiV2,<p></p>mqqOpensdkSSoLogin,<p></p>mqqopensdkapiV2,<p></p>mqqopensdkapiV3,<p></p>wtloginmqq2,<p></p>mqqapi,<p></p>mqqwpa，<p></p>mqzone，<p></p>mqq</td>
<td>[注:若同时使用QQ和QZONE,则直接添加本格即可]</td>
</tr>
<tr>
<td>新浪微博</td>
<td>sinaweibo,<p></p>sinaweibohd,<p></p>sinaweibosso,<p></p>sinaweibohdsso,<p></p>weibosdk,<p></p>weibosdk2.5</td>
<td>[后两个若导入新浪SDK则需要]</td>
</tr>
<tr>
<td>豆瓣</td>
<td>无需配置</td>
<td></td>
</tr>
<tr>
<td>开心网</td>
<td>无需配置</td>
<td></td>
</tr>
<tr>
<td>易信</td>
<td>yixin,<p></p> yixinopenapi</td>
</tr>
<tr>
<td>Google+</td>
<td>googlechrome, <p></p>googlechrome-x-callback,<p></p>hasgplus4,<p></p>com.google.gppconsent,<p></p>com.google.gppconsent.2.2.0,<p></p>com.google.gppconsent.2.3.0,<p></p>com.google.gppconsent.2.4.0,<p></p>com.google.gppconsent.2.4.1</td>
<td></td>
</tr>
<tr>
<td>人人网</td>
<td>renrenapi,<p></p>renrenios,<p></p>renreniphone,<p></p>renren,</td>
<td></td>
</tr>
<tr>
<td>Facebook</td>
<td>fbauth2</td>
<td></td>
</tr>
<tr>
<td>Twitter</td>
<td>无需配置</td>
<td></td>
</tr>
<tr>
<td>Pocket</td>
<td>pocket-oauth-v1</td>
<td></td>
</tr>
<tr>
<td>Pinterest</td>
<td>pinit</td>
<td></td>
</tr>
<tr>
<td>Instagram</td>
<td>instagram</td>
<td></td>
</tr>
<tr>
<td>WhatsApp</td>
<td>whatsapp</td>
<td></td>
</tr>
<tr>
<td>Line</td>
<td>line</td>
<td></td>
</tr>
<tr>
<td>KakaoTalk</td>
<td>kakaolink</td>
<td></td>
</tr>
<tr>
<td>KaokaoStory</td>
<td>storylink</td>
<td></td>
</tr>
<tr>
<td>LinkedIn</td>
<td>无需配置</td>
<td></td>
</tr>
<tr>
<td>Tumblr</td>
<td>无需配置</td>
<td></td>
</tr>
<tr>
<td>非平台类</td>
<td>无需配置</td>
<td>( 如短信，复制，邮件等)</td>
</tr>
</tbody>
</table>
<h3 id="Q-A"><a href="#Q-A" class="headerlink" title="Q-A"></a>Q-A</h3><p>Q：我用xcode7编译的app，如果不在plist里面加scheme，ios9下qq就会不显示，因为我用了qqsdk里的判断是否安装qq的方法，我要是直接下载app store上的，没有加scheme，qq也是能显示。</p>
<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包不需要白名单也能调用“canOpenURL” ，Xcode7给iOS9设备打的包则不然，Xcode7和iOS9缺一不可，才需要适配URL Scheme。</strong></p>
<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>
<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here"></p>
<p> Q：我们自己的应用跳到微信、支付宝、微博等的URLScheme是固定几个，但是从微信、支付宝、微博跳回到我们的应用的URLScheme可能是成千上万个，那他们那些大厂是如何做这个白名单？</p>
<p>A：白名单策略影响的仅仅是 canOpenURL: 接口，OpenURL: 不受影响，这些大厂只调用 openURL: 所以不受 iOS9 的影响。</p>
<p>Q：文中提到了设置白名单的原因，然而，如果这些别有用心的APP在它自己的白名单列出它关心的APP, 然后依次调用canOpenURL来检测，照样可以监控用户都安装了哪些APP啊？所以我依然不明白苹果这样做得原因。</p>
<p>A：白名单的数目上限是50个。苹果这样子做，使得最多只能检测50个App。</p>
<p>Q：按照文中的适配方法，error原因就没有了的确没问题了，但是还是会打印如下信息：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-canOpenURL: failed for URL: &quot;XXXXXXXXXX&quot; - error: &quot;(null)&quot;。</div></pre></td></tr></table></figure>
<p>A：这个模拟器的一个 bug，无论使用iOS9的真机还是模拟器均出现该问题，估计 Xcode 后续的升级中会修复掉。</p>
<p>那如何判断日志究竟是 Xcode bug 造成的还是没有适配造成的？看error的值，如果是null，则是 bug。（2015-09-21更）</p>
<p>##6. iPad适配Slide Over 和 Split View</p>
<p> <img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/ew-.gif" alt="enter image description here"></p>
<p>【iPad适配Slide Over 和 Split View】<br>若想适配multi tasking特性，唯一的建议：弃纯代码，改用storyboard、xib，纵观苹果WWDC所有Demo均是如此：</p>
<ol>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=218" target="_blank" rel="external">Mysteries of Auto Layout, Part 1</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=215" target="_blank" rel="external">What’s New in Storyboards</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=407" target="_blank" rel="external">Implementing UI Designs in Interface Builder</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=205" target="_blank" rel="external">Getting Started with Multitasking on iPad in iOS 9</a></p>
</li>
<li><p><a href="https://developer.apple.com/videos/wwdc/2015/?id=212" target="_blank" rel="external">Optimizing Your App for Multitasking on iPad in iOS</a></p>
</li>
</ol>
<h2 id="7-字体间隙变大导致-UI-显示异常"><a href="#7-字体间隙变大导致-UI-显示异常" class="headerlink" title="7.字体间隙变大导致 UI 显示异常"></a>7.字体间隙变大导致 UI 显示异常</h2><p>iOS8中，字体是Helvetica，中文的字体有点类似于“华文细黑”。只是苹果手机自带渲染，所以看上去可能比普通的华文细黑要美观。iOS9中，中文系统字体变为了专为中国设计的“苹方” 有点类似于一种word字体“幼圆”。字体有轻微的加粗效果，并且最关键的是字体间隙变大了！</p>
<p>所以很多原本写死了width的label可能会出现“…”的情况：</p>
<table>
<thead>
<tr>
<th>情况</th>
<th>显示</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>XIB</td>
<td>将 label 的 width 写死</td>
<td>下面这两张图也可以直观的看出同一个界面，同一个label的变化。</td>
</tr>
<tr>
<td>iOS8</td>
<td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223903476-176844619.png" alt="enter image description here"></td>
<td>正常</td>
</tr>
<tr>
<td>iOS9</td>
<td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223918101-1917717144.png" alt="enter image description here"></td>
<td>最后四位数字、、、</td>
</tr>
</tbody>
</table>
<p>如果不将 label 的 width 写死，仅仅添加左端约束则右端的四个数字会越界</p>
<table>
<thead>
<tr>
<th>情况</th>
<th>显示</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>XIB</td>
<td><img src="http://i60.tinypic.com/292r428.jpg" alt="enter image description here"></td>
<td>如果仅仅添加左端约束</td>
</tr>
<tr>
<td>iOS8</td>
<td><img src="http://i58.tinypic.com/2vj92bn.jpg" alt="enter image description here"></td>
<td>正常</td>
</tr>
<tr>
<td>iOS9</td>
<td><img src="http://i62.tinypic.com/2czaq1v.jpg" alt="enter image description here"></td>
<td>“3199”这四个数字越界了</td>
</tr>
</tbody>
</table>
<p>所以为了在界面显示上不出错，就算是固定长度的文字也还是建议使用sizetofit 或者ios向上取整 ceilf() 或者提前计算：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CGSize size = [title sizeWithAttributes:@&#123;NSFontAttributeName: [UIFont systemFontOfSize:14.0f]&#125;];</div><div class="line">CGSize adjustedSize = CGSizeMake(ceilf(size.width), ceilf(size.height));</div></pre></td></tr></table></figure>
<h2 id="8-升级-Xcode7-后的崩溃与警告"><a href="#8-升级-Xcode7-后的崩溃与警告" class="headerlink" title="8.升级 Xcode7 后的崩溃与警告"></a>8.升级 Xcode7 后的崩溃与警告</h2><h3 id="旧版本新浪微博-SDK-在-iOS9-上会导致的-Crash"><a href="#旧版本新浪微博-SDK-在-iOS9-上会导致的-Crash" class="headerlink" title="旧版本新浪微博 SDK 在 iOS9 上会导致的 Crash"></a>旧版本新浪微博 SDK 在 iOS9 上会导致的 Crash</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app was compiled with optimization - stepping may behave oddly; variables may not be available</div></pre></td></tr></table></figure>
<p>打印出来这句话，然后崩溃。多是启动的过程中程序就崩溃。</p>
<p>在iOS9下，新浪微博SDK里面使用的 JSONKit 在部分机型可能导致崩溃。崩溃信息如下图。</p>
<p><img src="http://wiki.mob.com/wp-content/uploads/2015/09/4062130C-1138-4352-89AF-E518F189A851.png" alt="enter image description here"></p>
<p>解决：更新新浪微博SDK，新浪的SDK最新版做了对iOS9兼容。</p>
<h3 id="iOS9-下使用-Masonry-会引起崩溃的一种情况"><a href="#iOS9-下使用-Masonry-会引起崩溃的一种情况" class="headerlink" title="iOS9 下使用 Masonry 会引起崩溃的一种情况"></a>iOS9 下使用 Masonry 会引起崩溃的一种情况</h3><p>在 iOS8（及以前）我们有这样的经验：</p>
<blockquote>
<p>  <code>leading 与 left</code>  、 <code>trailing 与 right</code>  在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调，换句话说就是基本可以不理不用，用left和right就好了</p>
</blockquote>
<p>（摘自 <a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">《Masonry介绍与使用实践(快速上手Autolayout)》</a> ）</p>
<p>但在概念里，还是一直将 leading 与 left 划为等号，这样做在 iOS8（及以前）上是正常的，但在 iOS9 上这样的观念可能会引起崩溃，比如：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.left.equalTo(self.mas_leading).offset(15);</div></pre></td></tr></table></figure>
<p>应该为：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.left.equalTo(self.mas_left).offset(15);</div></pre></td></tr></table></figure>
<p>同理 mas_training 也需要改为right</p>
<p>同时也有人反馈说也需要作如下调整否则也会崩溃：</p>
<p>toplayoutGuide 替换成 mas_toplayoutguide<br>bottomlayoutguide 替换成 mas_bottomlayoutguide</p>
<p>而且使用类似 <code>make.top.equalTo(topView.mas_baseline).with.offset(5);</code> 涉及 <code>mas_baseline</code> 的语句也会引起崩溃。</p>
<p>暂时的解决方案是</p>
<p>使用 <code>make.top.equalTo(self.mas_topLayoutGuide).with.offset(5);</code> 来替换原来的  <code>self.topLayoutGuide.mas_baseline</code>  反正效果是一样的</p>
<p>原来的代码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[self.headerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    UIView *topView = (UIView *)self.topLayoutGuide;</div><div class="line">    make.top.equalTo(topView.mas_baseline).with.offset(5);</div><div class="line">    make.leading.equalTo(self.view.mas_leading).with.offset(10);</div><div class="line">    make.right.equalTo(self.view.mas_right).with.offset(-10);</div><div class="line">    make.height.equalTo(@34);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>修改后：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[self.headerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.top.equalTo(self.mas_topLayoutGuide).with.offset(5);</div><div class="line">    make.left.equalTo(self.view.mas_left).with.offset(10);</div><div class="line">    make.right.equalTo(self.view.mas_right).with.offset(-10);</div><div class="line">    make.height.equalTo(@34);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="Xcode-升级后，旧的状态栏的样式设置方式会引起警告"><a href="#Xcode-升级后，旧的状态栏的样式设置方式会引起警告" class="headerlink" title="Xcode 升级后，旧的状态栏的样式设置方式会引起警告"></a>Xcode 升级后，旧的状态栏的样式设置方式会引起警告</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Error&gt;: CGContextSaveGState: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.</div><div class="line">&lt;Error&gt;: CGContextTranslateCTM: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.</div><div class="line">&lt;Error&gt;: CGContextRestoreGState: invalid context 0x0. If you want to see the backtrace, please set CG_CONTEXT_SHOW_BACKTRACE environmental variable.</div></pre></td></tr></table></figure>
<p>出错原因：设置 app 的状态栏样式的时候，使用了旧的方式，在 info.plist 里面的 <code>View controller-based status bar appearance</code> 默认会为 YES，即使不设置也是 YES，但一般 iOS6 的时候为了设置状态栏样式，需要将其设为NO，iOS7，8也兼容，但是到了iOS9 就会报警告。</p>
<p>解决办法：</p>
<p>删除原先的设置代码，通常老的设置方式是这样的：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//设置状态栏的白色</div><div class="line">   [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];</div></pre></td></tr></table></figure>
<p>删除的原因见下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> // Setting the statusBarStyle does nothing if your application is using the default UIViewController-based status bar system.</div><div class="line">@property(readwrite, nonatomic) UIStatusBarStyle statusBarStyle NS_DEPRECATED_IOS(2_0, 9_0, &quot;Use -[UIViewController preferredStatusBarStyle]&quot;);</div><div class="line">- (void)setStatusBarStyle:(UIStatusBarStyle)statusBarStyle animated:(BOOL)animated NS_DEPRECATED_IOS(2_0, 9_0, &quot;Use -[UIViewController preferredStatusBarStyle]&quot;);</div></pre></td></tr></table></figure>
<p>修改方式是在 <code>Info.plist</code> 文件中做如下修改：</p>
<p>将 <code>View controller-based status bar appearance</code> 删除（默认为 YES），或设置为YES：</p>
<p>对应的 plist 里的 XML源码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;UIViewControllerBasedStatusBarAppearance&lt;/key&gt;</div><div class="line">&lt;true/&gt;</div></pre></td></tr></table></figure>
<p>看起来长这样：</p>
<p><img src="http://i61.tinypic.com/jrsjnd.jpg" alt="enter image description here"></p>
<p>然后使用新的方式来实现状态栏的样式：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (UIStatusBarStyle)preferredStatusBarStyle;</div><div class="line">- (UIViewController *)childViewControllerForStatusBarStyle;</div><div class="line">- (void)setNeedsStatusBarAppearanceUpdate</div></pre></td></tr></table></figure>
<p>比如，你想将状态栏设置为白色，就可以这样写：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//设置状态栏的白色</div><div class="line"> -(UIStatusBarStyle)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line">    return UIStatusBarStyleLightContent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>记得要 clean 下或者删除应用程序重新运行</p>
<h4 id="Demo4—navigationController状态栏样式新的设置方法"><a href="#Demo4—navigationController状态栏样式新的设置方法" class="headerlink" title="Demo4—navigationController状态栏样式新的设置方法"></a>Demo4—navigationController状态栏样式新的设置方法</h4><p>如果你按照上面的方法设置了，但还是不行。八成是 rootViewController 设置的问题，你必须设置 rootViewController，编译器才会去 rootViewController 中重载 preferredStatusBarStyle 方法。</p>
<p>另外当你在 appdelegate 中将 navigationController 设为 rootViewController 的时候：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.window.rootViewController = self.navigationController;</div></pre></td></tr></table></figure>
<p>因为 rootViewController 变为了 navigationController，你在 ViewController 里重写 preferredStatusBarStyle 方法是不会起作用的。所以最好的方法是</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> - (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    self.title = @&quot;微博@iOS程序犭袁&quot;;</div><div class="line">    self.navigationController.navigationBar.barStyle = UIBarStyleBlack;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你还是想重写 preferredStatusBarStyle 方法来达到作用，那最好使用分类来解决：</p>
<p>.h文件：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> //</div><div class="line">//  UINavigationController+StatusBarStyle.h</div><div class="line">//  微博@iOS程序犭袁</div><div class="line">//</div><div class="line">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</div><div class="line">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface UINavigationController (StatusBarStyle)</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>.m文件：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> //</div><div class="line">//  UINavigationController+StatusBarStyle.m</div><div class="line">//  微博@iOS程序犭袁</div><div class="line">//</div><div class="line">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</div><div class="line">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;UINavigationController+StatusBarStyle.h&quot;</div><div class="line"></div><div class="line">@implementation UINavigationController (StatusBarStyle)</div><div class="line"></div><div class="line">- (UIStatusBarStyle)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line">    //also you may add any fancy condition-based code here</div><div class="line">    return UIStatusBarStyleLightContent;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>我在仓库里给出了 navigation 的设置方法，见Demo4。</p>
<p>参考链接： <a href="http://stackoverflow.com/a/19513714/3395008" target="_blank" rel="external">preferredStatusBarStyle isn’t called–For anyone using a UINavigationController:</a> </p>
<h3 id="Xcode7-在-debug-状态下也生成-dSYM-文件引起的警告"><a href="#Xcode7-在-debug-状态下也生成-dSYM-文件引起的警告" class="headerlink" title="Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告"></a>Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告</h3><p>Xcode6 的工程升级到 Xcode7上来，会报警告：</p>
<p><img src="http://i57.tinypic.com/2a5zuia.jpg" alt="enter image description here"></p>
<p>这是 debug 编译时导出符号文件出现的告警，</p>
<p>然而新建的Xcode7工程不会有该问题。</p>
<p>解决方法是让 debug 编译的时候不生成符号文件：</p>
<p><img src="http://i60.tinypic.com/2e23qyp.jpg" alt="enter image description here"></p>
<h3 id="Xcode7-无法使用-8-x-系统的设备调试，一运行就报错-there-is-an-intenal-API-error"><a href="#Xcode7-无法使用-8-x-系统的设备调试，一运行就报错-there-is-an-intenal-API-error" class="headerlink" title="Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 there is an intenal API error"></a>Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 <code>there is an intenal API error</code></h3><p><img src="http://cdn.cocimg.com/bbs/attachment/Fid_21/21_296305_92094d6a71e587a.png" alt="enter image description here"></p>
<p><code>Xcode7</code> 调试  <code>iOS8.x</code> 的真机，需要确保项目名改为英文，中间含有中文会报错  <code>there is an intenal API error</code></p>
<p>按照下面的步骤检查：</p>
<p>bulid settings  -&gt;    packaging  -&gt; product name   </p>
<h3 id="使用了-HTML-的-iframe-元素可能导致无法从-Safari-跳转至-App"><a href="#使用了-HTML-的-iframe-元素可能导致无法从-Safari-跳转至-App" class="headerlink" title="使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App"></a>使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App</h3><p>我们都知道，从网易新闻分享一条新闻到QQ，然后从QQ中打开链接再用safari打开链接，在iOS8上，这个时候会跳转到网易新闻App。但是现在（2015年09月23日）版本的网易新闻在 iOS9 就不能正常跳转，会跳转到 App Store 页面并提示要不要打开 App Store。</p>
<p>这是很可能是因为使用了 HTML 的 iframe 元素，并将自定义的链接放进了该元素中</p>
<p>举例说明：</p>
<p><img src="http://i61.tinypic.com/2wbvok8.jpg" alt="enter image description here"></p>
<p>我之前写的一个 Demo： <a href="https://github.com/ChenYilong/CYLExternalURL" target="_blank" rel="external">模仿 《简书 App》 的效果:在html中跳转到App中的对应页面,并能从App跳转到原来的网址</a>，在例子中直接调用自定义链接在 iOS9上是可以跳转到 App 中的，然而，如果用 iframe 元素包起来就会变不可用。</p>
<p>参考链接：</p>
<ol>
<li><a href="http://www.w3school.com.cn/tags/tag_iframe.asp" target="_blank" rel="external">HTML 的iframe 标签</a> </li>
<li><a href="http://stackoverflow.com/questions/31891777/ios-9-safari-iframe-src-with-custom-url-scheme-not-working" target="_blank" rel="external">iOS 9 safari iframe src with custom url scheme not working</a> </li>
</ol>
<h3 id="iOS9锁屏控制台会打印警告"><a href="#iOS9锁屏控制台会打印警告" class="headerlink" title="iOS9锁屏控制台会打印警告"></a>iOS9锁屏控制台会打印警告</h3><p>加入运行如下示例代码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">    dispatch_async(queue, ^(void) &#123;</div><div class="line">        //在这个10秒内锁屏</div><div class="line">         NSLog(@&quot;准备休眠&quot;);</div><div class="line">        sleep(10);</div><div class="line">        NSLog(@&quot;打印成功&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应用运行过程中锁屏，总是会出现以下提示：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">** -[UIApplication _handleNonLaunchSpecificActions:forScene:withTransitionContext:completion:] ** unhandled action -&gt; &lt;FBSSceneSnapshotAction: 0x16da76c0&gt; &#123;</div><div class="line">    handler = remote;</div><div class="line">    info = &lt;BSSettings: 0x16d80e50&gt; &#123;</div><div class="line">        (1) = 5;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当应用处于空闲状态时（无网络请求）锁屏对于用户而言并无较大影响，</p>
<p>但是当应用在执行某个异步任务时（比如下拉刷新一下列表）锁屏，重新解锁进入就可能会发现异步任务失败，控制台也会提示 Error 信息：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">** -[UIApplication _handleNonLaunchSpecificActions:forScene:withTransitionContext:completion:] ** unhandled action -&gt; &lt;FBSSceneSnapshotAction: 0x16da76c0&gt; &#123;</div><div class="line">    handler = remote;</div><div class="line">    info = &lt;BSSettings: 0x16d80e50&gt; &#123;</div><div class="line">        (1) = 5;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">error in __connection_block_invoke_2: Connection interrupted</div></pre></td></tr></table></figure>
<p>以上情况不易复现，但确有发生。</p>
<p>在 iOS8 系统下测试并未发现此问题。</p>
<p>对此并未找到合理的解释和对应的解决办法，如果你有解决方法，欢迎提 PR !</p>
<h3 id="在didFinishLaunchingWithOptions结束后还没有设置window的rootViewController会导致崩溃"><a href="#在didFinishLaunchingWithOptions结束后还没有设置window的rootViewController会导致崩溃" class="headerlink" title="在didFinishLaunchingWithOptions结束后还没有设置window的rootViewController会导致崩溃"></a>在<code>didFinishLaunchingWithOptions</code>结束后还没有设置window的<code>rootViewController</code>会导致崩溃</h3><p> iOS9 不允许在 <code>didFinishLaunchingWithOptions</code> 结束了之后，还没有设置 window 的 <code>rootViewController</code> 。 也许是 Xcode7 的编译器本身就不支持。</p>
<p>崩溃时的控制台日志提示：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*** Assertion failure in -[UIApplication _runWithMainScene:transitionContext:completion:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3505.16/UIApplication.m:3294</div><div class="line"></div><div class="line">***  Terminating app due to uncaught exception &apos;NSInternalInconsistencyException&apos;, reason: &apos;Application windows are expected to have a root view controller at the end of application launch&apos;</div><div class="line"></div><div class="line">*** First throw call stack:</div><div class="line">/*省略*/</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div><div class="line">(lldb)</div></pre></td></tr></table></figure>
<p>解决的方法是先设初始化个值，之后再赋值替换掉：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIWindow *window = [[UIWindow alloc] initWithFrame:[UIScreenmainScreen].bounds];</div><div class="line">window.rootViewController = [[UIViewController alloc] init];</div></pre></td></tr></table></figure>
<p>尤其注意一种情况，在 iOS8以前，我们有时候会通过在 AppDelegate 中添加另一个 UIWindow ，并修改其 Level 来达到 addSubview 的效果，因而也不设置 window 的 <code>rootViewController</code> ，而是把它直接以视图的形式展示了，则在 iOS8 上是警告，在 iOS9 上就崩溃了。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line">    self.window.backgroundColor = [UIColor yellowColor];</div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line">    </div><div class="line">    UIWindow *normalWindow = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line">    normalWindow.backgroundColor = [UIColor blueColor];</div><div class="line">    normalWindow.windowLevel = UIWindowLevelAlert;</div><div class="line">    [normalWindow makeKeyAndVisible];</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况，在 <code>didFinishLaunchingWithOptions</code> 需要修改原来的策略，将第二个 window 类型改为其他类型，比如 viewController 类型、navigation 类型、tabbarController 类型等。</p>
<h2 id="9-Demo5、Demo6—-搜索-API"><a href="#9-Demo5、Demo6—-搜索-API" class="headerlink" title="9.Demo5、Demo6— 搜索 API"></a>9.Demo5、Demo6— 搜索 API</h2><p>导入两个 framework，</p>
<p>然后像设置tableView 的 cell 一样设置下每一个“搜索元素”，搜索元素的组成如下：</p>
<p><img src="http://i57.tinypic.com/144b22w.jpg" alt="enter image description here"></p>
<p>详情见 Demo6 代码。</p>
<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150923/21/17338872420150923214730010.gif?370x686_110" alt="enter image description here"></p>
<p>既然刚才说了搜索元素与 tableView 的 cell 非常相似：那么我们就展示一下如何让 tableView 与 CoreSpotlightSearch 进行结合：</p>
<p>详见 Demo6，Demo6 与 Demo5 的主要差异在于：在点击搜索结果跳转到 App 后，还会进一步根据搜索的内容 push 到相应的详情页中：</p>
<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150924/00/17338872420150924001340035.gif?306x572_110" alt="enter image description here"></p>
<h2 id="10-iOS国际化问题：当前设备语言字符串返回有变化。"><a href="#10-iOS国际化问题：当前设备语言字符串返回有变化。" class="headerlink" title="10.iOS国际化问题：当前设备语言字符串返回有变化。"></a>10.iOS国际化问题：当前设备语言字符串返回有变化。</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="built_in">NSArray</span> *allLanguage = [defaults objectForKey:<span class="string">@"AppleLanguages"</span>];</div><div class="line"><span class="built_in">NSString</span> *currentLanguage = [allLanguage objectAtIndex:<span class="number">0</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"The current language is : %@"</span>, currentLanguage);</div></pre></td></tr></table></figure>
<p>iOS 9 之前：以上返回结果：语言字符串代码。例如：”zh-Hans”</p>
<p>iOS 9:以上返回结果：语言字符串代码 + 地区代码。例如：”zh-Hans-US”</p>
<p>备注：<br>1.请注意判断当前语言类型，不要用以下形式的代码了，不然在iOS9上就会遇到坑。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([currentLanguage <span class="string">isEqualToString:</span>@<span class="string">"zh-Hans"</span>])</div></pre></td></tr></table></figure>
<p>可以使用：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([currentLanguage <span class="string">hasPrefix:</span>@<span class="string">"zh-Hans"</span>])</div></pre></td></tr></table></figure>
<p>另外：对于中文，语言有：</p>
<ul>
<li>简体中文:zh-Hans</li>
<li>繁体中文:zh-Hant</li>
<li>香港中文:zh-HK</li>
<li>澳门中文:zh-MO</li>
<li>台湾中文:zh-TW</li>
<li>新加坡中文:zh-SG  </li>
</ul>
<p><strong>备注：以上iOS9 当前语言字符串返回结果：语言字符串代码 + 地区代码。在某些情况下不是这样，本人手机型号：大陆版电信iPhone5S/A1533/16GB测试结果：zh-HK/zh-TW，在地区为”中国”、”中国香港”、”中国台湾”的时候，显示的还是zh-HK/zh-TW，一旦切换到其它地区，设备语言会自动的切换到中文繁体。请开发人员注意中文的问题！</strong></p>
<h2 id="11-UITableView显示异常"><a href="#11-UITableView显示异常" class="headerlink" title="11.UITableView显示异常"></a>11.UITableView显示异常</h2><p>原本在 Xcode6 上完好的项目，在 Xcode7 上一编译， <code>tableView</code> 出了两个问题 ：</p>
<ol>
<li>代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</li>
<li><code>reloadData</code> 刷新失效；</li>
</ol>
<h3 id="代码创建的-tableView-无法隐藏-cell-分割线"><a href="#代码创建的-tableView-无法隐藏-cell-分割线" class="headerlink" title="代码创建的 tableView 无法隐藏 cell 分割线"></a>代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</h3><p>iOS9 里面用到 tableView 突然跑出来了很多 cell 的分割线， 但是在用xib创建的 tableview，就不存在这个问题</p>
<p>解决方法是将设置分割线隐藏的方法 <code>self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</code> 写在 <code>-layoutSubviews</code> 中：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void)layoutSubviews&#123;</div><div class="line">    [super layoutSubviews];</div><div class="line">    self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也有人发现另一种方法，就是每次 reloadData 之前都进行一次设置：设置分割线隐藏，这样也可以解决：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</div><div class="line">[self.tableView reloadData]</div></pre></td></tr></table></figure>
<p>虽然也可以解决但是不推荐，这样写会给其他人造成困扰：不知所云。</p>
<h3 id="reloadData-刷新失效"><a href="#reloadData-刷新失效" class="headerlink" title="reloadData 刷新失效"></a><code>reloadData</code> 刷新失效</h3><p>现象： <code>[tableView reloadData]</code> 无效，有一行 cell 明明改变了但是刷新不出来。</p>
<p> 感觉可能是这个方法和某种新加的特性冲突了，猜测可能是 <code>reloadData</code> 的操作被推迟到下一个 <code>RunLoop</code> 执行最终失效。</p>
<p>解决的方法是，注释 <code>[tableView reloadData]</code> ，改用局部刷新：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self.tableView reloadSections:[NSIndexSet indexSetWithIndex:0] withRowAnimation:UITableViewRowAnimationNone];</div></pre></td></tr></table></figure>
<p>这两个推测均属 Xcode7 的bug，将来 Apple 肯定会修复。</p>
<p>#结束语<br>如果你在开发中遇到什么新的 iOS9 的坑，或者有什么适配细节本文没有提及，欢迎给本仓库提 pull request。也欢迎在<a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a>  或在“iOS9开发学习交流群：141607754”中交流。</p>
<p>疏漏之处，可前往阅读下<a href="http://asciiwwdc.com" target="_blank" rel="external">这个网站</a>，这里有每年 WWDC 演讲的英文记录。</p>
<hr>
<p>Posted by <a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a><br>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="external">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#中文快速导航：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#1-demo1_ios9网络适配_ats改用更安全的https&quot;&gt;iOS9网络适配_ATS：改用更安全的HTTPS（见Demo1）&lt;/a&gt; &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#what什么是ssltls跟http和https有什么关系&quot;&gt;WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#why以前的http不是也能用吗为什么要用ssltlsapple是不是又在反人类&quot;&gt;WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？Apple是不是又在反人类？）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#how如何适配---弱弱地问下加班要多久&quot;&gt;HOW（如何适配？—弱弱地问下：加班要多久？）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#1https-only-只有https所有情况下都使用ats&quot;&gt;第1种情况：HTTPS Only （只有HTTPS，所有情况下都使用ATS）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#2mix--match混合&quot;&gt;第2种情况：Mix &amp;amp; Match（混合）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#3-opt-out禁用ats&quot;&gt;第3种情况：Opt Out（禁用ATS）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#4-opt-out-with-exceptions除特殊情况外都不使用ats&quot;&gt;第4种情况：Opt Out With Exceptions（除特殊情况外，都不使用ATS）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#certificate-transparency&quot;&gt;Certificate Transparency&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#q-a&quot;&gt;Q-A&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#2demo2_ios9新特性_更灵活的后台定位&quot;&gt;iOS9新特性_更灵活的后台定位（见Demo2）&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#3企业级分发&quot;&gt;企业级分发&lt;/a&gt; &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#1-ios9以后企业级分发ipa包将遭到与mac上dmg安装包一样的待遇默认不能安装也不再出现信任按钮&quot;&gt;iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#2-ios9以后企业分发时可能存在下载的ipa包与网页两者的-bundle-id-无法匹配而导致下载失败的情况&quot;&gt;iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#4bitcode&quot;&gt;Bitcode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#5demo3---ios9-url-scheme-适配_引入白名单概念&quot;&gt;iOS9 URL Scheme 适配_引入白名单概念（见Demo3）&lt;/a&gt; &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#常见-url-scheme&quot;&gt;常见 URL Scheme&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#q-a-1&quot;&gt;Q-A&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#6-ipad适配slide-over-和-split-view&quot;&gt; iPad适配Slide Over 和 Split View&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#7字体间隙变大导致-ui-显示异常&quot;&gt;字体间隙变大导致 UI 显示异常&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#8升级-xcode7-后的崩溃与警告&quot;&gt;升级 Xcode7 后的崩溃与警告&lt;/a&gt; &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#ios9-下使用-masonry-会引起崩溃的一种情况&quot;&gt;iOS9 下使用 Masonry 会引起崩溃的一种情况&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#xcode-升级后旧的状态栏的样式设置方式会引起警告&quot;&gt;Xcode 升级后，旧的状态栏的样式设置方式会引起警告&lt;/a&gt; &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#demo4---navigationcontroller状态栏样式新的设置方法&quot;&gt;Demo4—navigationController状态栏样式新的设置方法&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#xcode7-在-debug-状态下也生成-dsym-文件引起的警告&quot;&gt;Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#xcode7-无法使用-8x-系统的设备调试一运行就报错-there-is-an-intenal-api-error&quot;&gt;Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 there is an intenal API error&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#使用了-html-的-iframe-元素可能导致无法从-safari-跳转至-app&quot;&gt;使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#ios9锁屏控制台会打印警告&quot;&gt;iOS9锁屏控制台会打印警告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32622899/itms-90535-unable-to-publish-ios-app-with-latest-google-signin-sdk&quot;&gt;Xcode7 上传应用时提示 ITMS-90535 Unable to publish iOS app with xxx SDK 的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#在didfinishlaunchingwithoptions结束后还没有设置window的rootview
controller会导致崩溃&quot;&gt;在didFinishLaunchingWithOptions结束后还没有设置window的rootViewController会导致崩溃&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#9demo5demo6----搜索-api&quot;&gt;Demo5、Demo6— 搜索 API&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#10ios国际化问题当前设备语言字符串返回有变化&quot;&gt;iOS国际化问题：当前设备语言字符串返回有变化&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#11uitableview显示异常&quot;&gt;UITableView显示异常&lt;/a&gt; &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#代码创建的-tableview-无法隐藏-cell-分割线&quot;&gt;代码创建的 tableView 无法隐藏 cell 分割线&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/iOS9AdaptationTips#reloaddata-刷新失效&quot;&gt;reloadData 刷新失效&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="IOS" scheme="https://wait.im/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>这些天的一些感悟</title>
    <link href="https://wait.im/2015/10/26/%E8%BF%99%E4%BA%9B%E5%A4%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/"/>
    <id>https://wait.im/2015/10/26/这些天的一些感悟/</id>
    <published>2015-10-25T16:15:08.000Z</published>
    <updated>2015-10-27T07:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>一个从不犯错的人，一定从来没有尝试过任何新事物。</li>
<li>一个不肯跟你在年轻时一块奋斗的人，绝对不是那个陪伴你走过一生的人。</li>
<li>生活是一本书，要读好它的每一页，过好每一天。</li>
<li>开心工作，认真生活。</li>
<li>梦想总是要有，万一实现了呢。</li>
<li>心情很糟糕，一点都不喜欢秋天。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;一个从不犯错的人，一定从来没有尝试过任何新事物。&lt;/li&gt;
&lt;li&gt;一个不肯跟你在年轻时一块奋斗的人，绝对不是那个陪伴你走过一生的人。&lt;/li&gt;
&lt;li&gt;生活是一本书，要读好它的每一页，过好每一天。&lt;/li&gt;
&lt;li&gt;开心工作，认真生活。&lt;/li&gt;
&lt;li&gt;梦想
    
    </summary>
    
    
      <category term="随笔" scheme="https://wait.im/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C常用函数跟Foundation框架</title>
    <link href="https://wait.im/2015/10/20/Objective-C%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E8%B7%9FFoundation%E6%A1%86%E6%9E%B6/"/>
    <id>https://wait.im/2015/10/20/Objective-C常用函数跟Foundation框架/</id>
    <published>2015-10-19T16:09:50.000Z</published>
    <updated>2017-02-06T10:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学运算-math-函数"><a href="#数学运算-math-函数" class="headerlink" title="数学运算(math)函数"></a>数学运算(math)函数</h2><h4 id="算术运算函数"><a href="#算术运算函数" class="headerlink" title="算术运算函数"></a>算术运算函数</h4><ul>
<li>rand()函数：产生随机数</li>
<li>abs()函数/labs()函数：整数的绝对值</li>
<li>fabs()/fabsf()/fabsl()函数：浮点数的绝对值</li>
<li>floor()/floorf()/floorl()函数：向下取整</li>
<li>ceil()/ceilf()/ceill()函数：向上取整</li>
<li>round()/roundf()/roundl()函数：四舍五入</li>
<li>sqrt()/sqrtf()/sqrtl()函数：求平方根</li>
<li>fmax()/fmaxf()/fmaxl()函数：求最大值</li>
<li>fmin()/fminf()/fminl()函数：求最小值</li>
<li>hypot()/hypotf()/hypotl()函数：求直角三角形斜边的长度</li>
<li>fmod()/fmodf()/fmodl()函数：求两数整除后的余数</li>
<li>modf()/modff()/modfl()函数：浮点数分解为整数和小数</li>
<li>frexp()/frexpf()/frexpl()函数：浮点数分解尾数和以二为底的指数</li>
</ul>
<a id="more"></a>
<h4 id="三角运算函数"><a href="#三角运算函数" class="headerlink" title="三角运算函数"></a>三角运算函数</h4><ul>
<li>sin()/sinf()/sinl()/函数：求正弦值</li>
<li>sinh()/sinhf()/sinhl()函数：求双曲正弦值</li>
<li>cos()/cosf()/cosl()函数：求余弦值</li>
<li>cosh()/coshf()/coshl()函数：求双曲余弦值</li>
<li>tan()/tanf()/tanl()函数：求正切值</li>
<li>tanh()/tanhf()/tanhl()函数：求双曲正切值</li>
</ul>
<h4 id="反三角运算"><a href="#反三角运算" class="headerlink" title="反三角运算"></a>反三角运算</h4><ul>
<li>asin()/asinf()/asinl()函数：求反正弦值</li>
<li>asinh()/asinhf()/asinhl()函数：求反双曲正弦值</li>
<li>acos()/acosf()/acosl()函数：求反余弦值</li>
<li>acosh()/acoshf()/acoshl()函数：求反双曲余弦值</li>
<li>atan()/atanf()/atanl()函数：求反正切值</li>
<li>atan2()/atan2f()/atanl()函数：求坐标值的反正切值</li>
<li>atanh()/atanhf()/atanhl()函数：求反双曲正切值</li>
</ul>
<h4 id="指数和对数运算"><a href="#指数和对数运算" class="headerlink" title="指数和对数运算"></a>指数和对数运算</h4><ul>
<li>pow()/powf()/powl函数：求n的m次方的值</li>
<li>exp()/expf()/expl()函数：求e的x次方的值</li>
<li>exp2()/exp2f()/exp2l()函数：2的x的次方的值</li>
<li>log()/logf()/logl()函数：求以e为底的对数值</li>
<li>log10()/log10f()/log10l()函数：求以10为底的对数值</li>
</ul>
<h2 id="Cocoa的Foundation框架篇"><a href="#Cocoa的Foundation框架篇" class="headerlink" title="Cocoa的Foundation框架篇"></a>Cocoa的Foundation框架篇</h2><h4 id="整型对象"><a href="#整型对象" class="headerlink" title="整型对象　"></a>整型对象　</h4><ul>
<li>numberWithShort:方法：创建短整型数字对象　</li>
<li>numberWithUnsignedShort:方法：创建无符号短整型数字对象　</li>
<li>numberWithInteger:方法：创建整型数字对象　</li>
<li>numberWithUnsignedInteger:方法：创建无符号整型数字对象　</li>
<li>numberWithInt:方法：创建整型数字对象　</li>
<li>numberWithUnsignedInt:方法：创建无符号整型数字对象　</li>
<li>numberWithLong:方法：创建并初始化长整型数字对象　</li>
<li>numberWithUnsignedLong:方法：创建并初始化无符号长整型数字对象　</li>
<li>numberWithLongLong:方法：创建并初始化长长整型数字对象　</li>
<li>numberWithUnsignedLongLong:方法：创建并初始化无符号长长整型对象　</li>
<li>initWithShort:方法：初始化短整型数字对象　</li>
<li>initWithUnsignedShort:方法：初始化无符号短整型数字对象　</li>
<li>initWithInteger:方法：初始化整型数字对象　</li>
<li>initWithUnsignedInteger:方法：初始化无符号整型数字对象　</li>
<li>initWithInt:方法：初始化整型数字对象　</li>
<li>initWithUnsignedInt:方法：初始化无符号整型数字对象　</li>
<li>initWithLong:方法：初始化长整型数字对象　</li>
<li>initWithUnsignedLong:方法：初始化无符号长整型数字对象　</li>
<li>initWithLongLong:方法：初始化长长整型数字对象　</li>
<li>initWithUnsignedLongLong:方法：初始化无符号长长整型数字对象　</li>
<li>shortValue:方法：取短整型数字对象的值　</li>
<li>unsignedShortValue:方法：取无符号短整型数字对象的值　</li>
<li>integerValue:方法：取整型数字对象的值　</li>
<li>unsignedIntegerValue:方法：取无符号整型数字对象的值　</li>
<li>intValue:方法：取整型数字对象的值　</li>
<li>unsignedIntValue:方法：取无符号整型数字对象的值　</li>
<li>longValue:方法：取长整型数字对象的值　</li>
<li>unsignedLongValue:方法：取无符号长整型数字对象的值　</li>
<li>longlongValue:方法：取长长整型数字对象的值　</li>
<li>unsignedLongLongValue:方法：取无符号长长整型数字对象的值</li>
</ul>
<h4 id="字符型对象"><a href="#字符型对象" class="headerlink" title="字符型对象"></a>字符型对象</h4><ul>
<li>numberWithChar:方法：创建并初始化字符型数字对象　</li>
<li>numberWithUnsignedChar:方法：创建并初始化无符号字符型数字对象　</li>
<li>initWithChar:方法：初始化字符型对象　</li>
<li>initWithUnsignedChar:方法：初始化无符号字符型对象　</li>
<li>charValue:方法：取字符型数字对象的值　</li>
<li>unsignedCharValue:方法：取无符号字符型数字对象的值</li>
</ul>
<h4 id="单精度型对象"><a href="#单精度型对象" class="headerlink" title="单精度型对象"></a>单精度型对象</h4><ul>
<li>numberWithFloat:方法：创建并初始化单精度型数字对象　</li>
<li>initWithFloat:方法：初始化单精度型数字对象　</li>
<li>floatValue:方法：取单精度型数字对象的值</li>
</ul>
<h4 id="双精度型对象"><a href="#双精度型对象" class="headerlink" title="双精度型对象"></a>双精度型对象</h4><ul>
<li>numberWithDouble:方法：创建并初始化一个双精度型数字对象　</li>
<li>initWithDouble:方法：初始化双精度型数字对象　</li>
<li>doubleValue:方法：取双精度型数字对象的值</li>
</ul>
<h4 id="布尔型对象"><a href="#布尔型对象" class="headerlink" title="布尔型对象"></a>布尔型对象</h4><ul>
<li>numberWithBool:方法：创建并初始化布尔型数字对象　</li>
<li>initWithBool:方法：初始化布尔类型对象　</li>
<li>boolValue:方法：取布尔型数字对象的值</li>
</ul>
<h4 id="数字对象通用方法"><a href="#数字对象通用方法" class="headerlink" title="数字对象通用方法"></a>数字对象通用方法</h4><ul>
<li>isEqualToNumber:方法：比较两对象值是否相等　</li>
<li>compare:方法：比较值的大小</li>
</ul>
<h3 id="字符串对象-NSString"><a href="#字符串对象-NSString" class="headerlink" title="字符串对象(NSString)　"></a>字符串对象(NSString)　</h3><h4 id="创建及初始化"><a href="#创建及初始化" class="headerlink" title="创建及初始化　"></a>创建及初始化　</h4><ul>
<li>string:方法：创建字符串　</li>
<li>stringWithstring:方法：用字符串来创建字符串　</li>
<li>stringWithCstring:方法：创建C字符串　</li>
<li>stringWithFormat:方法：创建NSLog()格式的字符串　</li>
<li>stringWithContentsOfFile:方法：将创建的字符串设置为指定文件的内容　</li>
<li>stringWithContentsOfURL:方法：将创建字符串设置为url的内容　</li>
<li>stringWithUTF8String:方法：将创建的字符串转换为UTF8字符串　</li>
<li>init:方法：初始化字符串　</li>
<li>initWithString:方法：用字符串来初始化字符串　</li>
<li>initWithCString:方法：初始化字符串　</li>
<li>initWithFormat:方法：用NSLog()格式初始化字符串　</li>
<li>initWithContentsOfFile:方法：将初始化的字符串设置为指定文件的内容　</li>
<li>initWithContentsOfURL:方法：将初始化的字符串设置为url的内容　</li>
<li>initWithUTF8String:方法：将初始化的字符串转换为UTF8字符串</li>
</ul>
<h4 id="判断和比较"><a href="#判断和比较" class="headerlink" title="判断和比较　"></a>判断和比较　</h4><ul>
<li>isEqualTostring:方法：比较字符串是否相等　</li>
<li>hasPrefix:方法：判断字符串是否以某个字符开始　</li>
<li>hasSuffix:方法：判断字符串是否以某个字符结束　</li>
<li>compare:方法：比较字符串的大小　</li>
<li>caseInsensitiveCompare:方法：不考虑大小写的比较大小</li>
</ul>
<h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换　"></a>大小写转换　</h4><ul>
<li>uppercaseString:方法：小写字母转为大写字母　</li>
<li>lowercaseString:方法：大写字母转为小写字母　</li>
<li>capitalizedString:方法：将每个单词的首字母大写</li>
</ul>
<h4 id="截取"><a href="#截取" class="headerlink" title="截取　"></a>截取　</h4><ul>
<li>substringToIndex:方法：从字符串的开头一直截取到指定的位置　</li>
<li>substringFromIndex:方法：从指定位置开始截取字符串直到结束　</li>
<li>substringWithRange:方法：根据指定范围返回子字符串　</li>
<li>characterAtIndex:方法：返回索引号所在字符串中的字符</li>
</ul>
<h4 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型　"></a>转换类型　</h4><ul>
<li>doubleValue:/floatValue:方法：返回转换为浮点类型的值　</li>
<li>intValue:方法：返回转换为整型的值　</li>
<li>boolValue:方法：返回转换为布尔类型的值</li>
</ul>
<h4 id="对文件的处理"><a href="#对文件的处理" class="headerlink" title="对文件的处理　"></a>对文件的处理　</h4><ul>
<li>stringByAppendingPathExtension:方法：为文件添加扩展名　</li>
<li>pathExtension:方法：获取文件扩展名　</li>
<li>stringByDeletingPathExtension:方法：删除扩展名　</li>
<li>writeToFile:方法：将字符串写入到文件　</li>
<li>writeToURL:方法：将字符串写入到url中　</li>
<li>stringByExpandingTildeInPath:方法：将“～”替换成系统的主目录　</li>
<li>stringByAbbreviatingWithTildeInPath:方法：将系统主目录替换为“～”　</li>
<li>lastPathComponent:方法：获取路径中的文件名　</li>
<li>stringByDeletingLastPathComponent:方法：获取路径中文件所在的位置　</li>
<li>stringByAppendingPathComponent:方法：组合位置和文件名　</li>
<li>isAbsolutePath:方法：判断绝对路径</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他　"></a>其他　</h4><ul>
<li>length:方法：求字符串的长度　</li>
<li>stringByAppendingString:方法：字符串后面增加一个新字符串　</li>
<li>rangeOfString:方法：查找字符串中是否包含其他字符串　</li>
<li>stringByTrimmingCharactersInSet:方法：去除空格或回车</li>
</ul>
<h4 id="可变字符串-NSMutableString"><a href="#可变字符串-NSMutableString" class="headerlink" title="可变字符串　(NSMutableString)"></a>可变字符串　(NSMutableString)</h4><ul>
<li>stringWithCapacity:方法：按照固定长度生成空字符串　</li>
<li>initWithCapacity:方法：初始化一个固定长度的字符串　</li>
<li>appendString:方法：在字符串的末尾附加另一个字符串　</li>
<li>appendFormat:方法：附加一个格式化字符串　</li>
<li>SetString:方法：将字符串设置为规定的内容　</li>
<li>insertString:方法：在指定位置插入字符串　</li>
<li>deleteCharactersInRange:方法：删除指定范围的字符串　</li>
<li>replaceCharactersInRange:方法：使用字符串代替指定范围的字符串　</li>
<li>replaceOccurrencesOfString:方法：替换　将字符串中的某个字全部替换成别一个</li>
<li>stringByReplacingOccurrencesOfString:方法；将字符串中的某个字全部替换成别一个字</li>
</ul>
<h3 id="数组对象-NSArray"><a href="#数组对象-NSArray" class="headerlink" title="数组对象(NSArray)　"></a>数组对象(NSArray)　</h3><h4 id="创建及初始化-1"><a href="#创建及初始化-1" class="headerlink" title="创建及初始化　"></a>创建及初始化　</h4><ul>
<li>array:方法：创建数组　</li>
<li>arrayWithArray:方法：通过一个数组创建另一个数组　</li>
<li>arrayWithContentsOfFile:方法：创建数组将内容设置为指定文件内容　</li>
<li>arrayWithContentsOfURL:方法：创建数组将内容设置为url指定内容　</li>
<li>arrayWithObject:方法：创建具有一个元素的数组　</li>
<li>arrayWithObjects:方法：创建具有多个元素的数组　</li>
<li>init:方法：初始化数组　</li>
<li>initWithArray:方法：用数组初始化数组　</li>
<li>initWithContentsOfFile:方法：初始化数组将内容设置为指定文件内容　</li>
<li>initWithContentsOfURL:方法：初始化数组将内容设置为url指定内容　</li>
<li>initWithObjects:方法：初始化具有多个元素的数组</li>
</ul>
<h4 id="数组元素的操作"><a href="#数组元素的操作" class="headerlink" title="数组元素的操作　"></a>数组元素的操作　</h4><ul>
<li>containsObject:方法：判断数组中是否包含某个元素　</li>
<li>count:方法：计算元素个数　</li>
<li>firstObjectCommonWithArray:方法：获取首元素　</li>
<li>lastObject:方法：获取最后一个元素　</li>
<li>objectAtIndex:方法：获取在某个位置的数组元素　</li>
<li>objectAtIndexs:方法：获取数组元素　</li>
<li>arrayByAddingObject:方法：在数组末尾添加元素　</li>
<li>arrayByAddingObjectsFromArray:方法：在数组的末尾添加另一个数组　</li>
<li>subarrayWithRange:方法：数组的一部分创建数组　</li>
<li>isEqualToArray:方法：比较数组是否相等　</li>
<li>indexOfObject:方法：返回元素所在的位置　</li>
<li>indexOfObjectIdenticalTo:方法：返回元素所在的位置　</li>
<li>componentsJoinedByString:方法：数组转换为字符串　</li>
<li>componentsSeparatedByString:方法：字符串转换为数组　</li>
<li>sortedArrayHint:方法：数组转换为数据对象　</li>
<li>writeToFile:方法：将数组中的内容写入到文件　</li>
<li>writeToUrl:方法：将数组中的内容写入到url　</li>
<li>objectEnumerator:方法：数组元素从前向后访问　</li>
<li>reverseObjectEnumerator:方法：数组元素从后向前访问　</li>
<li>pathsMatchingExtensions:方法：查看某文件夹下的东西　</li>
<li>sortedArrayUsingFunction:方法：实现数组元素的简单排序　</li>
</ul>
<h4 id="可变数组"><a href="#可变数组" class="headerlink" title="可变数组　"></a>可变数组　</h4><ul>
<li>arrayWithCapacity:方法：创建一个具有固定长度的可变数组　</li>
<li>initWithCapacity:方法：初始化一个具有固定长度的可变数组　</li>
<li>addObject:方法：添加数组元素　</li>
<li>addObjectsFromArray:方法：用数组创建可变数组　</li>
<li>removeObject:方法：删除指定的元素　</li>
<li>removeAllObjects:方法：删除可变数组中的所有元素　</li>
<li>removeLastObject:方法：删除可变数组中的最后一个元素　</li>
<li>removeObjectAtIndex:方法：删除指定位置的元素　</li>
<li>removeObjectsAtIndex:方法：删除可变数组中的元素　</li>
<li>removeObjectsInRange:方法：删除某个范围内的可变数组中的元素　</li>
<li>removeObjectsInArray:方法：删除与另一个数组相同的元素　</li>
<li>replaceObjectAtIndex:方法：替换可变数组中某一位置的元素　</li>
<li>replaceObjectsAtIndexes:方法：替换可变数组中的多个元素　</li>
<li>replaceObjectsInRange:方法：替换某一范围的数组元素　</li>
<li>insertObject:方法：在某一位置插入数组元素　</li>
<li>insertObjects:方法：在某一位置或范围插入另一数组元素　</li>
<li>exchangeObjectAtIndex:方法：交换两个元素　</li>
<li>setArray:方法：设置可变数组中内容</li>
</ul>
<h3 id="字典对象-NSDictionary"><a href="#字典对象-NSDictionary" class="headerlink" title="字典对象(NSDictionary)　"></a>字典对象(NSDictionary)　</h3><h4 id="创建及初始化-2"><a href="#创建及初始化-2" class="headerlink" title="创建及初始化　"></a>创建及初始化　</h4><ul>
<li>dictionary:方法：创建字典　</li>
<li>dictionaryWithContentsOfFile:方法：将创建的字典内容设置为指定文件内容　</li>
<li>dictionaryWithContentsOfURL:方法：将创建的字典内容设置为指定url内容　</li>
<li>dictionaryWithDictionary:方法：用字典创建字典　</li>
<li>dictionaryWithObject:方法：创建具有一个键-值的字典　</li>
<li>dictionaryWithObjects:方法：创建具有多个键-值的字典　</li>
<li>dictionaryWithObjectsAndKeys:方法：创建具有多个键-值的字典　</li>
<li>init:方法：初始化字典　</li>
<li>initWithContentsOfFile:方法：将初始化的字典内容设置为指定文件内容　</li>
<li>initWithContentsOfURL:方法：将初始化的字典内容设置为指定url内容　</li>
<li>initWithDictionary:方法：用字典初始化字典　</li>
<li>initWithObjects:方法：初始化具有多个键-值的字典　</li>
<li>initWithObjectsAndKeys:方法：初始化具有多个键-值的字典</li>
</ul>
<h4 id="访问键-值"><a href="#访问键-值" class="headerlink" title="访问键-值　"></a>访问键-值　</h4><ul>
<li>objectForKey:方法：返回键的值　</li>
<li>allKeys:方法：返回所有的键　</li>
<li>allValue:方法：返回所有的值　</li>
<li>allKeysForObject:方法：返回值所对应的键　</li>
<li>keyEnumerator:方法：将字典中所有的键放到NSEnumerator对象中　</li>
<li>objectEnumerator:方法：将字典中所有的值放到一个NSEnumerator对象中</li>
</ul>
<h4 id="文件的处理"><a href="#文件的处理" class="headerlink" title="文件的处理　"></a>文件的处理　</h4><ul>
<li>fileCreationDate:方法：文件创建日期　</li>
<li>fileModificationDate:方法：文件修改的日期　</li>
<li>fileSize:方法：文件的大小　</li>
<li>fileExtensionHidden:方法：扩展名是否隐藏　</li>
<li>fileType:方法：文件的类型　</li>
<li>fileGroupOwnerAccountID:方法：文件所属组标识　</li>
<li>fileGroupOwnerAccountName:方法：文件所属组名　</li>
<li>fileHFSCreatorCode:方法：文件分层系统创建者编码　</li>
<li>fileHFSTypeCode:方法：文件分层系统类型编码　</li>
<li>fileIsAppendOnly:方法：文件是否只读　</li>
<li>fileIsImmutable:方法：文件是否可变　</li>
<li>fileOwnerAccountID:方法：文件所属人标识　</li>
<li>fileOwnerAccountName:方法：文件所属人　</li>
<li>filePosixPermissions:方法：权限　</li>
<li>fileSystemFileNumber:方法：文件系统的文件编号　</li>
<li>fileSystemNumber:方法：文件系统编号　</li>
<li>writeToFile:方法：字典内容写入文件中　</li>
<li>writeToURL:方法：字典内容写入url中</li>
</ul>
<h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他　"></a>其他　</h4><ul>
<li>count:方法：字典键-值个数　</li>
<li>isEqualToDictionary:方法：判断字典是否相等</li>
</ul>
<h4 id="可变字典"><a href="#可变字典" class="headerlink" title="可变字典　"></a>可变字典　</h4><ul>
<li>dictionaryWithCapacity:方法：创建固定长度的可变字典　</li>
<li>initWithCapacity:方法：初始化固定长度的可变字典　</li>
<li>setObject:方法：设置键-值　</li>
<li>setDictionary:方法：用字典设置可变字典中的内容　</li>
<li>removeAllObjects:方法：删除所有的内容　</li>
<li>removeObjectForKey:方法：删除键所对应的值　</li>
<li>removeObjectsForKeys:方法：删除多个键所有的值　</li>
<li>addEntriesFromDictionary:方法：将字典中的键-值添加到可变字典中</li>
</ul>
<h3 id="集合-NSSet"><a href="#集合-NSSet" class="headerlink" title="集合(NSSet)　"></a>集合(NSSet)　</h3><h4 id="创建以初始化"><a href="#创建以初始化" class="headerlink" title="创建以初始化　"></a>创建以初始化　</h4><ul>
<li>set:方法：创建集合　</li>
<li>setWithArray:方法：用数组创建集合　</li>
<li>setWithObject:方法：创建具有一个元素的集合　</li>
<li>setWithObjects:方法：创建具有多个元素的集合　</li>
<li>setWithSet:方法：集合创建集合　</li>
<li>init:方法：初始化集合　</li>
<li>initWithArray:方法：用数组初始化集合　</li>
<li>initWithObjects:方法：初始化具有多个元素的集合　</li>
<li>initWithSet:方法：集合初始化集合</li>
</ul>
<h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素　"></a>访问元素　</h4><ul>
<li>objectEnumerator:方法：将所有集合中的元素放到NSEnumerator对象中　</li>
<li>allObjects:方法：返回集合中所有的元素　</li>
<li>anyObject:方法：返回任意一个元素　</li>
<li>count:方法：返回元素个数</li>
</ul>
<h4 id="判断比较"><a href="#判断比较" class="headerlink" title="判断比较　"></a>判断比较　</h4><ul>
<li>containsObject:方法：判断集合中是否包含某个元素　</li>
<li>member:方法：判断集合中是否包含某个元素并返回　</li>
<li>isSubsetOfSet:方法：判断一个集合是否是一个集合的子集　</li>
<li>intersectsSet:方法：判断交集　</li>
<li>isEqualToSet:方法：判断集合是否相等</li>
</ul>
<h4 id="可变集合"><a href="#可变集合" class="headerlink" title="可变集合　"></a>可变集合　</h4><ul>
<li>setWithCapacity:方法：创建具有固定长度的可变集合　</li>
<li>initWithCapacity:方法：初始化具有固定长度的可变集合　</li>
<li>setSet:方法：通过集合设置可变集合的内容　</li>
<li>addObject:方法：添加元素　</li>
<li>addObjectsFromArray:方法：添加数组中的元素　</li>
<li>removeAllObjects:方法：删除所有元素　</li>
<li>removeObject:方法：删除指定的元素　</li>
<li>unionSet:方法：添加集合元素　</li>
<li>minusSet:方法：去除另一个集合中的元素　</li>
<li>intersectSet:方法：做交集</li>
</ul>
<h3 id="文件-NSFileManager、NSFileHandle"><a href="#文件-NSFileManager、NSFileHandle" class="headerlink" title="文件(NSFileManager、NSFileHandle)"></a>文件(NSFileManager、NSFileHandle)</h3><h4 id="创建文件管理器"><a href="#创建文件管理器" class="headerlink" title="创建文件管理器　"></a>创建文件管理器　</h4><ul>
<li>defaultManger:方法：创建文件管理器</li>
</ul>
<h4 id="文件与目录的操作"><a href="#文件与目录的操作" class="headerlink" title="文件与目录的操作　　"></a>文件与目录的操作　　</h4><ul>
<li>createFileAtPath:方法：创建文件　</li>
<li>copyItemAtPath:方法：复制文件　</li>
<li>moveItemAtPath:方法：移动文件　</li>
<li>removeItemFileAtPath:方法：删除文件　</li>
<li>attributesOfItemAtPath:方法：获取文件的属性　</li>
<li>setAttributes:方法：更改属性　</li>
<li>currentDirectoryPath:方法：获取当前的目录　</li>
<li>changeCurrentDirectoryPath:方法：更改目录　</li>
<li>createDirectoryAtPath:方法：创建目录</li>
</ul>
<h4 id="获取文件和目录信息"><a href="#获取文件和目录信息" class="headerlink" title="获取文件和目录信息　"></a>获取文件和目录信息　</h4><ul>
<li>contentsAtPath:方法：获取文件中的信息　</li>
<li>enumeratorAtPath:方法：枚举目录　</li>
<li>contentsOfDirectoryAtPath:方法：列举目录</li>
</ul>
<h4 id="判断文件"><a href="#判断文件" class="headerlink" title="判断文件　"></a>判断文件　</h4><ul>
<li>fileExistsAtPath:方法：判断文件是否存在　</li>
<li>isReadableFile:方法：判断是否能进行读取操作　</li>
<li>isWritableFileAtPath:方法：判断是否能进行写入操作　</li>
<li>isDeletableFileAtPath:方法：判断是否可删除　</li>
<li>isExecutableFileAtPath:方法：判断是否可以执行　</li>
<li>contentsEqualAtPath:方法：判断是否相等</li>
</ul>
<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取　"></a>文件读取　</h4><ul>
<li>init:方法：初始化文件读写对象　</li>
<li>fileHandleForReadingAtPath:方法：读取时打开文件　</li>
<li>fileHandleForWritingAtPath:方法：写入时打开文件　</li>
<li>fileHandleForUpdatingAtPath:方法：更新时打开文件　</li>
<li>writeData:方法：数据写入文件　</li>
<li>readDataToEndOfFile:方法：读取数据　</li>
<li>readDataOfLength:方法：读取固定大小的内容　</li>
<li>offsetInFile:方法：获取当前偏移量　</li>
<li>seekToFileOffset:方法：设置当前的偏移量　</li>
<li>seekToEndOfFile:方法：将偏移量定位到文件尾　</li>
<li>truncateFileAtOffset:方法：设置字节　</li>
<li>availableData:方法：返回可用数据　</li>
<li>closeFile:方法：关闭文件</li>
</ul>
<h4 id="目录工具函数"><a href="#目录工具函数" class="headerlink" title="目录工具函数　"></a>目录工具函数　</h4><ul>
<li>NSUserName()函数：返回登录名　</li>
<li>NSFullUserName()函数：返回完整用户名　</li>
<li>NSHomeDirectory()函数：返回路径　</li>
<li>NSHomeDirectoryForUser()函数：返回用户的主目录　</li>
<li>NSTemporaryDirectory()函数：返回临时文件的路径目录</li>
</ul>
<h3 id="时间和日历-NSDate、NSDateFormatter、NSCalendarDate、NSCalendar、NSTimeZone、NSTimer"><a href="#时间和日历-NSDate、NSDateFormatter、NSCalendarDate、NSCalendar、NSTimeZone、NSTimer" class="headerlink" title="时间和日历(NSDate、NSDateFormatter、NSCalendarDate、NSCalendar、NSTimeZone、NSTimer)　"></a>时间和日历(NSDate、NSDateFormatter、NSCalendarDate、NSCalendar、NSTimeZone、NSTimer)　</h3><h4 id="时间的创建及初始化"><a href="#时间的创建及初始化" class="headerlink" title="时间的创建及初始化　"></a>时间的创建及初始化　</h4><ul>
<li>date:方法：创建时间　</li>
<li>dateWithString:方法：用字符串创建时间　</li>
<li>dateWithNaturalLanguageString:方法：用字符串创建时间　</li>
<li>dateWithTimeInterval:方法：用时间间隔创建时间　</li>
<li>dateWithTimeIntervalSince1970:方法：用时间间隔创建时间　</li>
<li>dateWithTimeIntervalSinceNow:方法：用时间间隔创建时间　</li>
<li>dateWithTimeIntervalSinceReferenceDate:方法：用时间间隔创建时间　</li>
<li>init:方法：初始化时间　</li>
<li>initWithString:方法：用字符串初始化时间　</li>
<li>initWithTimeInterval:方法：用时间间隔初始化时间　</li>
<li>initWithTimeIntervalSince1970:方法：用时间间隔初始化时间　</li>
<li>initWithTimeIntervalSinceNow:方法：用时间间隔初始化时间　</li>
<li>initWithTimeIntervalSinceReferenceDate:方法：用时间间隔初始化时间</li>
</ul>
<h4 id="时间的比较"><a href="#时间的比较" class="headerlink" title="时间的比较　"></a>时间的比较　</h4><ul>
<li>isEqualToDate:方法：比较是否相等　</li>
<li>compare:方法：比较时间　</li>
<li>arlierDate:方法：比较哪个时间早　</li>
<li>laterDate:方法：比较哪个时间晚</li>
</ul>
<h4 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间　"></a>获取时间　</h4><ul>
<li>dateByAddingTimeInterval:方法：获取经过时间间隔后的时间　</li>
<li>distantPast:方法：获取过去的时间　</li>
<li>distantFuture:方法：获取将来的时间　</li>
<li>timeIntervalSinceDate:方法：获取两时间的差值　</li>
<li>timeIntervalSinceNow:方法：获取两时间的差值　</li>
<li>timeIntervalSince1970:方法：获取两时间的差值　</li>
<li>timeIntervalSinceReferenceDate:方法：获取两时间的差值</li>
</ul>
<h4 id="时间和字符串的相互转换"><a href="#时间和字符串的相互转换" class="headerlink" title="时间和字符串的相互转换　"></a>时间和字符串的相互转换　</h4><ul>
<li>init:方法：初始化用于时间转换的对象　</li>
<li>setDateFormat:方法：设置格式　</li>
<li>initWithDateFormat:方法：初始化用于时间转换的对象</li>
</ul>
<h4 id="日历时间的创建及初始化"><a href="#日历时间的创建及初始化" class="headerlink" title="日历时间的创建及初始化　"></a>日历时间的创建及初始化　</h4><ul>
<li>calendarDate:方法：创建日历时间　</li>
<li>dateWithYear:方法：创建日历时间并设置内容　</li>
<li>dateWithString:方法：创建日历时间并设置内容及格式　</li>
<li>init:方法：初始化日历时间　</li>
<li>initWithYear:方法：初始化日历时间并设置内容　</li>
<li>initWithString:方法：初始化日历时间并设置内容及格式</li>
</ul>
<h4 id="获取日历时间信息"><a href="#获取日历时间信息" class="headerlink" title="获取日历时间信息　"></a>获取日历时间信息　</h4><ul>
<li>dayOfWeek:方法：获取天数　</li>
<li>dayOfMonth:方法：获取天数　</li>
<li>dayOfYear:方法：获取天数　</li>
<li>hourOfDay:方法：获取时间　</li>
<li>minuteOfHour:方法：获取时间　</li>
<li>secondOfMinute:方法：获取时间　</li>
<li>monthOfYear:方法：获取时间　</li>
<li>yearOfCommonEra:方法：获取年　</li>
<li>dayOfCommonEra:方法：获取天数　</li>
<li>calendarFormat:方法：获取日历的格式　</li>
<li>timeZone:方法：获取时区　</li>
<li>dateByAddingYears:方法：获取日期时间</li>
</ul>
<h4 id="设置日历时间"><a href="#设置日历时间" class="headerlink" title="设置日历时间　"></a>设置日历时间　</h4><ul>
<li>setCalendarFormat:方法：设置日历的格式　</li>
<li>setTimeZone:方法：设置时区</li>
</ul>
<h4 id="日历的使用"><a href="#日历的使用" class="headerlink" title="日历的使用　"></a>日历的使用　</h4><ul>
<li>currentCalendar:方法：创建日历　</li>
<li>autoupdatingCurrentCalendar:方法：获取日历　</li>
<li>initWithCalendarIdentifier:方法：初始化日历　</li>
<li>local:方法：获取区域　</li>
<li>firstWeekday:方法：获取每周的第一天　</li>
<li>minimumDaysInFirstWeek:方法：获取天数　</li>
<li>calendarIdentifier:方法：获取日历　</li>
<li>setFirstWeekday:方法：设置每周的第一天　</li>
<li>setMinimumDaysInFirstWeek:方法：设置天数</li>
</ul>
<h4 id="时区的使用"><a href="#时区的使用" class="headerlink" title="时区的使用　"></a>时区的使用　</h4><ul>
<li>timeZoneWithName:方法：用已知时区创建时区　</li>
<li>timeZoneWithAbbreviation:方法：用已知时区创建时区　</li>
<li>timeZoneForSecondsFromGMT:方法：用偏移创建时区　</li>
<li>initWithName:方法：用已知时区初始化时区　</li>
<li>systemTimeZone:方法：获取系统的时区　</li>
<li>localTimeZone:方法：获取本地时区　</li>
<li>knownTimeZoneNames:方法：返回所有时区　</li>
<li>name:方法：获取名称　</li>
<li>abbreviation:方法：获取缩写　</li>
<li>secondsFromGMT:方法：获取秒数</li>
</ul>
<h4 id="定时器的使用"><a href="#定时器的使用" class="headerlink" title="定时器的使用　"></a>定时器的使用　</h4><ul>
<li>timerWithTimeInterval:方法：创建定时器　</li>
<li>initWithFireDate:方法：初始化定时器　</li>
<li>setFireDate:方法：设置时间　</li>
<li>fireDate:方法：返回时间　</li>
<li>invalidate:方法：使定时器无效　</li>
<li>isValid:方法：判断是否有效</li>
</ul>
<h3 id="进程、线程、锁-NSProcessInfo、NSThread、NSLock"><a href="#进程、线程、锁-NSProcessInfo、NSThread、NSLock" class="headerlink" title="进程、线程、锁(NSProcessInfo、NSThread、NSLock)　"></a>进程、线程、锁(NSProcessInfo、NSThread、NSLock)　</h3><h4 id="使用进程"><a href="#使用进程" class="headerlink" title="使用进程　"></a>使用进程　</h4><ul>
<li>processInfo:方法：创建进程　</li>
<li>init:方法：初始化进程　</li>
<li>processName:方法：获取进程的名称　</li>
<li>environment:方法：获取变量/值　</li>
<li>globallyUniqueString:方法：生成字符串　</li>
<li>operatingSystem:方法：获取操作系统信息　</li>
<li>operatingSystemName:方法：获取操作系统的名称　</li>
<li>operatingSystemVersionString:方法：获取操作系统的版本信息　</li>
<li>processIdentifier:方法：获取进程的标识符　</li>
<li>arguments:方法：获取进程的参数　</li>
<li>hostName:方法：获取主机名称　</li>
<li>setProcessName:方法：设置进程的名称　</li>
<li>processorCount:方法：获取CPU的数目</li>
</ul>
<h4 id="线程的创建及初始化"><a href="#线程的创建及初始化" class="headerlink" title="线程的创建及初始化　"></a>线程的创建及初始化　</h4><ul>
<li>detachNewThreadSelector:方法：创建线程　</li>
<li>init:方法：初始化线程　</li>
<li>initWithTarget:方法：初始化线程</li>
</ul>
<h4 id="执行线程"><a href="#执行线程" class="headerlink" title="执行线程　"></a>执行线程　</h4><ul>
<li>start:方法：开启线程　</li>
<li>cancel:方法：取消线程　</li>
<li>exit:方法：结束线程</li>
</ul>
<h4 id="获取与设置线程"><a href="#获取与设置线程" class="headerlink" title="获取与设置线程　"></a>获取与设置线程　</h4><ul>
<li>currentThread:方法：获取当前线程　</li>
<li>threadPriority:方法：获取属性值　</li>
<li>setThreadPriority:方法：设置属性值　</li>
<li>name:方法：获取名称　</li>
<li>setName:方法：设置名称　</li>
<li>stackSize:方法：获取堆栈　</li>
<li>setStackSize:方法：设置堆栈</li>
</ul>
<h4 id="判断线程"><a href="#判断线程" class="headerlink" title="判断线程　"></a>判断线程　</h4><ul>
<li>isMultiThreaded:方法：判断线程是否为主线程　</li>
<li>isExecuting:方法：判断线程是否在执行　</li>
<li>isCancelled:方法：判断线程是否取消　</li>
<li>isFinished:方法：判断线程是否结束</li>
</ul>
<h4 id="使用互斥锁"><a href="#使用互斥锁" class="headerlink" title="使用互斥锁　"></a>使用互斥锁　</h4><ul>
<li>lock:方法：调用锁　</li>
<li>unlock:方法：关闭锁　</li>
<li>trylock:方法：锁定锁　</li>
<li>lockBeforeDate:方法：在一定时间内获取锁</li>
</ul>
<h4 id="使用递归锁"><a href="#使用递归锁" class="headerlink" title="使用递归锁　"></a>使用递归锁　</h4><ul>
<li>lock:方法：调用锁　</li>
<li>unlock:方法：关闭锁　</li>
<li>tryLock:方法：获取锁　</li>
<li>lockBeforeDate:方法：在一定时间内获取锁</li>
</ul>
<h4 id="使用条件锁"><a href="#使用条件锁" class="headerlink" title="使用条件锁　"></a>使用条件锁　</h4><ul>
<li>initWithCondition:方法：初始化条件锁　</li>
<li>condition:方法：获取条件　</li>
<li>lockWhenCondition:方法：在条件允许下调用锁　</li>
<li>unlockWithCondition:方法：在条件允许下关闭锁　</li>
<li>tryLockWhenCondition:方法：在条件允许下获取锁　</li>
<li>lockWhenCondition:方法：在条件和时间允许下获取锁　</li>
<li>tryLock:方法：获取锁　</li>
<li>lockBeforeDate:方法：在一定时间下获取锁　</li>
<li>lock:方法：调用锁　</li>
<li>unlock:方法：关闭锁</li>
</ul>
<p>　</p>
<h3 id="数据对象及归档-NSData、NSKeyedArchiver"><a href="#数据对象及归档-NSData、NSKeyedArchiver" class="headerlink" title="数据对象及归档(NSData、NSKeyedArchiver)　"></a>数据对象及归档(NSData、NSKeyedArchiver)　</h3><h4 id="数据对象的创建及初始化"><a href="#数据对象的创建及初始化" class="headerlink" title="数据对象的创建及初始化　"></a>数据对象的创建及初始化　</h4><ul>
<li>data:方法：创建数据对象　</li>
<li>dataWithBytes:方法：用已有数据创建数据对象　</li>
<li>dataWithContentsOfFile:方法：将数据对象内容设置为指定文件内容　</li>
<li>dataWithContentsOfURL:方法：将创建对象的内容设置为url指定的内容　</li>
<li>dataWithData:方法：用已有数据对象创建新的数据对象　</li>
<li>init:方法：初始化数据对象　</li>
<li>initWithBytes:方法：用已有数据初始化数据对象　</li>
<li>initWithContentsOfFile:方法：对数据对象初始化并将其设置为指定文件内容　</li>
<li>initWithContentsOfURL:方法：对数据对象初始化并将其设置为指定url内容　</li>
<li>initWithData:方法：用已有数据对象初始化新的数据对象</li>
</ul>
<h4 id="数据对象的使用"><a href="#数据对象的使用" class="headerlink" title="数据对象的使用　"></a>数据对象的使用　</h4><ul>
<li>bytes:方法：将数据对象转换为字符　</li>
<li>dataUsingEncoding:方法：将字符串转换为数据对象　</li>
<li>length:方法：计算数据对象的长度　</li>
<li>isEqualToData:方法：判断两个数据对象是否相等　</li>
<li>subdataWithRange:方法：截取数据对象　</li>
<li>writeToFile:方法：写入文件　</li>
<li>writeToURL:方法：写入url</li>
</ul>
<h4 id="可变数据对象"><a href="#可变数据对象" class="headerlink" title="可变数据对象　"></a>可变数据对象　</h4><ul>
<li>dataWithCapacity:方法：创建一个具有固定空间大小的可变数据对象　</li>
<li>dataWithLength:方法：创建具有固定长度的可变数据对象　</li>
<li>initWithCapacity:方法：初始化具有固定空间大小的可变数据对象　</li>
<li>initWithLength:方法：初始化具有固定长度的可变数据对象　</li>
<li>setData:方法：设置内容　</li>
<li>setLength:方法：设置长度　</li>
<li>appendBytes:方法：添加数据　</li>
<li>appendData:方法：添加数据对象　</li>
<li>mutableBytes:方法：可变数据对象转化为字符　</li>
<li>replaceBytesInRange:方法：替换　</li>
<li>resetBytesInRange:方法：删除</li>
</ul>
<h4 id="归档"><a href="#归档" class="headerlink" title="归档　"></a>归档　</h4><ul>
<li>archiveRootObject:方法：数据归档　</li>
<li>unarchiveObjectWithFile:方法：取消归档　</li>
<li>encodeBool:方法：对布尔类型的数据编码　</li>
<li>decodeBoolForKey:方法：对布尔类型数据解码　</li>
<li>encodeInt:方法：对整型数据编码　</li>
<li>decodeIntForKey:方法：对整型数据解码　</li>
<li>encodeFloat:/encodeDouble:方法：对浮点型数据编码　</li>
<li>decodeFloatForKey:/decodeDoubleForKey:方法：对浮点型数据解码　</li>
<li>encodeObject:方法：对对象进行编码　</li>
<li>decodeObjectForKey:方法：对对象进行解码　</li>
<li>archivedDataWithRootObject:方法：将其他类型的数据进行转换　</li>
<li>initForWritingWithMutableData:方法：初始化　</li>
<li>initForReadingWithData:方法：初始化</li>
</ul>
<h2 id="Cocoa的Application框架篇"><a href="#Cocoa的Application框架篇" class="headerlink" title="Cocoa的Application框架篇"></a>Cocoa的Application框架篇</h2><h3 id="窗口和颜色-NSWindow、NSColor"><a href="#窗口和颜色-NSWindow、NSColor" class="headerlink" title="窗口和颜色(NSWindow、NSColor)　"></a>窗口和颜色(NSWindow、NSColor)　</h3><h4 id="获取窗口信息"><a href="#获取窗口信息" class="headerlink" title="获取窗口信息　"></a>获取窗口信息　</h4><ul>
<li>aspectRatio:方法：获取窗口的纵横比　</li>
<li>orderedIndex:方法：获取索引　</li>
<li>title:方法：获取窗口的标题　</li>
<li>miniwindowTitle:方法：获取窗口最小化后的标题　</li>
<li>frame:方法：获取窗口的位置和大小　</li>
<li>minSize:方法：获取窗口的最小尺寸　</li>
<li>maxSize:方法：获取窗口的最大尺寸　</li>
<li>miniwindowImage:方法：获取窗口最小化后的图片　</li>
<li>backgroundColor:方法：获取窗口的背景颜色　</li>
<li>childWindows:方法：获取子窗口　</li>
<li>alphaValue:方法：获取窗口的透明度值</li>
</ul>
<h4 id="设置窗口"><a href="#设置窗口" class="headerlink" title="设置窗口　"></a>设置窗口　</h4><ul>
<li>setAspectRatio:方法：设置窗口的纵横比　</li>
<li>setIsVisible:方法：设置窗口是否可见　</li>
<li>setTitle:方法：设置窗口标题　</li>
<li>setMiniwindowTitle:方法：设置窗口最小化后的标题　</li>
<li>setIsMiniaturized:方法：设置窗口是否最小化　</li>
<li>setIsZoomed:方法：设置窗口是否最大化　</li>
<li>setFrame:方法：设置窗口的位置和大小　</li>
<li>setFrameOrigin:方法：设置窗口的位置　</li>
<li>setFrameTopLeftPoint:方法：设置窗口的位置　</li>
<li>setMinSize:方法：设置窗口的最小尺寸　</li>
<li>setMaxSize:方法：设置窗口的最大尺寸　</li>
<li>setMiniwindowImage:方法：设置窗口最小化后的图片　</li>
<li>setBackgroundColor:方法：设置窗口的背景颜色　</li>
<li>setCanHide:方法：设置窗口是否可以隐藏　</li>
<li>setAlphaValue:方法：设置窗口的透明度值　</li>
<li>disableFlushWindow:方法：将窗口设置为禁用的　</li>
<li>setHasShadow:方法：设置窗口的阴影</li>
</ul>
<h4 id="判断窗口"><a href="#判断窗口" class="headerlink" title="判断窗口　"></a>判断窗口　</h4><ul>
<li>isVisible:方法：判断窗口是否可见　</li>
<li>isMiniaturized:方法：判断窗口是否最小化　</li>
<li>isZoomed:方法：判断窗口是否最大化　</li>
<li>canHide:方法：判断窗口是否可以隐藏　</li>
<li>hasShadow:方法：判断窗口是否有阴影　</li>
<li>isMiniaturizable:方法：判断窗口是否有最小化按钮　</li>
<li>hasTitleBar:方法：判断窗口是否有工具栏</li>
</ul>
<h4 id="创建自定义颜色对象"><a href="#创建自定义颜色对象" class="headerlink" title="创建自定义颜色对象　"></a>创建自定义颜色对象　</h4><ul>
<li>colorWithCalibratedRed:方法：用标准RGB分量创建颜色对象　</li>
<li>colorWithCalibratedWhite:方法：用标准灰度分量创建颜色对象　</li>
<li>colorWithCalibratedHue:方法：用标准HSB分量创建颜色对象　</li>
<li>colorWithDeviceCyan:方法：用设备CMYB分量创建颜色对象　</li>
<li>colorWithDeviceRed:方法：用设备RGB分量创建颜色对象　</li>
<li>colorWithDeviceWhite:方法：用设备灰度分量创建颜色对象　</li>
<li>colorWithDeviceHue:方法：用设备HSB分量创建颜色对象　</li>
<li>colorWithPatternImage:方法：用图像创建颜色对象</li>
</ul>
<h4 id="创建颜色对象"><a href="#创建颜色对象" class="headerlink" title="创建颜色对象　"></a>创建颜色对象　</h4><ul>
<li>redColor:方法：用红色创建颜色对象　</li>
<li>greenColor:方法：用绿色创建颜色对象　</li>
<li>blueColor:方法：用蓝色创建颜色对象　</li>
<li>cyanColor:方法：用青色创建颜色对象　</li>
<li>magentaColor:方法：用紫红色创建颜色对象　</li>
<li>yellowColor:方法：用黄色创建颜色对象　</li>
<li>blackColor:方法：用黑色创建颜色对象　</li>
<li>brownColor:方法：用棕色创建颜色对象　</li>
<li>darkGrayColor:方法：用深灰色创建颜色对象　</li>
<li>grayColor:方法：用灰色创建颜色对象　</li>
<li>lightGrayColor:方法：用浅灰色创建颜色对象　</li>
<li>orangeColor:方法：用橙色创建颜色对象　</li>
<li>purpleColor:方法：用紫色创建颜色对象　</li>
<li>whiteColor:方法：用白色创建颜色对象</li>
</ul>
<h4 id="获取颜色分量"><a href="#获取颜色分量" class="headerlink" title="获取颜色分量　"></a>获取颜色分量　</h4><ul>
<li>redComponent:方法：获取红色的分量　</li>
<li>greenComponent:方法：获取绿色的分量　</li>
<li>blueComponent:方法：获取蓝色的分量　</li>
<li>cyanComponent:方法：获取青色的分量　</li>
<li>magentaComponent:方法：获取紫红色分量　</li>
<li>yellowComponent:方法：获取黄色分量　</li>
<li>blackComponent:方法：获取黑色的分量　</li>
<li>whiteComponent:方法：获取白色的分量　</li>
<li>alphaComponent:方法：获取透明度分量　</li>
<li>hueComponent:方法：获取色调的分量　</li>
<li>saturationComponent:方法：获取饱和度的分量　</li>
<li>brightnessComponent:方法：获取亮度分量　</li>
<li>patternImage:方法：获取图像信息</li>
</ul>
<h3 id="自定义视图-NSView"><a href="#自定义视图-NSView" class="headerlink" title="自定义视图(NSView)　"></a>自定义视图(NSView)　</h3><h4 id="initWithFrame-方法：初始化自定义视图"><a href="#initWithFrame-方法：初始化自定义视图" class="headerlink" title="initWithFrame:方法：初始化自定义视图　"></a>initWithFrame:方法：初始化自定义视图　</h4><h4 id="获取与设置自定义视图信息"><a href="#获取与设置自定义视图信息" class="headerlink" title="获取与设置自定义视图信息　"></a>获取与设置自定义视图信息　</h4><ul>
<li>frame:方法：获取自定义视图的框架　</li>
<li>setFrame:方法：设置自定义视图框架　</li>
<li>frameRotation:方法：获取自定义视图的旋转度数　</li>
<li>setFrameRotation:方法：设置自定义视图旋转度数　</li>
<li>setFrameOrigin:方法：设置自定义视图的位置　</li>
<li>setFrameSize:方法：设置自定义视图的大小　</li>
<li>bounds:方法：获取自定义视图框架　</li>
<li>setBounds:方法：设置自定义视图框架　</li>
<li>boundsRotation:方法：获取自定义视图的旋转度数　</li>
<li>setBoundsRotation:方法：设置自定义视图旋转的度数　</li>
<li>setBoundsOrigin:方法：设置视图的位置　</li>
<li>setBoundsSize:方法：设置视图的大小　</li>
<li>subviews:方法：获取子视图　</li>
<li>setPostsFrameChangedNotifications:方法：设置是否接收视图的变化　</li>
<li>setPostsBoundsChangedNotifications:方法：设置是否接收视图的变化　</li>
<li>printJobTitle:方法：获取输出标题</li>
</ul>
<h4 id="drawRect-方法：绘图"><a href="#drawRect-方法：绘图" class="headerlink" title="drawRect:方法：绘图　"></a>drawRect:方法：绘图　</h4><h4 id="判断自定义视图"><a href="#判断自定义视图" class="headerlink" title="判断自定义视图　"></a>判断自定义视图　</h4><ul>
<li>postsFrameChangedNotifications:方法：判断是否接收视图变换的消息　</li>
<li>postsBoundsChangedNotifications:方法：判断是否接收视图变换的消息　</li>
<li>isFlipped:方法：判断视图是否翻转　</li>
<li>isRotatedFromBase:方法：判断视图是否旋转　</li>
<li>isRotatedOrScaledFromBase:方法：判断视图是否旋转或缩放　</li>
<li>canDraw:方法：判断视图是否绘制　</li>
<li>isOpaque:方法：判断视图是否不透明</li>
</ul>
<h4 id="操作自定义视图"><a href="#操作自定义视图" class="headerlink" title="操作自定义视图　"></a>操作自定义视图　</h4><ul>
<li>addSubview:方法：添加视图　</li>
<li>removeFromSuperview:方法：删除视图　</li>
<li>replaceSubview:方法：替换视图</li>
</ul>
<h3 id="文本框和文本视图-NSTextField、NSTextView"><a href="#文本框和文本视图-NSTextField、NSTextView" class="headerlink" title="文本框和文本视图(NSTextField、NSTextView)　"></a>文本框和文本视图(NSTextField、NSTextView)　</h3><h4 id="获取与设置文本框信息"><a href="#获取与设置文本框信息" class="headerlink" title="获取与设置文本框信息　"></a>获取与设置文本框信息　</h4><ul>
<li>stringValue:方法：获取文本框的字符串　</li>
<li>setStringValue:方法：设置文本框中的字符串　</li>
<li>backgroundColor:方法：获取文本框的背景颜色　</li>
<li>setBackgroundColor:方法：设置文本框的背景颜色　</li>
<li>textColor:方法：获取字符串的颜色　</li>
<li>setTextColor:方法：设置字符串的颜色　</li>
<li>setImportsGraphics:方法：设置是否可以将图像拖到文本框　</li>
<li>setEditable:方法：设置文本框是否可以编译　</li>
<li>bezelStyle:方法：获取文本框边框的风格　</li>
<li>setBezelStyle:方法：设置文本框边框的风格　</li>
<li>setBezeled:方法：设置文本框是否接受bezeled边框　</li>
<li>setBordered:方法：设置文本框是否接受黑边框</li>
</ul>
<h4 id="判断文本框信息"><a href="#判断文本框信息" class="headerlink" title="判断文本框信息　"></a>判断文本框信息　</h4><ul>
<li>importsGraphics:方法：判断是否可以将图像拖到文本框　</li>
<li>isEditable:方法：判断文本框是否可以编辑　</li>
<li>isBezeled:方法：判断文本框是否接受了bezeled边框　</li>
<li>isBordered:方法：判断文本框是否接受了黑边框　</li>
<li>acceptsFirstResponder:方法：判断文本框是否可以编辑</li>
</ul>
<h4 id="initWithFrame-方法：创建并初始化文本视图"><a href="#initWithFrame-方法：创建并初始化文本视图" class="headerlink" title="initWithFrame:方法：创建并初始化文本视图　"></a>initWithFrame:方法：创建并初始化文本视图　</h4><h4 id="获取与设置文本视图信息"><a href="#获取与设置文本视图信息" class="headerlink" title="获取与设置文本视图信息　"></a>获取与设置文本视图信息　</h4><ul>
<li>backgroundColor:方法：获取文本视图的颜色　</li>
<li>setBackgroundColor:方法：设置文本视图的背景颜色　</li>
<li>setImportsGraphics:方法：设置文件是否可以导入到文本视图　</li>
<li>setAcceptsGlyphInfo:方法：设置文本视图是否接受字形信息　</li>
<li>setAlignment:方法：设置文本视图内容的对齐方式　</li>
<li>insertionPointColor:方法：获取插入点的颜色　</li>
<li>setInsertionPointColor:方法：设置插入点的颜色　</li>
<li>setAllowsUndo:方法：设置文本视图是否可以撤销　</li>
<li>selectedTextAttributes:方法：获取用于指示选择的属性　</li>
<li>setSelectedTextAttributes:方法：设置文本视图用于指示选择的属性　</li>
<li>textContainer:方法：获取文本框的文本容器　</li>
<li>acceptableDragTypes:方法：获取文本视图的数据类型　</li>
<li>markedTextAttributes:方法：获取绘制标记的文本属性　</li>
<li>setMarkedTextAttributes:方法：设置绘制标记的文本属性　</li>
<li>setSmartInsertDeleteEnabled:方法：设置选择字符串周围的空间　</li>
<li>markedRange:方法：获取被标记文本的范围　</li>
<li>selectedRange:方法：获取选中文本的范围　</li>
<li>setSelectedRange:方法：设置文本的选中范围　</li>
<li>typingAttributes:方法：获取新文本的属性　</li>
<li>setTypingAttributes:方法：设置新文本的属性</li>
</ul>
<h4 id="判断文本视图的信息"><a href="#判断文本视图的信息" class="headerlink" title="判断文本视图的信息　"></a>判断文本视图的信息　</h4><ul>
<li>importsGraphics:方法：判断文件是否可以导入到文本视图　</li>
<li>acceptsGlyphInfo:方法：判断文本视图是否接受字形信息　</li>
<li>allowsUndo:方法：判断文本视图是否启用撤销　</li>
<li>smartInsertDeleteEnabled:方法：判断选择字符串周围的空间</li>
</ul>
<h3 id="图像、图像视图-NSImage、NSImageView"><a href="#图像、图像视图-NSImage、NSImageView" class="headerlink" title="图像、图像视图(NSImage、NSImageView)　"></a>图像、图像视图(NSImage、NSImageView)　</h3><h4 id="加载图像"><a href="#加载图像" class="headerlink" title="加载图像　"></a>加载图像　</h4><ul>
<li>imageNamed:方法：加载Supporting Files文件夹中的图片　</li>
<li>initWithContentsOfURL:方法：加载URL中的图像　</li>
<li>initWithContentsOfFile:方法：加载文件中的图片　</li>
<li>initWithSize:方法：加载图像的大小</li>
</ul>
<h4 id="获取与设置图像信息"><a href="#获取与设置图像信息" class="headerlink" title="获取与设置图像信息　"></a>获取与设置图像信息　</h4><ul>
<li>size:方法：获取图像的大小　</li>
<li>setSize:方法：设置图像的大小　</li>
<li>setFlipped:方法：设置图像是否倒立　</li>
<li>cacheMode:方法：获取图像的缓存模式　</li>
<li>setCacheMode:方法：设置图像的缓存模式　</li>
<li>backgroundColor:方法：获取图像的背景色　</li>
<li>setBackgroundColor:方法：设置图像的背景色　</li>
<li>name:方法：获取图像的名称　</li>
<li>setName:方法：设置图像的名称　</li>
<li>setTemplate:方法：设置图像是否表示一个模板图像　</li>
<li>imageTypes:方法：获取图像类型　</li>
<li>imageUnfilteredTypes:方法：获取图像类型　</li>
<li>imageFileTypes:方法：获取文件类型　</li>
<li>imageUnfilteredFileTypes:方法：获取文件类型　</li>
<li>imagePasteboardTypes:方法：获取粘贴板类型　</li>
<li>imageUnfilteredPasteboardTypes:方法：获取粘贴板类型　</li>
<li>representations:方法：获取图像表示</li>
</ul>
<h4 id="判断图像信息"><a href="#判断图像信息" class="headerlink" title="判断图像信息　"></a>判断图像信息　</h4><ul>
<li>isFlipped:方法：判断图像是否倒立　</li>
<li>prefersColorMatch:方法：判断图像颜色匹配　</li>
<li>isTemplate:方法：判断图像是否为模板图像</li>
</ul>
<h4 id="获取与设置图像视图"><a href="#获取与设置图像视图" class="headerlink" title="获取与设置图像视图　"></a>获取与设置图像视图　</h4><ul>
<li>image:方法：获取显示图像的信息　</li>
<li>setImage:方法：设置显示的图像　</li>
<li>imageAlignment:方法：获取图像的对齐方式　</li>
<li>setImageAlignment:方法：设置图像的对齐方式　</li>
<li>imageFrameStyle:方法：获取框架的风格　</li>
<li>setImageFrameStyle:方法：设置框架的风格　</li>
<li>imageScaling:方法：获取图像缩放的方式　</li>
<li>setImageScaling:方法：设置图像缩放方式　</li>
<li>isEditable:方法：判断图像视图是否可以编辑　</li>
<li>setEditable:方法：设置图像视图是否编辑　</li>
<li>allowsCutCopyPaste:方法：判断图像是否可复制、粘贴等操作　</li>
<li>setAllowsCutCopyPaste:方法：设置图像是否可复制、粘贴等操作　</li>
<li>animates:方法：判断图像视图是否播放动画　</li>
<li>setAnimates:方法：设置图像视图是否播放动画</li>
</ul>
<h3 id="表视图-NSTableView"><a href="#表视图-NSTableView" class="headerlink" title="表视图(NSTableView)　"></a>表视图(NSTableView)　</h3><h4 id="获取表视图信息"><a href="#获取表视图信息" class="headerlink" title="获取表视图信息　"></a>获取表视图信息　</h4><ul>
<li>rowHeight:方法：获取表视图的行高　</li>
<li>headerView:方法：获取NSTableHeaderView对象　</li>
<li>intercellSpacing:方法：获取表单元之间的间距　</li>
<li>numberOfColumns:方法：获取表视图中的列数　</li>
<li>numberOfRows:方法：获取表视图的行数　</li>
<li>numberOfSelectedColumns:方法：获取选中的列数　</li>
<li>numberOfSelectedRows:方法：获取选择的行数　</li>
<li>rowSizeStyle:方法：获取行风格</li>
</ul>
<h4 id="设置表视图的信息"><a href="#设置表视图的信息" class="headerlink" title="设置表视图的信息　"></a>设置表视图的信息　</h4><ul>
<li>setRowHeight:方法：设置表视图的行高　</li>
<li>setIntercellSpacing:方法：设置表单元之间的间距　</li>
<li>setRowSizeStyle:方法：设置行风格　</li>
<li>setAllowsColumnReordering:方法：设置用户是否可以重新排列列标题　</li>
<li>setAllowsColumnResizing:方法：设置是否可以调整列标题　</li>
<li>setAllowsColumnSelection:方法：设置是否可以选择一整列　</li>
<li>setAllowsTypeSelect:方法：设置是否可以通过按键字符进行选择　</li>
<li>setAllowsMultipleSelection:方法：设置是否允许选择多行或多列</li>
</ul>
<h4 id="判断表视图信息"><a href="#判断表视图信息" class="headerlink" title="判断表视图信息　"></a>判断表视图信息　</h4><ul>
<li>allowsColumnReordering:方法：判断用户是否可以重新排列列标题　</li>
<li>allowsColumnResizing:方法：判断是否可以调整列标题　</li>
<li>allowsColumnSelection:方法：判断是否可以选择一整列　</li>
<li>allowsEmptySelection:方法：判断是否允许有0个行或列被选中　</li>
<li>allowsTypeSelect:方法：判断是否可以通过按键字符进行选择　</li>
<li>allowsMultipleSelection:方法：判断是否允许选择多行或多列</li>
</ul>
<h3 id="常见控件-NSButton、NSDatePicker、NSProgressIndicator、NSComboBox"><a href="#常见控件-NSButton、NSDatePicker、NSProgressIndicator、NSComboBox" class="headerlink" title="常见控件(NSButton、NSDatePicker、NSProgressIndicator、NSComboBox)　"></a>常见控件(NSButton、NSDatePicker、NSProgressIndicator、NSComboBox)　</h3><h4 id="按钮控件-NSButton"><a href="#按钮控件-NSButton" class="headerlink" title="按钮控件(NSButton)　"></a>按钮控件(NSButton)　</h4><ul>
<li>title:方法：获取按钮的标题　</li>
<li>setTitle:方法：设置按钮的标题　</li>
<li>image:方法：获取按钮的图像　</li>
<li>setImage:方法：设置按钮的图像　</li>
<li>isTransparent:方法：判断按钮是否透明　</li>
<li>setTransparent:方法：设置按钮是否透明　</li>
<li>showsBorderOnlyWhileMouseInside:方法：判断边框的显示　</li>
<li>setSh”[1] </li>
</ul>
<h3 id="此文禁止任何类型的转载"><a href="#此文禁止任何类型的转载" class="headerlink" title="此文禁止任何类型的转载"></a><strong>此文禁止任何类型的转载</strong></h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数学运算-math-函数&quot;&gt;&lt;a href=&quot;#数学运算-math-函数&quot; class=&quot;headerlink&quot; title=&quot;数学运算(math)函数&quot;&gt;&lt;/a&gt;数学运算(math)函数&lt;/h2&gt;&lt;h4 id=&quot;算术运算函数&quot;&gt;&lt;a href=&quot;#算术运算函数&quot; class=&quot;headerlink&quot; title=&quot;算术运算函数&quot;&gt;&lt;/a&gt;算术运算函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;rand()函数：产生随机数&lt;/li&gt;
&lt;li&gt;abs()函数/labs()函数：整数的绝对值&lt;/li&gt;
&lt;li&gt;fabs()/fabsf()/fabsl()函数：浮点数的绝对值&lt;/li&gt;
&lt;li&gt;floor()/floorf()/floorl()函数：向下取整&lt;/li&gt;
&lt;li&gt;ceil()/ceilf()/ceill()函数：向上取整&lt;/li&gt;
&lt;li&gt;round()/roundf()/roundl()函数：四舍五入&lt;/li&gt;
&lt;li&gt;sqrt()/sqrtf()/sqrtl()函数：求平方根&lt;/li&gt;
&lt;li&gt;fmax()/fmaxf()/fmaxl()函数：求最大值&lt;/li&gt;
&lt;li&gt;fmin()/fminf()/fminl()函数：求最小值&lt;/li&gt;
&lt;li&gt;hypot()/hypotf()/hypotl()函数：求直角三角形斜边的长度&lt;/li&gt;
&lt;li&gt;fmod()/fmodf()/fmodl()函数：求两数整除后的余数&lt;/li&gt;
&lt;li&gt;modf()/modff()/modfl()函数：浮点数分解为整数和小数&lt;/li&gt;
&lt;li&gt;frexp()/frexpf()/frexpl()函数：浮点数分解尾数和以二为底的指数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="IOS" scheme="https://wait.im/tags/IOS/"/>
    
      <category term="Objective-C" scheme="https://wait.im/tags/Objective-C/"/>
    
      <category term="Foundation" scheme="https://wait.im/tags/Foundation/"/>
    
  </entry>
  
  <entry>
    <title>关于 Facebook新闻页优化 的分析</title>
    <link href="https://wait.im/2015/07/31/Facebook%E6%96%B0%E9%97%BB%E9%A1%B5%E4%BC%98%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>https://wait.im/2015/07/31/Facebook新闻页优化的分析/</id>
    <published>2015-07-30T16:18:36.000Z</published>
    <updated>2017-02-06T10:58:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Facebook新闻页优化 的分析</p>
<p>#私货<br>简单一点概括，就是Facebook在ListView页面中，将原来的View-Model-Binder再次拆解成粒度更细的模型。<br>在原本的View-Model-Binder模型中，依靠将部分的View设置成visible 或 gone 来控制功能块的显示 （转帖/图片/etc）<br>在优化过的模型中，原本的View被拆解成更细粒度的小View，然后只加载需要的部分<br>原文没有提及，但应当是利用</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>实现的。<br>翻了一下ListView源代码<br>不同type的View被分类cache在RecycleBin中</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViewTypeCount</span><span class="params">(<span class="keyword">int</span> viewTypeCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (viewTypeCount &amp;lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can't have a viewTypeCount &amp;lt; 1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//noinspection unchecked</span></div><div class="line">    ArrayList&amp;lt;View&amp;gt;[] scrapViews = <span class="keyword">new</span> ArrayList[viewTypeCount];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; viewTypeCount; i++) &#123;</div><div class="line">        scrapViews[i] = <span class="keyword">new</span> ArrayList&amp;lt;View&amp;gt;();</div><div class="line">    &#125;</div><div class="line">    mViewTypeCount = viewTypeCount;</div><div class="line">    mCurrentScrap = scrapViews[<span class="number">0</span>];</div><div class="line">    mScrapViews = scrapViews;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考RecycleBin的setViewTypeCount部分，此处用ArrayList[]来cache所有type的view<br>不过由于被设置成gone的View本身就不参与meaure和layout,也不会参与draw,只会额外占据一些内存。<br>所以Facebook做了这些优化以后 性能只提升了10%<br>在View的性能优化中，我觉得10%太少了，而新的模型复杂度变高了很多。<br>原本由于ViewType的原因，需要将Model和View的实现细节暴露在 Adapter中，Facebook这个优化实现似乎为了保持其封装性<br>于是将View-Model-Binder又通过Definition又封装了一层。<br>综合考虑的话….我觉得意义不大。<br>优化掉了一些无用View,但是增加了额外的中间层，很难说这样的改动是好是坏。<br>IOS开发可能更习惯View-Binder写法<br>Android开发可能会更习惯直接使用ViewHolder去操作</p>
<h2 id="而Facebook这个写法更复杂，增加了额外的Definition层，Binder也根据ViewType被拆解成多个。"><a href="#而Facebook这个写法更复杂，增加了额外的Definition层，Binder也根据ViewType被拆解成多个。" class="headerlink" title="而Facebook这个写法更复杂，增加了额外的Definition层，Binder也根据ViewType被拆解成多个。"></a>而Facebook这个写法更复杂，增加了额外的Definition层，Binder也根据ViewType被拆解成多个。</h2><p>考虑一下直接用最大粒度的View来做ViewType区分？<br>思考了一下….参考Faacebook或微博这个界面…应当是不行的…<br>同屏最多也就 2~4条 post<br>直接用Item做type区分的话….由于数据随机性的问题<br>cache会被经常性的加载和释放…..反而起不到作用…</p>
<h2 id="使用细粒度的子View做type区分的话，在cache上有优势的多"><a href="#使用细粒度的子View做type区分的话，在cache上有优势的多" class="headerlink" title="使用细粒度的子View做type区分的话，在cache上有优势的多.."></a>使用细粒度的子View做type区分的话，在cache上有优势的多..</h2><p>结论：有用，必要性不足。<br>鉴于这个Definition模型的复杂度，非微博，facebook,朋友圈类型的复杂Item，并不需要使用此优化方法。</p>
<h2 id="正常使用View-model-binder模型就好了"><a href="#正常使用View-model-binder模型就好了" class="headerlink" title="正常使用View-model-binder模型就好了"></a>正常使用View-model-binder模型就好了</h2><p>中文版<br><a href="">http://blog.aaapei.com/article/2015/02/facebookxin-wen-ye-listviewyou-hua</a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>android系统每隔16.7ms发出一个渲染信号，通知ui线程进行界面的渲染。为了达到流畅的体验，应用程序需要在这个时间内完成应用逻辑，使系统达到60fps。当一个Listview被添加到布局时，其关联的adapter的getView方法将会被回调。在16.7毫秒这样一个时间单元内，可见listitem单元的getView方法将被按照顺序执行。在大多数情况下，由于其他绘图行为的存在，例如measure和draw，getVIew实际分配到执行时间远低于16ms。一旦listview包含复杂控件时，在16毫秒内不能完成渲染，用户只能看到上一祯的结果，这时就发生了掉帧。</p>
<h2 id="Facebook新闻页介绍"><a href="#Facebook新闻页介绍" class="headerlink" title="Facebook新闻页介绍"></a>Facebook新闻页介绍</h2><p>Facebook的新闻页是一个复杂的listview控件，如何使它获得流畅的滚动体验一直困扰我们。 首先，新闻页的每一条新闻的可见区域非常大，包含一系列的文本以及照片；其次，新闻的展现类型也很多样，除了文本以及照片，新闻的附件还可包含链接、音频、视频等。除此之外，新闻还可以被点赞、被转载，导致一个新闻会被其他新闻包含在内。当新闻被大量用户转载时，甚至会出现一条新闻占据两个屏幕的情况。加上android用户的机型多为中低端设备，这使我们在16.7ms内完成新闻页的渲染变的非常困难。<br><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xpa1/t39.2365-6/10935993_1534797460105141_1373600061_n.png" alt=""></p>
<h2 id="新闻页最初架构"><a href="#新闻页最初架构" class="headerlink" title="新闻页最初架构"></a>新闻页最初架构</h2><p>在2012年，我们将新闻页从web-view转化成本地控件，在最初的那个版本中，基于View-Model-Binder设计模型，我们为新闻listitem创建了一个自定义StoryView类，这个类有一个bindModel方法，该方法用于和数据进行绑定。代码是这样的：<br><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xap1/t39.2365-6/10935990_1412843022342801_1297058886_n.png" alt=""><br>StoryView的包含的子控件都会有一个bindModel方法，例如HeadVIew通过该方法与其相关的数据进行绑定。<br>这种设计，代码非常直观清晰，但他的缺点也很明显：</p>
<p><em>listview复用机制不能有效的工作,Android’s recycling mechanism does not work well in this case: Every item in the ListView was usually a StoryView, but once bound to a story, two StoryViews would be radically different and recycling one into the other wasn’t effective.（这一段存疑，直接放原文）
</em>逻辑嵌套：采用bindModel绑定控件和数据，业务逻辑与视图逻辑耦合，导致逻辑类层次非常深；<br><em>布局嵌套非常深：不但导致低效的视图渲染，例如新闻被不停的转载的极端场景下还会导致栈溢出；
</em>bindModel方法逻辑过重：bindModel方法在当用户滚动列表时被ui线程回调，由于所有的数据解析都在这个方法内，导致该方法耗时<br>以上这些问题虽有他们单独的解决方法，例如我们可以自己设计一套回收机制解决storyView复用问题。但基于维护成本和开发时间考虑，我们决定进行一次重构。</p>
<h2 id="重构方案"><a href="#重构方案" class="headerlink" title="重构方案"></a>重构方案</h2><p><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xap1/t39.2365-6/10935983_984256741587871_980206636_n.png" alt=""></p>
<p>另一个大的修改是，我们将视图逻辑和数据逻辑分离，StoryView被分离成两个类： 只负责展现的视图类，以及一个Binder类。视图类仅包含set方法（例如HeaderView包含了setTitle，setSubTitle。setProfiePic等等）。Binder类包含了原来的bindMethod的逻辑，binder类包含三个方法：prepare，bind，unbind。 bind方法调用view的set方法设置数据，unbind清理视图数据，prepare方法在cpu空闲期间做一些预初始化工作，例如进行click事件绑定、数据格式化、创建spannable等等，它会在getView方法之前被调用 </p>
<p><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfp1/t39.2365-6/10956894_918624611495337_1619622974_n.png" alt=""></p>
<p>我们遇到的技术难点是Binder的设计，由于StoryView被拆分不同的子控件，一条新闻可能会包含多个不同的Binder。而在之前，我们只需要根据视图的树结构进行结构化赋值。因此，我们引进了PartDefinition类，PartDefinition负责维护一条新闻包含哪些子控件、包含Binder的类型以及为新闻创建Binder类，有两种类型的PartDefinition：单个PartDefinition以及PartDefinition集合。</p>
<p><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfa1/t39.2365-6/10935981_1536551233276267_1103658334_n.png" alt=""></p>
<p>一个新闻在重构之后的PartDefinition结构是这样的：</p>
<p><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xaf1/t39.2365-6/10935975_856616717694467_1297407005_n.png" alt=""></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><em>采取新的架构，内存错误减少了17%，总crash率减少了8%，彻底解决涨溢出问题
</em>渲染时间减少了10%，大新闻场景不再掉帧<br>*精简了原来的自定义回收机制，同时在重构过程中增加了单元测试</p>
<p>英文原文：</p>
<p><a href="">https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Facebook新闻页优化 的分析&lt;/p&gt;
&lt;p&gt;#私货&lt;br&gt;简单一点概括，就是Facebook在ListView页面中，将原来的View-Model-Binder再次拆解成粒度更细的模型。&lt;br&gt;在原本的View-Model-Binder模型中，依靠将部分的View设置成visible 或 gone 来控制功能块的显示 （转帖/图片/etc）&lt;br&gt;在优化过的模型中，原本的View被拆解成更细粒度的小View，然后只加载需要的部分&lt;br&gt;原文没有提及，但应当是利用&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getItemViewType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getViewTypeCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Google 2015 Material Design Summit</title>
    <link href="https://wait.im/2015/04/21/Google%202015%20Material%20Design%20Summit/"/>
    <id>https://wait.im/2015/04/21/Google 2015 Material Design Summit/</id>
    <published>2015-04-20T16:12:36.000Z</published>
    <updated>2017-02-06T10:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>会议主持人: Michael Yeung</p>
</blockquote>
<p>###I. 新制度</p>
<p>####New Review Process</p>
<ul>
<li>发布前先人工审核(加速上架时间)</li>
<li>新分级制度(IARC)(5月前没做，就会列入未分级，甚至会被下架或找不到)</li>
<li>符合不同年龄层的app</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">严禁app有root行为<span class="comment">; </span></div><div class="line">不能自己升级<span class="comment">; </span></div><div class="line">不允许应用内部的应用推荐（必须经过Google Play）</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>###II. 应用质量</p>
<p>####该做</p>
<ul>
<li>返回键:</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">应该回到上个界面 ，上部分返回键(up)可以相同与不同。</div><div class="line"><span class="symbol">Webview:</span> <span class="keyword">back </span><span class="keyword">button: </span>返回上一页<span class="comment">; up button(通常会更重一些): 返回上一个Activity</span></div></pre></td></tr></table></figure>
<ul>
<li>正确支持ActionBar</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">推荐使用Google主题的 </div><div class="line">推荐widget用 <span class="keyword">Android </span>标准的<span class="comment">; </span></div><div class="line">TabBar推荐放上面 </div><div class="line">可以考虑不需要返回键(up)<span class="comment">; </span></div><div class="line">推荐不用右箭头 </div><div class="line">不推荐使用弃用的一些UI（如：右下角三点推荐不用, 放在ActionBar右上角(overflow)）</div></pre></td></tr></table></figure>
<ul>
<li>参考Android语言风格</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">尽量简短、精简。</div></pre></td></tr></table></figure>
<ul>
<li>在Tabs上支持滑动手势</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">强烈建议</div></pre></td></tr></table></figure>
<p>####不该做的</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">风格上不该模范平台上的用户体验（应该用<span class="keyword">Android的标准）</span></div><div class="line">不该使用其他平台的图标（应该用: github上Google有发布一些通用的图标）</div><div class="line">不该两个<span class="keyword">bar都放在下面，（应该分上bar与下bar）(上bar浏览、nav通常是下)</span></div><div class="line">不该使用 标记<span class="keyword">back </span><span class="keyword">buttons</span></div><div class="line">不应该使用右箭头按钮</div><div class="line">不应该(不建议)使用一些弃用的按钮(如底部的menu <span class="keyword">button)(Target </span>SDK尽量高)</div></pre></td></tr></table></figure>
<p>###III. Android风格演进</p>
<blockquote>
<p>获得2014 UX Awards Gold Award Winner<br>宗旨: 界面由电子的纸 z轴叠加而成</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">会叠加影子<span class="comment">(**android.support.v7.cardview**带有md属性)</span></div><div class="line">高度可能根据交互变化</div><div class="line">用影子的深度来诠释当前内容的重要性(如dialog)）</div><div class="line">顶部黏合</div><div class="line">规范的字体大小、颜色深浅来呈现整体布局</div><div class="line">字体大小规范，google有给出建议</div><div class="line">字体类型也有建议(英文(**ROBOTO**))</div><div class="line">整体排版Android Studio给出排版工具</div><div class="line">颜色重要性(primary、primaryDark、accent)</div><div class="line">Google Api，给一张图片，会给出几种颜色</div><div class="line">有意义的动画（考虑动作的连接性）(交互反馈)(可以有一些调皮的动画(取悦用户))</div></pre></td></tr></table></figure>
<p>###IV. Links</p>
<ul>
<li><a href="http://google.com/design" target="_blank" rel="external">Google Design</a></li>
<li><a href="http://developer.android.com/intl/zh-cn/index.html" target="_blank" rel="external">Android API</a></li>
<li><a href="https://github.com/google/iosched" target="_blank" rel="external">The Google I/O 2015 Android App</a></li>
<li><a href="http://frogermcs.github.io/Instagram-with-Material-Design-concept-is-getting-real-the-summary/" target="_blank" rel="external">Instagram with Material Design concept is getting real - The Summary</a></li>
<li><a href="https://github.com/rey5137/material" target="_blank" rel="external">Material Design 教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;会议主持人: Michael Yeung&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###I. 新制度&lt;/p&gt;
&lt;p&gt;####New Review Process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布前先人工审核(加速上架时间)&lt;/li&gt;
&lt;li&gt;新分级制度(IARC)(5月前没做，就会列入未分级，甚至会被下架或找不到)&lt;/li&gt;
&lt;li&gt;符合不同年龄层的app&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight abnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;严禁app有root行为&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不能自己升级&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不允许应用内部的应用推荐（必须经过Google Play）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="Material Design" scheme="https://wait.im/tags/Material-Design/"/>
    
      <category term="JAVA" scheme="https://wait.im/tags/JAVA/"/>
    
      <category term="Google" scheme="https://wait.im/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library简单使用</title>
    <link href="https://wait.im/2015/01/24/Android%20Design%20Support%20Library%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://wait.im/2015/01/24/Android Design Support Library简单使用/</id>
    <published>2015-01-24T08:23:36.000Z</published>
    <updated>2017-02-06T10:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 5.0 Lollipop为我们带来了<strong>Material Design</strong>,这是一个全新的设计语言，给Android带来了全新的体验，我个人决定Material很漂亮，然而那时候官方的支持却不太完善，FAB（Float Action Button）、想写一个漂亮的NavigationView都需要用一些开源库，而在<strong>GoogleIO</strong>大会上，谷歌为我们带来了<strong>Android Design Support Library</strong>,其中包括了很多原生的MD控件，例如：navigation drawer view, floating labels,floating action button, snackbar, tabs, CoordinatorLayout，CollapsingToolbarLayout等，更重要的是兼容到了Android2.1以上的设备，现在还有什么理由不上MD风格呢？<br><a id="more"></a></p>
<p>####请看下面的视频，是这个教程的最终效果。</p>
<iframe src="https://player.vimeo.com/video/134689608" width="500" height="888" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe>

<p>####Step One</p>
<p>首先要引入Android Design Support Library到你项目中，在build.gradle中加入一行代码：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> 'com.android.support:<span class="built_in">design</span>:<span class="number">22.2</span><span class="number">.0</span>'</div></pre></td></tr></table></figure>
<p>Design Library依赖于 Support v4 和 AppCompat v7，DesignLibrary会自动引入这两个库文件。</p>
<p>####Step Two</p>
<p>1.新建color.xml，加入以下代码，颜色值可以参考<a href="http://www.google.com/design/spec/style/color.html#color-color-palette" target="_blank" rel="external">Google Corlor Spec</a>:</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">color</span> <span class="keyword">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;#<span class="number">303</span>F9F&lt;/<span class="built_in">color</span>&gt;</div><div class="line">&lt;<span class="built_in">color</span> <span class="keyword">name</span>=<span class="string">"colorPrimary"</span>&gt;#<span class="number">3</span>F51B5&lt;/<span class="built_in">color</span>&gt;</div><div class="line">&lt;<span class="built_in">color</span> <span class="keyword">name</span>=<span class="string">"colorAccent"</span>&gt;#FF4081&lt;/<span class="built_in">color</span>&gt;</div><div class="line">&lt;<span class="built_in">color</span> <span class="keyword">name</span>=<span class="string">"textColorLight"</span>&gt;#FFF&lt;/<span class="built_in">color</span>&gt;</div><div class="line">&lt;<span class="built_in">color</span> <span class="keyword">name</span>=<span class="string">"textColorPrimary"</span>&gt;#<span class="number">212121</span>&lt;/<span class="built_in">color</span>&gt;</div><div class="line">&lt;<span class="built_in">color</span> <span class="keyword">name</span>=<span class="string">"textColorSecondary"</span>&gt;#<span class="number">727272</span>&lt;/<span class="built_in">color</span>&gt;</div></pre></td></tr></table></figure>
<p>2.打开styles.xml,添加以下代码，BaseTheme继承了Light.NoActionBar，取消了默认的ActionBar，谷歌现在推荐用Toolbar，colorPrimary代表toolbar的背景颜色，colorPrimaryDark代表状态栏的颜色，colorAccent代表一些UI组件的颜色，比如Checkbox等</p>
<p><img src="http://source.wait.im/QQ20151111-1@2x.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme.Base"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Base"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>@color/textColorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorSecondary"</span>&gt;</span>@color/textColorSecondary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####Step Three</p>
<ol>
<li><a href="https://developer.android.com/intl/zh-cn/reference/android/support/v4/widget/DrawerLayout.html" target="_blank" rel="external">DrawerLayout</a>是一个可以侧滑的内容的容器，将DrawerLayout作为父视图，增加一个view包含主体内容(即导航栏关闭时你的默认布局)，另一个子节点包含导航栏的内容,NavigationView的layout_gravity可以设置为start|end或者left|right，代表左滑或者右滑，暂时不用管CoordinatorLayout和AppBarLayout，代码如下：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"190dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">com.example.RoundedImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/header_image"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"72dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"72dp"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"18dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/header_girl"</span></div><div class="line">            <span class="attr">android:layout_above</span>=<span class="string">"@+id/header_text_title"</span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/header_text_title"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_above</span>=<span class="string">"@+id/header_email"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"left"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"松开你的手"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/textColorLight"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/header_email"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"8dp"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"8dp"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"aCoder2013@163.com"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/textColorLight"</span></div><div class="line">            /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>headerLayout代表导航栏上方的布局，其中FrameLayout的layout_height 我这里设置为190dp,也可以设置为wrap_content,RoundedImageView是一个自定义ImageView,将图片转换成圆形的，这样比较美观。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"190dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">com.example.RoundedImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/header_image"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"72dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"72dp"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"18dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/header_girl"</span></div><div class="line">            <span class="attr">android:layout_above</span>=<span class="string">"@+id/header_text_title"</span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/header_text_title"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_above</span>=<span class="string">"@+id/header_email"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"left"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"松开你的手"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/textColorLight"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/header_email"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"8dp"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"8dp"</span></div><div class="line">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"aCoder2013@163.com"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/textColorLight"</span></div><div class="line">            /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>新建一个菜单文件menu_nav_drawer，表示header_layout下方的所有选项，例如主页，设置等；android:checkableBehavior的可选项有：none代表无法选中，all代表所有的项都可以被选中(用CheckBoxes)，single代表是有一个项可以被 选中，android:checked表示选中状态，android:icon表示其显示的图标，谷歌提供了默认的：<a href="http://www.google.com/design/icons/" target="_blank" rel="external">Icon</a></li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/action_home_page"</span></div><div class="line">            <span class="attr">android:checked</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_home_white_24dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"@string/home_page"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/action_follow"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_stars_white_24dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"@string/my_follow_site"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>   <span class="attr">android:id</span>=<span class="string">"@+id/action_offline_cache"</span></span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"@string/offline_cache"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_file_download_white_24dp"</span></div><div class="line">            /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span>   <span class="attr">android:id</span>=<span class="string">"@+id/search_content"</span></span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_search_white_24dp"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"@string/search_content"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>   <span class="attr">android:id</span>=<span class="string">"@+id/action_nav_settings"</span></span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"@string/setting"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_settings_white_24dp"</span></div><div class="line">            /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####Step Four</p>
<p>在Activity中初始化所有的组件，<code>DrawerLayout</code>等，</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Toolbar toolbar;</div><div class="line"><span class="keyword">private</span> DrawerLayout drawerLayout;</div><div class="line"><span class="keyword">private</span> ActionBarDrawerToggle actionBarDrawerToggle ;</div><div class="line"><span class="keyword">private</span> NavigationView navigationView;</div><div class="line"><span class="keyword">private</span> CoordinatorLayout rootLayout;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    initToolbar();</div><div class="line">    initDrawer();</div><div class="line">    initNavigation();</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">()</span> </span>&#123;</div><div class="line">    toolbar = (Toolbar) findViewById(R.id.tool_bar);</div><div class="line">    setSupportActionBar(toolbar);<span class="comment">//用toolbar代替默认的ActionBar</span></div><div class="line">    <span class="comment">//getSupportActionBar()方法得到ActionBar进而更改默认的行为</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initDrawer</span><span class="params">()</span> </span>&#123;</div><div class="line">    drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">    actionBarDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout, toolbar,</div><div class="line">            R.string.navigation_drawer_open,</div><div class="line">            R.string.navigation_drawer_close)&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDrawerClosed</span><span class="params">(View drawerView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onDrawerClosed(drawerView);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDrawerOpened</span><span class="params">(View drawerView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onDrawerOpened(drawerView);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    drawerLayout.setDrawerListener(actionBarDrawerToggle);/设置监听器</div><div class="line">    <span class="comment">//calling sync state is necessay or else your hamburger icon wont show up</span></div><div class="line">    actionBarDrawerToggle.syncState();</div><div class="line">&#125;    </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initNavigation</span><span class="params">()</span> </span>&#123;</div><div class="line">    navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">    <span class="comment">//监听导航栏菜单点击事件</span></div><div class="line">    navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> id = menuItem.getItemId();</div><div class="line">            <span class="keyword">switch</span> (id)&#123;</div><div class="line">                <span class="keyword">case</span> R.id.action_nav_settings:</div><div class="line">                    menuItem.setChecked(<span class="keyword">true</span>);</div><div class="line">                    drawerLayout.closeDrawers();</div><div class="line">                    Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SettingActivity.class);</div><div class="line">                    startActivity(intent);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####Step Five: Just Run it<br><img src="http://source.wait.im/QQ20151111-2@2x.png" alt=""><br><img src="http://source.wait.im/QQ20151111-3@2x.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 5.0 Lollipop为我们带来了&lt;strong&gt;Material Design&lt;/strong&gt;,这是一个全新的设计语言，给Android带来了全新的体验，我个人决定Material很漂亮，然而那时候官方的支持却不太完善，FAB（Float Action Button）、想写一个漂亮的NavigationView都需要用一些开源库，而在&lt;strong&gt;GoogleIO&lt;/strong&gt;大会上，谷歌为我们带来了&lt;strong&gt;Android Design Support Library&lt;/strong&gt;,其中包括了很多原生的MD控件，例如：navigation drawer view, floating labels,floating action button, snackbar, tabs, CoordinatorLayout，CollapsingToolbarLayout等，更重要的是兼容到了Android2.1以上的设备，现在还有什么理由不上MD风格呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="Material Design" scheme="https://wait.im/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Android性能调优的技术点</title>
    <link href="https://wait.im/2015/01/12/Android%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9A%84%E6%8A%80%E6%9C%AF%E7%82%B9/"/>
    <id>https://wait.im/2015/01/12/Android性能调优的技术点/</id>
    <published>2015-01-12T04:23:36.000Z</published>
    <updated>2017-02-06T10:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><h3 id="使用异步"><a href="#使用异步" class="headerlink" title="使用异步"></a>使用异步</h3><ul>
<li>保持 APP 的高度响应，不要在 UI 线程做耗时操作，多使用异步任务</li>
<li>使用线程时要做好线程控制；使用队列、线程池</li>
<li>谨慎使用糟糕的 AysncTask 、 Timer</li>
<li>警惕异步任务引起的内存泄露</li>
<li>应该异步任务分类，比如 HTTP ，图片下载，文件读写，每一类的异步任务维护一个任务队列，而不是每一个任务都开一个线程（ Volley 表示我一个可以搞定这些全部 <em>(:з」∠)</em>）</li>
<li>这些常用的任务应该做好优先级处理（一般 JSON 数据优先于图片等静态数据的请求）</li>
<li>一般异步任务应该开启一个 SingleAsyncTask ，保证一时只有一个线程在工作</li>
<li>HTTP 和图片下载尽量使用同一套网络请求</li>
<li>使用 MVP 模式规范大型 Activity 类的行为，避免异步任务造成的内存泄露</li>
<li>避免内存泄露</li>
</ul>
<a id="more"></a>
<h3 id="了解虚拟机内存回收机制"><a href="#了解虚拟机内存回收机制" class="headerlink" title="了解虚拟机内存回收机制"></a>了解虚拟机内存回收机制</h3><ul>
<li>频繁 GC 也会造成卡顿，避免不必要的内存开销</li>
<li>错误的引用姿♂势造成的内存泄露（啊~要泄了~）</li>
<li>常见的 Activity 泄露（单例、 Application 、后台线程、无限动画、静态引用）</li>
<li>Bitmap 泄露（ HoneyComb 这个问题之前压力好大）</li>
<li>尽量使用 IntentService 代替 Service ，前者会自动 StopItself</li>
<li>排查内存泄露问题的方法（我一直以来都是简单暴力的人肉 dump 检查大法）</li>
<li>使用 LeakCanary 自动检查 Activity 泄露问题</li>
<li>对内存负载要保持敏感（ Sharp ）</li>
<li>视图优化</li>
</ul>
<h3 id="布局优化、减少层次，-Include-Merge"><a href="#布局优化、减少层次，-Include-Merge" class="headerlink" title="布局优化、减少层次， Include Merge"></a>布局优化、减少层次， Include Merge</h3><ul>
<li>使用 ViewStub 避免不必要的 LayoutInflate ，使用 GONE 代替重复 LayoutInflate 同一个布局</li>
<li>避免过度绘制，应该减少不必要的布局背景；布局层次太深会造成过度绘制以及 Measure 、 Layout 等方法时间复杂度的指数增长</li>
<li>使用过渡动画，比如给图片的呈现加一个轻量的淡入效果会让视觉上变得流畅许多</li>
<li>避免过度的动画，不要让一个界面同时出现多出动画，比如 List 滚动时 Item 项要停止播放动画或者 GIF</li>
<li>复杂动画使用 SurfaceView 或 TextureView</li>
<li>尽量提供多套分辨率的图片，使用矢量图</li>
</ul>
<h2 id="Adapter-优化"><a href="#Adapter-优化" class="headerlink" title="Adapter 优化"></a>Adapter 优化</h2><ul>
<li>复用 convertView ，用 ViewHolder 代替频繁 findViewById</li>
<li>不要重复 setListener ，要使用 v.getId 来复用 Listener ，不然会创建一堆 Listener 导致频繁 GC</li>
<li>多布局要采用 MutilItemView ，而不是使用一个大布局然后动态控制需要现实的部分</li>
<li>不要在 getView 方法做做耗时的操作</li>
<li>快速滚动列表的时候，可以停止加载列表项的图片，停止列表项的动画，不要在这时候改变列表项的布局</li>
<li>尽量用 RecyclerView （增量 Notify 和 RecycledViewPool 带你飞）</li>
</ul>
<h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><ul>
<li>算法优化，减少时间复杂度，参考一些经典的优化算法</li>
<li>尽量使用 int ，而不是 float 或者 double</li>
<li>尽量采用基本类型，避免无必要的自动装箱和拆箱，浪费时间和空间</li>
<li>选用合适的集合类（尽量以空间换时间）、选用 Android 家的 SparseArray,SparseBooleanArray 和 LongSparseArray</li>
<li>避免创建额外的对象（ StringBuilder ）</li>
<li>使用 SO 库完成一些比较独立的功能（高斯模糊）</li>
<li>预处理（提前操作）一些比较耗时的初始化工作统一放到启动图处理</li>
<li>懒加载（延迟处理）规避 Activity 的敏感生命周期</li>
<li>Log 工具类，要在编译时删掉调试代码，而不是在运行时通过判断条件规避</li>
<li>优先使用静态方法、公有方法还是公有方法？速度区别很大哦</li>
<li>类内部直接对成员变量进行操作，不要使用 getter/setter 方法，调用方法耗额外的时间</li>
<li>给内部类访问的外部类成员变量要声明称包内可访问，而不是私有，不然编译的时候还是会自动创建用于访问外部类成员变量的方法</li>
<li>遍历集合时，使用 i++代替 Iterator ，后者需要额外的对象操作，应在循环体内避免这种情况</li>
<li>如果一个基本类型或者 String 的值不会改变，尽量用 final static ，编译时会直接用变量的值替换变量，也就不需要在查询变量的值了</li>
</ul>
<h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><ul>
<li>数据库优化：使用索引、使用异步线程</li>
<li>网络优化 …… 一堆优秀的轮子</li>
<li>避免过度使用依赖注入框架，大量的反射</li>
<li>不过过度设计 /抽象，多态看起来很有设计感，代价就是额外的代码、空间、时间</li>
<li>尽量不要开启多进程，进程的开销很大</li>
</ul>
<h4 id="APK-瘦身"><a href="#APK-瘦身" class="headerlink" title="APK 瘦身"></a>APK 瘦身</h4><ul>
<li>开启混淆</li>
<li>使用 zipalign 工具优化 APK</li>
<li>适当有损图片压缩、使用矢量图</li>
<li>删除项目中冗余的资源，之前写过一些删除没有 res 资源的脚本</li>
<li>动态加载模块化，项目拆分啊！</li>
</ul>
<h4 id="性能问题的排查方法"><a href="#性能问题的排查方法" class="headerlink" title="性能问题的排查方法"></a>性能问题的排查方法</h4><ul>
<li>GPU 条形图，没事开来看看淘宝</li>
<li>过度绘制颜色，嗯，不要一篇姨妈红就好</li>
<li>LeakCanary ，自动检测 Activity 泄露，挺好用的</li>
<li>TraceView （ Device Monitor ）， Systrace ，分析哪些代码占用的 CPU 时间太大，屡试不爽</li>
<li>Lint ，检查不合理的 res 资源</li>
<li>layoutopt （还是 optlayout ？），对当前布局提出优化建议，已被 lint 替代，但是还能用</li>
<li>HierarchyViewer ，查看手机当前界面的布局层次，布局优化时常用（只用于模拟器，真机上用要 ROOT ，不想 ROOT 加得使用 ViewServer ）</li>
<li>StrictMode ， UI 操作、网络操作等容易出现性能问题的地方，如果出现异常情况 StrictMode 会报警</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h2&gt;&lt;h3 id=&quot;使用异步&quot;&gt;&lt;a href=&quot;#使用异步&quot; class=&quot;headerlink&quot; title=&quot;使用异步&quot;&gt;&lt;/a&gt;使用异步&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保持 APP 的高度响应，不要在 UI 线程做耗时操作，多使用异步任务&lt;/li&gt;
&lt;li&gt;使用线程时要做好线程控制；使用队列、线程池&lt;/li&gt;
&lt;li&gt;谨慎使用糟糕的 AysncTask 、 Timer&lt;/li&gt;
&lt;li&gt;警惕异步任务引起的内存泄露&lt;/li&gt;
&lt;li&gt;应该异步任务分类，比如 HTTP ，图片下载，文件读写，每一类的异步任务维护一个任务队列，而不是每一个任务都开一个线程（ Volley 表示我一个可以搞定这些全部 &lt;em&gt;(:з」∠)&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;这些常用的任务应该做好优先级处理（一般 JSON 数据优先于图片等静态数据的请求）&lt;/li&gt;
&lt;li&gt;一般异步任务应该开启一个 SingleAsyncTask ，保证一时只有一个线程在工作&lt;/li&gt;
&lt;li&gt;HTTP 和图片下载尽量使用同一套网络请求&lt;/li&gt;
&lt;li&gt;使用 MVP 模式规范大型 Activity 类的行为，避免异步任务造成的内存泄露&lt;/li&gt;
&lt;li&gt;避免内存泄露&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="内存" scheme="https://wait.im/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="优化" scheme="https://wait.im/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Leakcanary Square的一款Android/Java内存泄漏检测工具</title>
    <link href="https://wait.im/2014/11/25/Leakcanary%20Square%E7%9A%84%E4%B8%80%E6%AC%BEAndroid:Java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <id>https://wait.im/2014/11/25/Leakcanary Square的一款Android:Java内存泄漏检测工具/</id>
    <published>2014-11-24T16:14:36.000Z</published>
    <updated>2017-02-06T10:59:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/square/leakcanary" target="_blank" rel="external">Github地址</a></p>
</blockquote>
<p>##git readme:</p>
<p>###中文翻译@Jacksgong</p>
<blockquote>
<p>一款Android与Java的内存检测库<br>“A small leak will sink a gret ship.” - Benjamin Franklin</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/screenshot.png" alt=""></p>
<a id="more"></a>
<p>###I. 开始<br><code>build.gradle</code> 中的配置:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">dependencies</span> &#123;</div><div class="line">   <span class="attribute">debugCompile</span> <span class="string">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class="line">   releaseCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>Application class</code>中的配置:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> public void onCreate() &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    <span class="type">LeakCanary</span>.install(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就可以了! 在debug包中activity内存泄漏将会被监听到，并且将会自动显示一个通知(show a notification)。</p>
<p>###II. 为什么要使用LeakCanary?<br>好问题! 我们已经在 <a href="http://squ.re/leakcanary" target="_blank" rel="external">博客文章</a>中回答了这个问题。</p>
<p>###III. 应该怎么使用它呢？<br>使用<code>RefWatcher</code>来监听引用是否已经被GC:</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">RefWatcher</span> refWatcher = <span class="meta">&#123;...&#125;</span>;</div><div class="line">// <span class="type">We</span> expect schrodingerCat to be gone soon (<span class="keyword">or</span> <span class="keyword">not</span>), <span class="keyword">let</span>'s watch it.</div><div class="line">// 我们预测shcrodingerCat很快会销毁(也许不会)，这里监听了它.</div><div class="line">refWatcher.watch(schrodingerCat);</div></pre></td></tr></table></figure>
<p><code>LeakCanary.install()</code>会返回预设的<code>RefWatcher</code>，并且安装了一个<code>ActivityRefWatcher</code>来监听activity调用了<code>Activity.onDestroy()</code>以后的泄漏。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  public static <span class="type">RefWatcher</span> getRefWatcher(<span class="type">Context</span> context) &#123;</div><div class="line">    <span class="type">ExampleApplication</span> application = (<span class="type">ExampleApplication</span>) context.getApplicationContext();</div><div class="line">    <span class="keyword">return</span> application.refWatcher;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="type">RefWatcher</span> refWatcher;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> public void onCreate() &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    refWatcher = <span class="type">LeakCanary</span>.install(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你也可以使用<code>RefWatcher</code>来监听fragment的泄漏:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> public void onDestroy() &#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    <span class="type">RefWatcher</span> refWatcher = <span class="type">ExampleApplication</span>.getRefWatcher(getActivity());</div><div class="line">    refWatcher.watch(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###IV. LeakCanary是如何工作的呢?</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">RefWatcher</span><span class="selector-class">.watch</span>()创建了一个<span class="selector-tag">KeyedWeakReference</span>到了监控的对象。</div><div class="line">之后，在后台线程，它检查引用是否已经被释放，如果没有它将促发一次<span class="selector-tag">GC</span>。</div><div class="line">如果引用依然没有被释放，它会导出<span class="selector-tag">heap</span>到存储在<span class="selector-tag">app</span>文件系统的<span class="selector-tag">a</span><span class="selector-class">.hprof</span>文件。</div><div class="line"><span class="selector-tag">HeapAnalyzerService</span>在单独的一个进程被启动，并且<span class="selector-tag">HeapAnalyzer</span>使用<span class="selector-tag">HAHA</span>来解析<span class="selector-tag">heap</span>。</div><div class="line"><span class="selector-tag">HeapAnalyzer</span>由于采用了单独的<span class="selector-tag">reference</span> <span class="selector-tag">key</span>，在<span class="selector-tag">heap</span> <span class="selector-tag">dump</span>中找到了<span class="selector-tag">KeyedWeakReference</span>并且定位到泄漏的引用。</div><div class="line"><span class="selector-tag">HeapAnalyzer</span>通过计算出到<span class="selector-tag">GC</span>根部最短路径的强引用来决定是否这里是泄漏了，并且建立导致泄漏的引用关系链。</div><div class="line">结果将传回在<span class="selector-tag">app</span>进程的<span class="selector-tag">DisplayLeakService</span>，并且显示泄漏通知。</div></pre></td></tr></table></figure>
<p>###V. 我应该如何拷贝leak trace呢？<br>可以在Logcat中看到leak trace:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">In</span> com.example.leakcanary:<span class="number">1.0</span>:<span class="number">1</span> com.example.leakcanary.<span class="type">MainActivity</span> has leaked:</div><div class="line">* <span class="type">GC</span> <span class="type">ROOT</span> thread java.lang.<span class="type">Thread</span>.&lt;<span class="type">Java</span> <span class="type">Local</span>&gt; (named <span class="symbol">'AsyncTask</span> #<span class="number">1</span>')</div><div class="line">* references com.example.leakcanary.<span class="type">MainActivity</span>$<span class="number">3.</span><span class="keyword">this</span>$<span class="number">0</span> (anonymous <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">AsyncTask</span>)</span></div><div class="line">* leaks com.example.leakcanary.<span class="type">MainActivity</span> instance</div><div class="line"></div><div class="line">* <span class="type">Reference</span> <span class="type">Key</span>: e71f3bf5-d786<span class="number">-4145</span><span class="number">-8539</span><span class="number">-584</span>afaecad1d</div><div class="line">* <span class="type">Device</span>: <span class="type">Genymotion</span> generic <span class="type">Google</span> <span class="type">Nexus</span> <span class="number">6</span> - <span class="number">5.1</span><span class="number">.0</span> - <span class="type">API</span> <span class="number">22</span> - <span class="number">1440</span>x2560 vbox86p</div><div class="line">* <span class="type">Android</span> <span class="type">Version</span>: <span class="number">5.1</span> <span class="type">API</span>: <span class="number">22</span></div></pre></td></tr></table></figure>
<p>也可以从action bar menu分享leak trace与heap dump文件。</p>
<p>###VI. 应该如何解决内存泄漏呢?<br>一旦拥有了leak trace，就可以分析出哪个路径中的引用不应该存在，然后分析出引用依然存在的原因。通常情况是注册的监听没有反注册，或者是<code>close()</code>方法没有调用，或者是一个未知的类((通常也是没有句柄的对象，就纯new出来执行了某方法)hold住了外部类的引用。如果你分析不出你代码中的问题，别放弃，可以在Stack Overflow question(使用<code>leakcanary</code> 标签)中创建相关问题。</p>
<p>###VII. 我的泄漏是因为执行Android SDK导致的！<br>随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄漏得到了作为生厂商AOSP的修复。当发生这样的内存泄漏的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄漏的列表: <a href="https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java" target="_blank" rel="external">AndroidExcludedRefs.java</a>。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来<a href="https://github.com/square/leakcanary/issues/new" target="_blank" rel="external">创建问题</a>，当然如果能够提供一个heap dump的文件连接更好。</p>
<p>这对于新发布的Android来说是特别重要的，你有机会能够帮助尽早发现新的内存泄漏，使整个Android社区受益。</p>
<p>开发版本的快照: <a href="https://oss.sonatype.org/content/repositories/snapshots/" target="_blank" rel="external">Sonatype’s snapshots repository</a>。</p>
<p>###VIII. 超出leak trace范围</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">通常leak <span class="keyword">trace</span>是不够的，还需要通过MAT或者YourKit来深挖heap dump，下面是你如何通过heap dump来找出泄漏:</div><div class="line">找到com.squareup.leakcanary.KeyedWeakReference所有的实例。</div><div class="line">对于每个实例，查看它的<span class="built_in">key</span>成员变量。</div><div class="line">找到包含与LeakCanary报出的reference <span class="built_in">key</span>相同<span class="built_in">key</span>成员变量的KeyedWeakReference。</div><div class="line">那么这个KeyedWeakReference中的reference成员变量，就是你泄漏了的对象。</div><div class="line">到此为止，剩余的工作就是，开始查找到GC Roots最短路径(不包含弱引用)。</div></pre></td></tr></table></figure>
<p>###IX. 定制<br>图标与标注(Icon and Label)</p>
<p>DisplayLeakActivity默认是使用默认的图标与标注，当然你可以通过在你的app中提供<code>R.drawable.__leak_canary_icon</code>与<code>R.string.__leak_canary_display_activity_label</code>来定制这个:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">res/</div><div class="line">  drawable-hdpi/</div><div class="line">    __leak_canary_icon<span class="selector-class">.png</span></div><div class="line">  drawable-mdpi/</div><div class="line">    __leak_canary_icon<span class="selector-class">.png</span></div><div class="line">  drawable-xhdpi/</div><div class="line">    __leak_canary_icon<span class="selector-class">.png</span></div><div class="line">  drawable-xxhdpi/</div><div class="line">    __leak_canary_icon<span class="selector-class">.png</span></div><div class="line">  drawable-xxxhdpi/</div><div class="line">    __leak_canary_icon.png</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"__leak_canary_display_activity_label"</span>&gt;</span>MyLeaks<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>####存储leak traces</p>
<p><code>DisplayLeakActivity</code>最多在app目录中存储7个heap dumps与leak traces 文件。你可以通过在你的app中提供<code>R.integer.__leak_canary_max_stored_leaks</code>来定制这个:</p>
<p>####上传到服务器</p>
<p>可以通过修改默认的行为来上传leak trace与heap dump到指定的服务器。</p>
<p>创建一个你自己的<code>AbstractAnalysisResultService</code>。最简单的方法是在debug的app中继承<code>DefaultAnalysisResultService</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LeakUploadService</span> <span class="keyword">extends</span> <span class="title">DefaultAnalysisResultService</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="keyword">protected</span> void afterDefaultHandling(<span class="type">HeapDump</span> heapDump, <span class="type">AnalysisResult</span> result, <span class="type">String</span> leakInfo) &#123;</div><div class="line">    <span class="keyword">if</span> (!result.leakFound || result.excludedLeak) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要确认发布的Application类使用无效的RefWatcher:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  public static <span class="type">RefWatcher</span> getRefWatcher(<span class="type">Context</span> context) &#123;</div><div class="line">    <span class="type">ExampleApplication</span> application = (<span class="type">ExampleApplication</span>) context.getApplicationContext();</div><div class="line">    <span class="keyword">return</span> application.refWatcher;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="type">RefWatcher</span> refWatcher;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> public void onCreate() &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    refWatcher = installLeakCanary();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> <span class="type">RefWatcher</span> installLeakCanary() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">RefWatcher</span>.<span class="type">DISABLED</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在你debug的Application类中创建一个自定义的RefWatcher:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DebugExampleApplication</span> <span class="keyword">extends</span> <span class="title">ExampleApplication</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="type">RefWatcher</span> installLeakCanary() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">LeakCanary</span>.install(app, <span class="type">LeakUploadService</span>.<span class="keyword">class</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要忘了在debug的manifest里面注册service:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    &gt;</div><div class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">"com.example.DebugExampleApplication"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.example.LeakUploadService"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你也可以上传leak traces到Slack或者HipChat，<a href="https://gist.github.com/pyricau/06c2c486d24f5f85f7f0" target="_blank" rel="external">这里是一个例子</a></p>
<p><img src="https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/icon_512.png" alt=""><br>LeakCanary名称是为了表达<a href="http://en.wiktionary.org/wiki/canary_in_a_coal_mine" target="_blank" rel="external">canary in a coal mine</a>，因为LeakCanary是通过提供危险预警，检测风险的哨兵，维护者@edenman提的建议!</p>
<p>###X. License</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Copyright 2015 Square, Inc.</div><div class="line"></div><div class="line">Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">you may not <span class="keyword">use</span> this <span class="keyword">file</span> <span class="keyword">except</span> <span class="keyword">in</span> compliance <span class="keyword">with</span> the License.</div><div class="line">You may obtain a copy <span class="keyword">of</span> the License <span class="keyword">at</span></div><div class="line"></div><div class="line">   <span class="keyword">http</span>://www.apache.org/licenses/LICENSE<span class="number">-2.0</span></div><div class="line"></div><div class="line">Unless <span class="keyword">required</span> <span class="keyword">by</span> applicable law <span class="keyword">or</span> agreed <span class="keyword">to</span> <span class="keyword">in</span> writing, software</div><div class="line"><span class="keyword">distributed</span> <span class="keyword">under</span> the License <span class="keyword">is</span> <span class="keyword">distributed</span> <span class="keyword">on</span> an <span class="string">"AS IS"</span> BASIS,</div><div class="line"><span class="keyword">WITHOUT</span> WARRANTIES <span class="keyword">OR</span> CONDITIONS <span class="keyword">OF</span> <span class="keyword">ANY</span> KIND, either express <span class="keyword">or</span> implied.</div><div class="line">See the License <span class="keyword">for</span> the specific <span class="keyword">language</span> governing permissions <span class="keyword">and</span></div><div class="line">limitations <span class="keyword">under</span> the License.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/square/leakcanary&quot;&gt;Github地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##git readme:&lt;/p&gt;
&lt;p&gt;###中文翻译@Jacksgong&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一款Android与Java的内存检测库&lt;br&gt;“A small leak will sink a gret ship.” - Benjamin Franklin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="内存" scheme="https://wait.im/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>SVG Android应用探究之路</title>
    <link href="https://wait.im/2014/06/21/SVG%20Android%E5%BA%94%E7%94%A8%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF/"/>
    <id>https://wait.im/2014/06/21/SVG Android应用探究之路/</id>
    <published>2014-06-20T16:12:36.000Z</published>
    <updated>2017-02-06T10:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h5><ul>
<li>vector</li>
<li>在所有大小分辨率屏幕上完美显示</li>
<li>SVG图片更小</li>
<li>一张图片可以更具需求多次使用？(One picture is used some times for different permissions)</li>
<li>减少加载时间</li>
</ul>
<a id="more"></a>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h5><p>图片只能按照比例缩放<br>不支持透明度？<br>svg文件还可以近一步优化，里面有一些不可取（The schedule needs to be simplified — the more vector elements, the the file more weighs. It is undesirable to use shades and luminescences as it in times increases the size of SVG-files）</p>
<h4 id="SVG-的探索来源于："><a href="#SVG-的探索来源于：" class="headerlink" title="SVG 的探索来源于："></a>SVG 的探索来源于：</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">No sooner said than done. So, under katom history <span class="keyword">of</span> introduction <span class="keyword">of</span> vector images </div><div class="line"><span class="keyword">in</span> one <span class="keyword">of</span> our applications. <span class="keyword">In</span> article we will impart experience also features <span class="keyword">of</span> </div><div class="line"><span class="keyword">use</span> <span class="keyword">of</span> vector images <span class="keyword">in</span> format SVG <span class="keyword">in</span> applications Android.</div></pre></td></tr></table></figure>
<h4 id="编辑器：Adobe-Illustrator-、Inkscape-work"><a href="#编辑器：Adobe-Illustrator-、Inkscape-work" class="headerlink" title="编辑器：Adobe Illustrator 、Inkscape work."></a>编辑器：Adobe Illustrator 、Inkscape work.</h4><h4 id="Google-“android-svg”"><a href="#Google-“android-svg”" class="headerlink" title="Google “android svg”:"></a>Google “android svg”:</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">projects on guglokode:</div><div class="line"><span class="selector-tag">code</span><span class="selector-class">.google</span><span class="selector-class">.com</span>/p/svg-android/</div><div class="line"><span class="selector-tag">code</span><span class="selector-class">.google</span><span class="selector-class">.com</span>/p/svg-android-<span class="number">2</span>/</div><div class="line">Detailed <span class="selector-tag">article</span> about use NDK:</div><div class="line">horribileru<span class="selector-class">.blogspot</span><span class="selector-class">.ru</span>/<span class="number">2011</span>/<span class="number">10</span>/android-imageview-svg<span class="selector-class">.html</span></div><div class="line">And some links to dead projects at different forums.</div></pre></td></tr></table></figure>
<h4 id="一、SVG-Android："><a href="#一、SVG-Android：" class="headerlink" title="一、SVG-Android："></a>一、SVG-Android：</h4><h5 id="GitHub-https-github-com-search-utf8-✓-amp-q-SVG-Android"><a href="#GitHub-https-github-com-search-utf8-✓-amp-q-SVG-Android" class="headerlink" title="GitHub: https://github.com/search?utf8=✓&amp;q=SVG-Android"></a>GitHub: <a href="https://github.com/search?utf8=✓&amp;q=SVG-Android" target="_blank" rel="external">https://github.com/search?utf8=✓&amp;q=SVG-Android</a></h5><p>他们项目通过底层封装的接口方式：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SVG svg = SVGParser.getSVGFromResource(getResources(), R.raw.filename)<span class="comment">;</span></div><div class="line">Drawable drawable = svg.createPictureDrawable()<span class="comment">;</span></div><div class="line">imageView.setImageDrawable(drawable)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>缺点: 只支持 SVG basic 1.1(不支持Inkspace编辑、只支持AdobeIllustrator编辑)</p>
<h4 id="二、-SVG-Android-2"><a href="#二、-SVG-Android-2" class="headerlink" title="二、 SVG-Android-2:"></a>二、 SVG-Android-2:</h4><h4 id="URL-https-code-google-com-p-svg-android-2-wiki-Introduction"><a href="#URL-https-code-google-com-p-svg-android-2-wiki-Introduction" class="headerlink" title="URL: https://code.google.com/p/svg-android-2/wiki/Introduction"></a>URL: <a href="https://code.google.com/p/svg-android-2/wiki/Introduction" target="_blank" rel="external">https://code.google.com/p/svg-android-2/wiki/Introduction</a></h4><h5 id="第一个发现：SVG在包含-阴影的情况下大小会飙升："><a href="#第一个发现：SVG在包含-阴影的情况下大小会飙升：" class="headerlink" title="第一个发现：SVG在包含 阴影的情况下大小会飙升："></a>第一个发现：SVG在包含 阴影的情况下大小会飙升：</h5><p><img src="http://blog.dreamtobe.cn/img/svg-k-1.png" alt="ICON1"><br>izorbrazhenija with a shade and without: 118 KB vs 1 KB</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决方法：删除对应的阴影</div></pre></td></tr></table></figure>
<h5 id="第二个发现：显示梯度颜色，不支持！"><a href="#第二个发现：显示梯度颜色，不支持！" class="headerlink" title="第二个发现：显示梯度颜色，不支持！"></a>第二个发现：显示梯度颜色，不支持！</h5><p>The problem with gradients has dared removal of superfluous tags from svg (it is described further in article). But basically, and with it it would be possible to live and in our simple images to replace a gradient with homogeneous pouring, if not other nuance — considerable load time of images.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决方法：用简单的图片代替</div></pre></td></tr></table></figure>
<p>后文(第三个发现)提到解决方法： After we have got rid of the given links, having edited code SVG in some images, the gradient began to be displayed correctly.<br><img src="http://blog.dreamtobe.cn/img/svg-k-2.png" alt="icon 2"><br>at the left — the black sky in the form of a gradient, on the right — a correct picture.</p>
<h5 id="第三个发现：加载时间"><a href="#第三个发现：加载时间" class="headerlink" title="第三个发现：加载时间"></a>第三个发现：加载时间</h5><p>根源：为什么SVG-Android-2这么耗时，</p>
<p>原因：SVGParser 解析Image XML file ，解析了两次，第一次 为第二次解析收集多余的属性。多余信息是：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">that</span> the most interesting, — <span class="keyword">is</span> analyzed only attribute xlink:href which <span class="keyword">is</span> a</div><div class="line">semblance <span class="keyword">of</span> hyperlinks <span class="keyword">in</span> the <span class="built_in">document</span>. In our problem images just there were</div><div class="line">such links, <span class="keyword">and</span> they conducted anywhere.</div></pre></td></tr></table></figure>
<p>成果：耗时，加载35个SVG的图片(PNG 500px*500px)：从原8s 减少到 1.8-2s。</p>
<h5 id="第四个发现：透明与颜色适配器"><a href="#第四个发现：透明与颜色适配器" class="headerlink" title="第四个发现：透明与颜色适配器"></a>第四个发现：透明与颜色适配器</h5><p>原因：库不是加载 典型的bitmapDrawable与pictureDrawable,并且源码中的setColorFilter、setAlpha方法都是空的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void setColorFilter(ColorFilter colorFilter) &#123;&#125;</div><div class="line">@Override</div><div class="line">public void setAlpha(int alpha) &#123;&#125;</div></pre></td></tr></table></figure>
<p>成果：在SVGHandler中发现一个Paint类型的fillPaint组件，如果能够在加载元素之前 创建colorFilter即可，略微调整SVGHandler加载SVG的代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterColor</span><span class="params">(<span class="keyword">int</span> filterColor)</span> </span>&#123;</div><div class="line">    fillPaint.setColorFilter(<span class="keyword">new</span> PorterDuffColorFilter(filterColor, Mode.MULTIPLY));</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>接口调整为：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">SVG svg</span> = SVGParser.getSVGFromResource(getResources(), rawSvgId, filterColor);</div></pre></td></tr></table></figure>
<p>因此我们能够在多张图片上通过引用一张图片使用不同的阴影颜色（As a result we could receive some images of different shades from one picture.）</p>
<p>对于透明度，建议并不适用setAlpha去实现（实际上是可以的通过fillPaint）:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Also <span class="keyword">it</span> is possible <span class="built_in">to</span> establish <span class="keyword">and</span> Alpha <span class="keyword">for</span> fillPaint, but <span class="keyword">in</span> games this property is required <span class="keyword">in</span> <span class="keyword">the</span> dynamic form (have pressed <span class="keyword">an</span> <span class="keyword">element</span> — has become translucent), <span class="keyword">and</span> podgruzhat <span class="keyword">each</span> <span class="built_in">time</span> <span class="keyword">the</span> <span class="built_in">new</span> image is inconvenient. Therefore this effect have replaced <span class="keyword">with</span> scaling (have pressed — <span class="keyword">the</span> <span class="keyword">element</span> has decreased).</div></pre></td></tr></table></figure>
<h5 id="第五个发现：异常处理："><a href="#第五个发现：异常处理：" class="headerlink" title="第五个发现：异常处理："></a>第五个发现：异常处理：</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.UnsupportedOperationException</span></div><div class="line">  at android<span class="selector-class">.view</span><span class="selector-class">.GLES20Canvas</span><span class="selector-class">.drawPicture</span>(GLES20Canvas<span class="selector-class">.java</span>:<span class="number">895</span>)</div><div class="line">  at android<span class="selector-class">.graphics</span><span class="selector-class">.drawable</span><span class="selector-class">.PictureDrawable</span><span class="selector-class">.draw</span>(PictureDrawable<span class="selector-class">.java</span>:<span class="number">73</span>)</div></pre></td></tr></table></figure>
<p>低版本不支持gpu(api &lt; 11)</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">setSoftwareLayerType</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">     view.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class="keyword">null</span>);</div><div class="line">   &#125; <span class="keyword">catch</span> (NoSuchMethodError e) &#123;</div><div class="line">       <span class="comment">//Do nothing - this happens on API &lt; 11</span></div><div class="line">   &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="使用SVG的项目："><a href="#使用SVG的项目：" class="headerlink" title="使用SVG的项目："></a>使用SVG的项目：</h4><p><a href="http://play.google.com/store/apps/details?id=com.whisperarts.kids.forms" target="_blank" rel="external">http://play.google.com/store/apps/details?id=com.whisperarts.kids.forms</a></p>
<blockquote>
<p>本文总结自：<a href="http://sysmagazine.com/posts/166093/" target="_blank" rel="external">http://sysmagazine.com/posts/166093/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点:&quot;&gt;&lt;/a&gt;优点:&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;vector&lt;/li&gt;
&lt;li&gt;在所有大小分辨率屏幕上完美显示&lt;/li&gt;
&lt;li&gt;SVG图片更小&lt;/li&gt;
&lt;li&gt;一张图片可以更具需求多次使用？(One picture is used some times for different permissions)&lt;/li&gt;
&lt;li&gt;减少加载时间&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="JAVA" scheme="https://wait.im/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo上的第一篇博文</title>
    <link href="https://wait.im/2014/03/02/Hexo%E4%B8%8A%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>https://wait.im/2014/03/02/Hexo上第一篇博文/</id>
    <published>2014-03-01T16:18:36.000Z</published>
    <updated>2015-11-09T16:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是使用Hexo搭建的博客后写的第一篇博文，搭建的过程还算顺利，写代码也写了两年了，觉得去总结一下也挺好，以后会把自己平时遇到的一些问题总结出来，码农也要学会总结，去提高自己。</p>
<p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>，特别感谢Hexo，上面的介绍已经非常详细了，感觉比搜出来的一些博文稍微靠谱一点。Node.js装环境的时候遇到不少问题，Hexo官网上都有非常好的解决方案，言简意赅。还要感谢前辈们的总结，在建博客的时候对我的帮助也不少。加油！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是使用Hexo搭建的博客后写的第一篇博文，搭建的过程还算顺利，写代码也写了两年了，觉得去总结一下也挺好，以后会把自己平时遇到的一些问题总结出来，码农也要学会总结，去提高自己。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank
    
    </summary>
    
    
      <category term="Hexo" scheme="https://wait.im/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android清理内存</title>
    <link href="https://wait.im/2013/10/25/Android%E6%B8%85%E7%90%86%E5%86%85%E5%AD%98/"/>
    <id>https://wait.im/2013/10/25/Android清理内存/</id>
    <published>2013-10-24T16:16:36.000Z</published>
    <updated>2017-02-06T10:58:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android内存清理，利用ActivityManager获取当前正在运行的进程，清理这些进程释放内存。</p>
<p>可以根据importance的不同来判断前台或后台RunningAppProcessInfo 里面的常量IMOPORTANCE就是上面所说的前台后台，其实IMOPORTANCE是表示这个app进程的重要性，因为系统回收时候，会根据IMOPORTANCE来回收进程的。具体可以去看文档。。</p>
<p>在配置文件中添加权限</p>
<uses-permission android:name="”android.permission.KILL_BACKGROUND_PROCESSES”/">

<p>内存清理代码以及获取系统内存和各个APP占用内存代码如下：</p>
<a id="more"></a>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by thinkloki on 2013/8/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemUtil</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取可用内存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> getAvailMemory(Context context) &#123;</div><div class="line">        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        ActivityManager.MemoryInfo mi = <span class="keyword">new</span> ActivityManager.MemoryInfo();</div><div class="line">        am.getMemoryInfo(mi);</div><div class="line">        <span class="keyword">return</span> mi.availMem / (<span class="number">1024</span> * <span class="number">1024</span>);</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取总内存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> getTotalMemory(Context context) &#123;</div><div class="line">        String str1 = <span class="string">"/proc/meminfo"</span>;<span class="comment">// 系统内存信息文件</span></div><div class="line">        String str2;</div><div class="line">        String[] arrayOfString;</div><div class="line">        <span class="keyword">long</span> initial_memory = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileReader localFileReader = <span class="keyword">new</span> FileReader(str1);</div><div class="line">            BufferedReader localBufferedReader = <span class="keyword">new</span> BufferedReader(</div><div class="line">                    localFileReader, <span class="number">8192</span>);</div><div class="line">            str2 = localBufferedReader.readLine();<span class="comment">// 读取meminfo第一行，系统总内存大小</span></div><div class="line">            arrayOfString = str2.split(<span class="string">"\\s+"</span>);</div><div class="line">            initial_memory = Integer.valueOf(arrayOfString[<span class="number">1</span>]).intValue() * <span class="number">1024</span>;<span class="comment">// 获得系统总内存，单位是KB，乘以1024转换为Byte</span></div><div class="line">            localBufferedReader.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> initial_memory / (<span class="number">1024</span> * <span class="number">1024</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"><span class="comment">//    public static final int IMPORTANCE_BACKGROUND = 400//后台</span></div><div class="line"><span class="comment">//    public static final int IMPORTANCE_EMPTY = 500//空进程</span></div><div class="line"><span class="comment">//    public static final int IMPORTANCE_SERVICE = 300//在服务中</span></div><div class="line"><span class="comment">//    public static final int IMPORTANCE_VISIBLE = 200//在屏幕前端、获取不到焦点可理解为</span></div><div class="line"><span class="comment">//    public static final int IMPORTANCE_FOREGROUND = 100//在屏幕最前端、可获取到焦点 可理解为Activity生命周期的OnResume();</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清理内存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void clearMemory(Context context) &#123;</div><div class="line">        ActivityManager activityManger = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        <span class="keyword">List</span>&lt;ActivityManager.RunningAppProcessInfo&gt; <span class="keyword">list</span> = activityManger.getRunningAppProcesses();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">list</span> != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.size(); i++) &#123;</div><div class="line">                ActivityManager.RunningAppProcessInfo apinfo = <span class="keyword">list</span>.get(i);</div><div class="line">                String[] pkgList = apinfo.pkgList;</div><div class="line">                <span class="keyword">if</span> (apinfo.importance &gt; ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pkgList.length; j++) &#123;</div><div class="line">                        <span class="comment">/**清理不可用的内容空间**/</span></div><div class="line">                        activityManger.killBackgroundProcesses(pkgList[j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取每个APP占用的内存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void getEveryAppMemory(Context context) &#123;</div><div class="line">        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        <span class="keyword">List</span>&lt;ActivityManager.RunningAppProcessInfo&gt; <span class="keyword">list</span> = am.getRunningAppProcesses();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">list</span> != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.size(); i++) &#123;</div><div class="line">                ActivityManager.RunningAppProcessInfo appinfo = <span class="keyword">list</span>.get(i);</div><div class="line">                <span class="keyword">int</span>[] myMempid = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;appinfo.pid&#125;;</div><div class="line">                Debug.MemoryInfo[] appMem = am.getProcessMemoryInfo(myMempid);</div><div class="line">                <span class="keyword">int</span> memSize = appMem[<span class="number">0</span>].dalvikPrivateDirty / <span class="number">1024</span>;</div><div class="line">                Log.e(<span class="string">"AppMemory"</span>, appinfo.processName + <span class="string">":"</span> + memSize);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清理应用缓存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void clearAppCache(Context context) &#123;</div><div class="line">        File[] dir = context.getCacheDir().listFiles();</div><div class="line">        <span class="keyword">if</span> (dir != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (File f : dir) &#123;</div><div class="line">                f.delete();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</uses-permission>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android内存清理，利用ActivityManager获取当前正在运行的进程，清理这些进程释放内存。&lt;/p&gt;
&lt;p&gt;可以根据importance的不同来判断前台或后台RunningAppProcessInfo 里面的常量IMOPORTANCE就是上面所说的前台后台，其实IMOPORTANCE是表示这个app进程的重要性，因为系统回收时候，会根据IMOPORTANCE来回收进程的。具体可以去看文档。。&lt;/p&gt;
&lt;p&gt;在配置文件中添加权限&lt;/p&gt;
&lt;uses-permission android:name=”android.permission.KILL_BACKGROUND_PROCESSES”/&gt;

&lt;p&gt;内存清理代码以及获取系统内存和各个APP占用内存代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="内存" scheme="https://wait.im/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Android动画简单学习</title>
    <link href="https://wait.im/2013/10/21/Android%E5%8A%A8%E7%94%BB%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wait.im/2013/10/21/Android动画简单学习/</id>
    <published>2013-10-20T16:16:36.000Z</published>
    <updated>2017-02-06T10:57:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>再复杂的动画，都是简单动画的结合</p>
</blockquote>
<h3 id="I-Tween-Animation-补间动画"><a href="#I-Tween-Animation-补间动画" class="headerlink" title="I. Tween Animation(补间动画)"></a>I. Tween Animation(补间动画)</h3><table>
<thead>
<tr>
<th>形式</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>alpha</td>
<td>渐变透明度</td>
</tr>
<tr>
<td>scale</td>
<td>渐变尺寸</td>
</tr>
<tr>
<td>translate</td>
<td>画面位置移动</td>
</tr>
<tr>
<td>rotate</td>
<td>画面旋转</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>Animation配合AnimationUtils，结合xml中set</p>
<h3 id="II-Frame-Animation-关键帧动画"><a href="#II-Frame-Animation-关键帧动画" class="headerlink" title="II. Frame Animation(关键帧动画)"></a>II. Frame Animation(关键帧动画)</h3><blockquote>
<p>顺序播放关键帧</p>
</blockquote>
<h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><p>AnimationDrawable结合xml中定义animation-list标签</p>
<blockquote>
<p>AnimationDrawable本身无法监听动画状态</p>
</blockquote>
<h3 id="III-对象属性动画"><a href="#III-对象属性动画" class="headerlink" title="III. 对象属性动画"></a>III. 对象属性动画</h3><blockquote>
<p>Andorid 3.0加入(如果3.0以下想用使用，可以参考开源动画库: <a href="http://nineoldandroids.com/" target="_blank" rel="external">http://nineoldandroids.com/</a>)<br>基本概念: 可以对对象属性进行动画，不仅仅是View</p>
</blockquote>
<p>动画的默认帧率是一帧10ms(100帧/s(Android正常绘制60帧/s))</p>
<h5 id="1-TimeInterpolator-时间插值器"><a href="#1-TimeInterpolator-时间插值器" class="headerlink" title="1. TimeInterpolator(时间插值器)"></a>1. TimeInterpolator(时间插值器)</h5><blockquote>
<p>根据时间流逝的百分比来计算出当前属性值改变的百分比</p>
</blockquote>
<h6 id="系统默认提供的"><a href="#系统默认提供的" class="headerlink" title="系统默认提供的"></a>系统默认提供的</h6><ul>
<li>LinearInterpolator: 线性插值器，匀速动画</li>
<li>AccelerateDecelerateInterpolator: 加速减速插值器，动画两头慢中间快</li>
<li>DecelerateInterpolator: 减速插值器，动画越来越慢</li>
<li>AccelerateInterpolator: 加速插值器，动画越来越快</li>
<li>…</li>
</ul>
<h5 id="2-TypeEvaluator-类型估值算法"><a href="#2-TypeEvaluator-类型估值算法" class="headerlink" title="2. TypeEvaluator(类型估值算法)"></a>2. TypeEvaluator(类型估值算法)</h5><blockquote>
<p>根据当前属性改变的百分比来计算改变后的属性值</p>
</blockquote>
<h6 id="系统默认提供的-1"><a href="#系统默认提供的-1" class="headerlink" title="系统默认提供的"></a>系统默认提供的</h6><ul>
<li>IntEvaluator: 针对整型属性</li>
<li>FloatEvaluator: 针对浮点型属性</li>
<li>ArgbEvaluator: 针对Color属性</li>
<li>…</li>
</ul>
<blockquote>
<p>TypeEvaluator与TimeInterpolator是实现非匀速动画的神器。</p>
</blockquote>
<h4 id="实现方式-2"><a href="#实现方式-2" class="headerlink" title="实现方式"></a>实现方式</h4><p>TimeInterpolator与TypeEvaluator两者是配合使用的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="comment">// 返回时间流逝的百分比 input = (当前时间 - 开始时间)/ 总时间</span></div><div class="line">        <span class="keyword">return</span> input; <span class="comment">// 匀速</span></div><div class="line">        <span class="comment">//return input * input; //加速</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class="line">        <span class="comment">// 返回需要变化的整型</span></div><div class="line">        <span class="keyword">int</span> startInt = startValue;</div><div class="line">        <span class="comment">// fraction: LinearInterpolator返回的流逝百分比</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(startInt + fraction * (endValue - startInt));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-ObjectAnimator、ValueAnimator、AnimatorSet"><a href="#3-ObjectAnimator、ValueAnimator、AnimatorSet" class="headerlink" title="3. ObjectAnimator、ValueAnimator、AnimatorSet"></a>3. ObjectAnimator、ValueAnimator、AnimatorSet</h5><blockquote>
<p>都可以直接在xml中定义 / 直接代码中实现，结合TimeInterpolator与TypeEvaluator，几乎可以实现所有想要的动画</p>
</blockquote>
<hr>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以下例子来自: <a href="http://blog.csdn.net/singwhatiwanna/article/details/17639987" target="_blank" rel="external">Android动画进阶—使用开源动画库nineoldandroids</a>与<a href="http://blog.csdn.net/singwhatiwanna/article/details/17841165" target="_blank" rel="external">Android属性动画深入分析</a>：让你成为动画牛人</p>
<h5 id="第二个参数PropertyName"><a href="#第二个参数PropertyName" class="headerlink" title="第二个参数PropertyName"></a>第二个参数PropertyName</h5><blockquote>
<p>PropertyName: 如第一个例子的”translationY”</p>
<p>我们定义第一个例子中的myObject为target</p>
</blockquote>
<ol>
<li>如果Animator中已经提供初始值，就只需要target包含Property的set方法(如第一个例子中myObject需要包含<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>TranslationY(<span class="built_in">float</span>)</div><div class="line">```)</div><div class="line">2. 如果Animator中未提供初始值，除了需要<span class="built_in">set</span>方法，还需要包含Property的get方法(如地i一个例子中myObject需要包含</div></pre></td></tr></table></figure>
</li>
</ol>
<p>getTranslationY():float<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3. 满足以上两条，就可以定义为Property</div><div class="line">&gt;如果View/某对象没有满足上面的条件，如果可以，未尝不可自己封装一层实现。</div></pre></td></tr></table></figure></p>
<p>// 默认时间内，移动其高度的距离<br>ObjectAnimator.ofFloat(myObject, “translationY”, -myObject.getHeight()).start();<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>//  不断循环3s内背景颜色从红色渐变到蓝色再到红色<br>ValueAnimator colorAnim = ObjectAnimator.ofInt(<br>                this, “backgroundColor”,<br>                /<em>Red</em>/0xFFFF8080,/<em>Blue</em>/0xFF8080FF);<br>colorAnim.setDuration(3000);<br>colorAnim.setEvaluator(new ArgbEvaluator());<br>colorAnim.setRepeatCount(ValueAnimator.INFINITE);<br>colorAnim.setRepeatMode(ValueAnimator.REVERSE);<br>colorAnim.start();<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>// 5s内同时对View旋转、平移、缩放、透明都进行了改变<br>AnimatorSet set = new AnimatorSet();<br>set.playTogether(<br>    ObjectAnimator.ofFloat(myView, “rotationX”, 0, 360),<br>    ObjectAnimator.ofFloat(myView, “rotationY”, 0, 180),<br>    ObjectAnimator.ofFloat(myView, “rotation”, 0, -90),<br>    ObjectAnimator.ofFloat(myView, “translationX”, 0, 90),<br>    ObjectAnimator.ofFloat(myView, “translationY”, 0, 90),<br>    ObjectAnimator.ofFloat(myView, “scaleX”, 1, 1.5f),<br>    ObjectAnimator.ofFloat(myView, “scaleY”, 1, 0.5f),<br>    ObjectAnimator.ofFloat(myView, “alpha”, 1, 0.25f, 1)<br>);<br>set.setDuration(5 * 1000).start();<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>// ValueAnimator的使用<br>// 5s内匀速修改target的宽度<br>private void performAnimate(final View target, final int start, final int end) {<br>    ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);</p>
<pre><code>valueAnimator.addUpdateListener(new AnimatorUpdateListener() {

    //持有一个IntEvaluator对象，方便下面估值的时候使用
    private IntEvaluator mEvaluator = new IntEvaluator();

    @Override
    public void onAnimationUpdate(ValueAnimator animator) {
        //获得当前动画的进度值，整型，1-100之间
        int currentValue = (Integer)animator.getAnimatedValue();
        Log.d(TAG, &quot;current value: &quot; + currentValue);

        //计算当前进度占整个动画过程的比例，浮点型，0-1之间
        float fraction = currentValue / 100f;

        //直接调用整型估值器通过比例计算出宽度，然后再设给Button
        target.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);
        target.requestLayout();
    }
});

valueAnimator.setDuration(5000).start();
</code></pre><p>}<br>```</p>
<ul>
<li><a href="https://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html" target="_blank" rel="external">Property Animation</a></li>
<li><a href="http://blog.csdn.net/singwhatiwanna/article/details/9270275" target="_blank" rel="external">android动画简介</a></li>
<li><a href="http://blog.csdn.net/singwhatiwanna/article/details/17639987" target="_blank" rel="external">Android动画进阶—使用开源动画库nineoldandroids</a></li>
<li><a href="http://blog.csdn.net/qingye_love/article/details/8859347" target="_blank" rel="external">Animation 之 Interpolator 插补器理解</a></li>
<li><a href="http://blog.csdn.net/singwhatiwanna/article/details/17841165" target="_blank" rel="external">Android属性动画深入分析：让你成为动画牛人</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;再复杂的动画，都是简单动画的结合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;I-Tween-Animation-补间动画&quot;&gt;&lt;a href=&quot;#I-Tween-Animation-补间动画&quot; class=&quot;headerlink&quot; title=&quot;I. Tween Animation(补间动画)&quot;&gt;&lt;/a&gt;I. Tween Animation(补间动画)&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;形式&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alpha&lt;/td&gt;
&lt;td&gt;渐变透明度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale&lt;/td&gt;
&lt;td&gt;渐变尺寸&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate&lt;/td&gt;
&lt;td&gt;画面位置移动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotate&lt;/td&gt;
&lt;td&gt;画面旋转&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://wait.im/tags/Android/"/>
    
      <category term="JAVA" scheme="https://wait.im/tags/JAVA/"/>
    
      <category term="动画" scheme="https://wait.im/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>多线程线程通讯和生产者</title>
    <link href="https://wait.im/2012/07/30/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%80%9A%E8%AE%AF%E5%92%8C%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    <id>https://wait.im/2012/07/30/多线程线程通讯和生产者/</id>
    <published>2012-07-29T16:18:36.000Z</published>
    <updated>2017-02-06T10:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>线程间通讯——等待唤醒机制<br>1，wait()；是让线程处于冻结状态，被wait线程会被存储到线程池中。<br>2,notify()；唤醒线程池中的一个线程(任意)。<br>3,notifyAll()；唤醒线程池中的所有线程，让线程具备了执行资格。<br>使用时要注意使用在同步中，因为只有同步才会具有锁。<br>调用时需要明确对象，明确是哪个监视器。<br>任意对象可以调用的方法定义在Object里面。</p>
<p>锁可以是任意对象。<br>为什么这些操作线程方法要定义在Object类中：因为这些方法在操作同步中线程时，都必须要标识它们所操作线程特有的锁，<br>只有同一个锁上的被等待线程，可以被同一个锁上的notify唤醒。<br>不可以对不同锁中的线程进行唤醒。等待和唤醒必须是同一个锁。而锁的对象是任意的，所以可以被任意对象调用的方法定义在Object类中。<br><a id="more"></a><br>一、线程间通信：<br>class Res<br>{<br>private String name;<br>private String sex;<br>private boolean flag = false;</p>
<p>public synchronized void set(String name,String sex)<br>{<br>if(flag)<br>try{this.wait();}catch(Exception e){}<br>this.name = name;</p>
<p>this.sex = sex;<br>flag = true;<br>this.notify();<br>}<br>public synchronized void out()<br>{<br>if(!flag)<br>try{this.wait();}catch(Exception e){}<br>System.out.println(name+”……..”+sex);<br>flag = false;<br>this.notify();<br>}<br>}</p>
<p>class Input implements Runnable<br>{<br>private Res r ;<br>Input(Res r)<br>{<br>this.r = r;<br>}<br>public void run()<br>{<br>int x = 0;<br>while(true)<br>{<br>if(x==0)<br>r.set(“mike”,”man”);<br>else<br>r.set(“丽丽”,”女女女女女”);<br>x = (x+1)%2;<br>}<br>}<br>}</p>
<p>class Output implements Runnable<br>{<br>private Res r ;</p>
<p>Output(Res r)<br>{<br>this.r = r;<br>}<br>public void run()<br>{<br>while(true)<br>{<br>r.out();<br>}<br>}<br>}</p>
<p>class  InputOutputDemo2<br>{<br>public static void main(String[] args)<br>{<br>Res r = new Res();</p>
<p>new Thread(new Input(r)).start();<br>new Thread(new Output(r)).start();<br>/*<br>Input in = new Input(r);<br>Output out = new Output(r);</p>
<p>Thread t1 = new Thread(in);<br>Thread t2 = new Thread(out);</p>
<p>t1.start();<br>t2.start();<br>*/<br>}<br>}<br>二、线程间通信-生产者和消费者<br>全部wait，生产和消费者多次判断，用while循环，唤醒时需要唤醒两方的人，这时我们用this.notifyAll().<br>对于多生产者和多消费者。<br>为什么要定义while判断标记。<br>原因：让被唤醒的线程在判断一次标记。<br>定义notifyAll，因为需要唤醒对方线程，只用notify，会出现只唤醒本方线程的情况。导致程序中所有线程都等待。<br>class ProducerConsumerDemo<br>{<br>public static void main(String[] args)<br>{<br>Resource r = new Resource();</p>
<p>Producer pro = new Producer(r);<br>Consumer con = new Consumer(r);</p>
<p>Thread t1 = new Thread(pro);<br>Thread t2 = new Thread(pro);<br>Thread t3 = new Thread(con);<br>Thread t4 = new Thread(con);</p>
<p>t1.start();<br>t2.start();<br>t3.start();<br>t4.start();</p>
<p>}<br>}</p>
<p>/*<br>对于多个生产者和消费者。<br>为什么要定义while判断标记。<br>原因：让被唤醒的线程再一次判断标记。</p>
<p>为什么定义notifyAll，<br>因为需要唤醒对方线程。<br>因为只用notify，容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待。</p>
<p>*/</p>
<p>class Resource<br>{<br>private String name;<br>private int count = 1;<br>private boolean flag = false;<br>//  t1    t2<br>public synchronized void set(String name)<br>{<br>while(flag)<br>try{this.wait();}catch(Exception e){}//t1(放弃资格)  t2(获取资格)<br>this.name = name+”–”+count++;</p>
<p>System.out.println(Thread.currentThread().getName()+”…生产者..”+this.name);<br>flag = true;<br>this.notifyAll();<br>}</p>
<p>//  t3   t4<br>public synchronized void out()<br>{<br>while(!flag)<br>try{wait();}catch(Exception e){}//t3(放弃资格) t4(放弃资格)<br>System.out.println(Thread.currentThread().getName()+”…消费者………”+this.name);<br>flag = false;<br>this.notifyAll();<br>}<br>}</p>
<p>class Producer implements Runnable<br>{<br>private Resource res;</p>
<p>Producer(Resource res)<br>{<br>this.res = res;<br>}<br>public void run()<br>{<br>while(true)<br>{<br>res.set(“+商品+”);<br>}<br>}<br>}</p>
<p>class Consumer implements Runnable<br>{<br>private Resource res;</p>
<p>Consumer(Resource res)<br>{<br>this.res = res;<br>}<br>public void run()<br>{<br>while(true)<br>{<br>res.out();<br>}<br>}<br>}<br>三、JDK1.5中提供多线程解决方案。<br>将同步Synchronized替换成现实的Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。<br>该对象可以Lock锁 进行获取。<br>该示例中，实现了本方只唤醒对方操作。<br>生产者、消费者有什么替代方案？<br>答：1.5版本以后，它提供了显示的锁机制以及显示的锁对象的等待唤醒操作机制，同时对等待唤醒进行了封装。一个锁可以对象多个Condition对象。<br>import java.util.concurrent.locks.*;</p>
<p>class ProducerConsumerDemo2<br>{<br>public static void main(String[] args)<br>{<br>Resource r = new Resource();</p>
<p>Producer pro = new Producer(r);<br>Consumer con = new Consumer(r);</p>
<p>Thread t1 = new Thread(pro);<br>Thread t2 = new Thread(pro);<br>Thread t3 = new Thread(con);<br>Thread t4 = new Thread(con);</p>
<p>t1.start();<br>t2.start();<br>t3.start();<br>t4.start();</p>
<p>}<br>}</p>
<p>/*<br>JDK1.5 中提供了多线程升级解决方案。<br>将同步Synchronized替换成现实Lock操作。<br>将Object中的wait，notify notifyAll，替换了Condition对象。<br>该对象可以Lock锁 进行获取。<br>该示例中，实现了本方只唤醒对方操作。</p>
<p>Lock:替代了Synchronized<br>lock<br>unlock<br>newCondition()</p>
<p>Condition：替代了Object wait notify notifyAll<br>await();<br>signal();<br>signalAll();<br>*/<br>class Resource<br>{<br>private String name;<br>private int count = 1;<br>private boolean flag = false;<br>//  t1    t2<br>private Lock lock = new ReentrantLock();</p>
<p>private Condition condition_pro = lock.newCondition();<br>private Condition condition_con = lock.newCondition();</p>
<p>public  void set(String name)throws InterruptedException<br>{<br>lock.lock();<br>try<br>{<br>while(flag)<br>condition_pro.await();//t1,t2<br>this.name = name+”–”+count++;</p>
<p>System.out.println(Thread.currentThread().getName()+”…生产者..”+this.name);<br>flag = true;<br>condition_con.signal();<br>}<br>finally<br>{<br>lock.unlock();//释放锁的动作一定要执行。<br>}<br>}</p>
<p>//  t3   t4<br>public  void out()throws InterruptedException<br>{<br>lock.lock();<br>try<br>{<br>while(!flag)<br>condition_con.await();<br>System.out.println(Thread.currentThread().getName()+”…消费者………”+this.name);<br>flag = false;<br>condition_pro.signal();<br>}<br>finally<br>{<br>lock.unlock();<br>}</p>
<p>}<br>}</p>
<p>class Producer implements Runnable<br>{<br>private Resource res;</p>
<p>Producer(Resource res)<br>{<br>this.res = res;<br>}<br>public void run()<br>{<br>while(true)<br>{<br>try<br>{<br>res.set(“+商品+”);<br>}<br>catch (InterruptedException e)<br>{<br>}</p>
<p>}<br>}<br>}</p>
<p>class Consumer implements Runnable<br>{<br>private Resource res;</p>
<p>Consumer(Resource res)<br>{<br>this.res = res;<br>}<br>public void run()<br>{<br>while(true)<br>{<br>try<br>{<br>res.out();<br>}<br>catch (InterruptedException e)<br>{<br>}<br>}<br>}<br>}</p>
<p>四、停止线程<br>只有一种，run方法结束。<br>开启多线程运行，运行代码通常是循环结构。只要控制住循环，就可以让run方法结束，也就是线程结束。<br>特殊情况：<br>当线程处于了冻结状态。就不会读取到标记。那么线程就不会结束。<br>当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对冻结进行清除。强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。<br>Thread类提供该方法 interrupt();<br>class StopThread implements Runnable<br>{<br>private boolean flag =true;<br>public  void run()<br>{<br>while(flag)<br>{</p>
<p>System.out.println(Thread.currentThread().getName()+”….run”);<br>}<br>}<br>public void changeFlag()<br>{<br>flag = false;<br>}<br>}</p>
<p>class  StopThreadDemo<br>{<br>public static void main(String[] args)<br>{<br>StopThread st = new StopThread();</p>
<p>Thread t1 = new Thread(st);<br>Thread t2 = new Thread(st);</p>
<p>t1.setDaemon(true);<br>t2.setDaemon(true);<br>t1.start();<br>t2.start();</p>
<p>int num = 0;</p>
<p>while(true)<br>{<br>if(num++ == 60)<br>{<br>//st.changeFlag();<br>//t1.interrupt();<br>//t2.interrupt();<br>break;<br>}<br>System.out.println(Thread.currentThread().getName()+”…….”+num);<br>}<br>System.out.println(“over”);<br>}<br>}<br>五、守护线程</p>
<p>后台进程和前台进程共同抢夺CPU的执行权。</p>
<p>在启动线程时调用，当正在运行的此案称都是守护线程时，java虚拟机退出。</p>
<p>六.Join方法</p>
<p>主线程在向下执行的时候，遇到了join的时候是要申请加入到运行中来（通常来讲就是要有限取得cpu的执行权）主线程的执行权就给了它，此时主线程执行就处于冻结状态，当join结束时，主线程才复活。</p>
<p>join（）：当需要临时加入一个线程时。</p>
<p>join的特点：</p>
<p>当A线程执行到B线程的join（）方法时。A就会等待，等B线程都执行完，A才会执行，join可以用来临时加入线程执行。</p>
<p>join可以用来临时加入线程执行。</p>
<p>优先级&amp;yield方法</p>
<p>线程默认的优先级是5（1—10级）</p>
<p>MAX_PRIORITY 线程具有的最高优先级。</p>
<p>MIN_PRIORITY 分配给线程的默认优先级。</p>
<p>NORM_PRIORITY 线程可以具有的最低优先级。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程间通讯——等待唤醒机制&lt;br&gt;1，wait()；是让线程处于冻结状态，被wait线程会被存储到线程池中。&lt;br&gt;2,notify()；唤醒线程池中的一个线程(任意)。&lt;br&gt;3,notifyAll()；唤醒线程池中的所有线程，让线程具备了执行资格。&lt;br&gt;使用时要注意使用在同步中，因为只有同步才会具有锁。&lt;br&gt;调用时需要明确对象，明确是哪个监视器。&lt;br&gt;任意对象可以调用的方法定义在Object里面。&lt;/p&gt;
&lt;p&gt;锁可以是任意对象。&lt;br&gt;为什么这些操作线程方法要定义在Object类中：因为这些方法在操作同步中线程时，都必须要标识它们所操作线程特有的锁，&lt;br&gt;只有同一个锁上的被等待线程，可以被同一个锁上的notify唤醒。&lt;br&gt;不可以对不同锁中的线程进行唤醒。等待和唤醒必须是同一个锁。而锁的对象是任意的，所以可以被任意对象调用的方法定义在Object类中。&lt;br&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://wait.im/tags/JAVA/"/>
    
      <category term="多线程" scheme="https://wait.im/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面对对象基础跟内部类</title>
    <link href="https://wait.im/2012/07/30/%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E8%B7%9F%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://wait.im/2012/07/30/面对对象基础跟内部类/</id>
    <published>2012-07-29T16:18:36.000Z</published>
    <updated>2017-02-06T10:57:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、面对对象的三大特征：封装、继承、多态。</p>
<font color="#24130c" face="Arial, Helvetica, simsun, u5b8bu4f53">    <font size="3">抽象：</font></font><font size="3">把现实中需要处理的事物通过数据的方法表达出来就是抽象。将现实的东西编程计算机的模式。</font>

<font size="3"><font face="arial, courier new, courier, 宋体, monospace">    封装：</font>把事物的数据和方法用类的方式集合起来就是封装，封装的数据和方法通过继承来实现重用。</font>

<font size="3"><font face="arial, courier new, courier, 宋体, monospace">    多态：</font>同一个方法通过方法的重载实现不同的逻辑即多态。</font>

<p>二、面对对象软件开发的大体分为，面向对象的分析，面向对象的设计，面向对象的实现。</p>
<p>分析用户的需求，从问题中抽取对象模型，细化模型，设计类，包括类的属性和类间的相互关系。同时观察是否有可以直接引用的已有的类或部件；使用Java语言，在开发中引入测试，并完善整个解决方案。<br><a id="more"></a><br>三、类</p>
<p>class前的修饰符分为访问控制符和非访问控制符两类。访问控制符包括public和private。非访问控制符包括abstract和final。</p>
<p>final是最终类，是不能有子类的，abstract和final不能修饰同一个类，因为抽象类本身没有具体的对象，需要派生出子类后在创建子类的对象。而最终不可能有子类。</p>
<p>创建对象的格式：类名+对象名=new 构造方法（参数）；前面是类名，后面是构造方法。</p>
<p>构造方法（构造函数）没有返回类型，也不能用void，主要完成对对象的初始化工作，一般不能直接由编程直接调用，而是用new运算符来调用。</p>
<p>如果class前面用public修饰，则默认构造方法的前面也是public修饰符。类中有static修饰的域或方法，可用类名或对象名进行访问。否则只能用对象名访问。</p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>内部类的总结：</span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span></p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp;<span style="white-space:pre;">    </span></span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">内部类是指在一个外部类的内部再定义一个类。内部类作为外部类的一个成员，并且依附于外部类而存在的。</span></p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp;<span style="white-space:pre;">    </span></span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">内部类同时具有成员和类的特性（特性不冲突）。&nbsp;内部类的分类：</span></p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp;<span style="white-space:pre;">    </span></span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">成员内部类、</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">局部内部类、</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">静态内部类、</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">匿名内部类（图形是要用到，必须掌握）。</span></p>
<p><span style="white-space:pre;">        </span>1.成员内部类</p>
<p>成员内部类是定义在一个类中的类，他将信息更好的封装于一个类中，定义成员内部类后在使用它时可将其当成外部类的成员来使用，但若要使用内部类中的成员则需要创建内部类的实例。</p>
<p><span style="white-space:pre;">    </span>成员内部类和外部类之间的访问权限。</p>
<p>在类里面定义的类称之为内部类（Inner Class），内部类是外部类的一个成员。</p>
<p>内部类必须创建外部类对象才能使用。而创建内部类对象时必须先创建一个外部类对象，通过一个外部类对象才能创建内部类对象。</p>
<p>外部类名.内部类名&nbsp;变量名&nbsp;=&nbsp;new&nbsp;外部类名().new&nbsp;内部类名();</p>
<pre class="prettyprint">

class&nbsp;Inner{
<font color="#333333">//static&nbsp;int&nbsp;inner_i&nbsp;=100;&nbsp;//</font><font face="宋体"><font color="#333333">内部类中不允</font>许定</font>义<font color="#0000ff">静态</font><font color="#0000ff">变量</font>
<font color="#333333">int&nbsp;j=100;//</font><font face="宋体"><font color="#333333">内部类中外部类的</font><font color="#0000ff">实例变量</font></font>可以共存
int&nbsp;inner_i=1;
void&nbsp;inner_f1()

{
&nbsp;&nbsp;&nbsp;&nbsp;        System.out.println(i);//<font face="宋体">外部类的变量如果和内部类的变量没有同名的，则可以直接用变量名访问外部类的变量</font>
&nbsp;&nbsp;&nbsp;&nbsp;        System.out.println(j);//<font face="宋体">在内部类中访问内部类自己的变量直接用变量名</font>
&nbsp;&nbsp;&nbsp;    &nbsp;    System.out.println(this.j);//<font face="宋体">也可以在内部类中用</font><font face="Arial">"this.</font><font face="宋体">变量名</font><font face="Arial">"</font><font face="宋体">来访问内部类变量</font>
&nbsp;&nbsp;&nbsp;&nbsp;        //<font face="宋体">访问外部类中与内部类同名的</font>实例变量可用<font face="Arial">"</font><font face="宋体">外部类名</font><font face="Arial">.this.</font><font face="宋体">变量名</font><font face="Arial">"</font><font face="宋体">。</font>
&nbsp;&nbsp;&nbsp;&nbsp;        System.out.println(k);//<font face="宋体">外部类的变量如果和内部类的变量没有同名的，则可以直接用变量名访问外部类的变量</font>
&nbsp;&nbsp;&nbsp;&nbsp;        outer_f1();
&nbsp;&nbsp;&nbsp;&nbsp;        outer_f2();
}
}
</pre>

<p>成员内部类的优点：</p>
<pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">    ⑴ 内部类作为外部类的成员，可以访问外部类的私有成员或属性。（即使将外部类声明为PRIVATE，但是对于处于其内部的内部类还是可见的。）
⑵ 用内部类定义在外部类中不可访问的属性。这样就在外部类中实现了比外部类的private还要小的访问权限。
注意：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;"><span style="white-space:pre;">    </span>2.局部内部类</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>在方法中定义的内部类称为局部内部类。与局部变量类似，在局部内部类前不加修饰符<font face="Times New Roman">public</font><font face="宋体">和</font><font face="Times New Roman">private</font><font face="宋体">，其范围为定义它的代码块。</font></span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span>

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>注意：局部内部类不仅可以访问外部类实例变量，还可以访问外部类的局部变量（但此时要求外部类的局部变量必须为<font face="Times New Roman">final</font><font face="宋体">）？？</font></span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span>

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>在类外不可直接生成局部内部类（保证局部内部类对外是不可见的）。</span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span>

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>要想使用局部内部类时需要生成对象，对象调用方法，在方法中才能调用其局部内部类。</span><span style="font-size: 10.5pt; font-family: Arial;"></span>
</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; white-space: pre-wrap; word-wrap: break-word;">    3.静态内部类</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">    用static修饰的内部类就是静态内部类，和内部类不同，其实力的创建不需要外部对象。它只能访问外部类的静态成员和静态方法，不能访问非静态成员，但却可以访问自身内部的非静态成员变量。</pre>

<p>静态内部类可以用public，protected，private修饰，静态内部类中可以定义静态成员或非静态成员。</p>
<font face="宋体">&nbsp; &nbsp;&nbsp;</font>生成（new）一个静态内部类不需要外部类成员：这是静态内部类和成员内部类的区别。静态内部类的对象可以直接生成：<br><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">    Outer.Inner in=new Outer.Inner()；<br>而不需要通过生成外部类对象来生成。这样实际上使静态内部类成为了一个顶级类。静态内部类不可用private来进行定义。</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word;">    4.匿名内部类</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word;"><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; color: rgb(51, 51, 51);">    匿名内部类是一种特殊的局部内部类，它是通过匿名类实现接口。<br>IA被定义为接口。<br>IA I=new IA(){};<br>匿名内部类的特点：<br>1，一个类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的事先或是覆盖。其实就是一个匿名子类对象。<br>2，只是为了获得一个对象实例，不需要知道其实际类型。<br>3，类名没有意义，也就是不需要使用到。</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; color: rgb(51, 51, 51);"><span style="white-space:pre;">    </span>4， new  父类OR 接口名{}。<br></pre></pre><br><br><wbr><br><pre class="prettyprint"><br><br>interface Test //定义一个接口，接口中有方法。<br>{<br>&nbsp; &nbsp; &nbsp; &nbsp; void func();<br>}<br>class Outer<br>{<br>&nbsp; &nbsp; &nbsp; &nbsp; public void method()<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test T=new Test()//new一个接口对象，然后调用接口中的func方法<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void func()<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; &nbsp; &nbsp;&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     }<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T.func();//通过new的对象可以实现调用接口中的多个引用，但最终不超过三个。<br>&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp;<br>}<br>public class Demo {<br><br>&nbsp; &nbsp; &nbsp; &nbsp; public static void main(String[] args) {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; func(new Test()<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void func(){}<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; &nbsp; &nbsp; public static void func(Test in)<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; in.func();<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>}<br></pre><span style="white-space:pre;">    </span>匿名内部类的一般好处是：是代码更加简洁，紧凑，但带来的是易读性下降。它<font color="#ff0000" style="font-family: Arial; line-height: 26px;">一般用在GUI编程中实现事件处理</font>等等。<div><span style="line-height: 23px; font-size: 10.5pt;"><span style="white-space: pre;">    </span>匿名内部类是唯一一种无构造方法类。</span><div><div><br><br><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp; &nbsp; &nbsp;</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">匿名内部类在编译的时候由系统自动起名</span><font face="Times New Roman" style="line-height: 23px; font-size: 10.5pt;">Out$1.class</font><font face="宋体" style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">。</font>

<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp; &nbsp; &nbsp;</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">如果一个对象编译时的类型是接口，那么其运行的类型为实现这个接口的类。因匿名内部类无构造方法，所以其使用范围非常的有限。 &nbsp;</span></p>
<p>一、面对对象的三大特征：封装、继承、多态。</p>
<font color="#24130c" face="Arial, Helvetica, simsun, u5b8bu4f53">    <font size="3">抽象：</font></font><font size="3">把现实中需要处理的事物通过数据的方法表达出来就是抽象。将现实的东西编程计算机的模式。</font>

<font size="3"><font face="arial, courier new, courier, 宋体, monospace">    封装：</font>把事物的数据和方法用类的方式集合起来就是封装，封装的数据和方法通过继承来实现重用。</font>

<font size="3"><font face="arial, courier new, courier, 宋体, monospace">    多态：</font>同一个方法通过方法的重载实现不同的逻辑即多态。</font>

<p>二、面对对象软件开发的大体分为，面向对象的分析，面向对象的设计，面向对象的实现。</p>
<p>分析用户的需求，从问题中抽取对象模型，细化模型，设计类，包括类的属性和类间的相互关系。同时观察是否有可以直接引用的已有的类或部件；使用Java语言，在开发中引入测试，并完善整个解决方案。</p>
<p>三、类</p>
<p>class前的修饰符分为访问控制符和非访问控制符两类。访问控制符包括public和private。非访问控制符包括abstract和final。</p>
<p>final是最终类，是不能有子类的，abstract和final不能修饰同一个类，因为抽象类本身没有具体的对象，需要派生出子类后在创建子类的对象。而最终不可能有子类。</p>
<p>创建对象的格式：类名+对象名=new 构造方法（参数）；前面是类名，后面是构造方法。</p>
<p>构造方法（构造函数）没有返回类型，也不能用void，主要完成对对象的初始化工作，一般不能直接由编程直接调用，而是用new运算符来调用。</p>
<p>如果class前面用public修饰，则默认构造方法的前面也是public修饰符。类中有static修饰的域或方法，可用类名或对象名进行访问。否则只能用对象名访问。</p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>内部类的总结：</span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span></p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp;<span style="white-space:pre;">    </span></span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">内部类是指在一个外部类的内部再定义一个类。内部类作为外部类的一个成员，并且依附于外部类而存在的。</span></p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp;<span style="white-space:pre;">    </span></span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">内部类同时具有成员和类的特性（特性不冲突）。&nbsp;内部类的分类：</span></p>
<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp;<span style="white-space:pre;">    </span></span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">成员内部类、</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">局部内部类、</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">静态内部类、</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">匿名内部类（图形是要用到，必须掌握）。</span></p>
<p><span style="white-space:pre;">        </span>1.成员内部类</p>
<p>成员内部类是定义在一个类中的类，他将信息更好的封装于一个类中，定义成员内部类后在使用它时可将其当成外部类的成员来使用，但若要使用内部类中的成员则需要创建内部类的实例。</p>
<p><span style="white-space:pre;">    </span>成员内部类和外部类之间的访问权限。</p>
<p>在类里面定义的类称之为内部类（Inner Class），内部类是外部类的一个成员。</p>
<p>内部类必须创建外部类对象才能使用。而创建内部类对象时必须先创建一个外部类对象，通过一个外部类对象才能创建内部类对象。</p>
<p>外部类名.内部类名&nbsp;变量名&nbsp;=&nbsp;new&nbsp;外部类名().new&nbsp;内部类名();</p>
<pre class="prettyprint">

class&nbsp;Inner{
<font color="#333333">//static&nbsp;int&nbsp;inner_i&nbsp;=100;&nbsp;//</font><font face="宋体"><font color="#333333">内部类中不允</font>许定</font>义<font color="#0000ff">静态</font><font color="#0000ff">变量</font>
<font color="#333333">int&nbsp;j=100;//</font><font face="宋体"><font color="#333333">内部类中外部类的</font><font color="#0000ff">实例变量</font></font>可以共存
int&nbsp;inner_i=1;
void&nbsp;inner_f1()

{
&nbsp;&nbsp;&nbsp;&nbsp;        System.out.println(i);//<font face="宋体">外部类的变量如果和内部类的变量没有同名的，则可以直接用变量名访问外部类的变量</font>
&nbsp;&nbsp;&nbsp;&nbsp;        System.out.println(j);//<font face="宋体">在内部类中访问内部类自己的变量直接用变量名</font>
&nbsp;&nbsp;&nbsp;    &nbsp;    System.out.println(this.j);//<font face="宋体">也可以在内部类中用</font><font face="Arial">"this.</font><font face="宋体">变量名</font><font face="Arial">"</font><font face="宋体">来访问内部类变量</font>
&nbsp;&nbsp;&nbsp;&nbsp;        //<font face="宋体">访问外部类中与内部类同名的</font>实例变量可用<font face="Arial">"</font><font face="宋体">外部类名</font><font face="Arial">.this.</font><font face="宋体">变量名</font><font face="Arial">"</font><font face="宋体">。</font>
&nbsp;&nbsp;&nbsp;&nbsp;        System.out.println(k);//<font face="宋体">外部类的变量如果和内部类的变量没有同名的，则可以直接用变量名访问外部类的变量</font>
&nbsp;&nbsp;&nbsp;&nbsp;        outer_f1();
&nbsp;&nbsp;&nbsp;&nbsp;        outer_f2();
}
}
</pre>

<p>成员内部类的优点：</p>
<pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">    ⑴ 内部类作为外部类的成员，可以访问外部类的私有成员或属性。（即使将外部类声明为PRIVATE，但是对于处于其内部的内部类还是可见的。）
⑵ 用内部类定义在外部类中不可访问的属性。这样就在外部类中实现了比外部类的private还要小的访问权限。
注意：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;"><span style="white-space:pre;">    </span>2.局部内部类</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>在方法中定义的内部类称为局部内部类。与局部变量类似，在局部内部类前不加修饰符<font face="Times New Roman">public</font><font face="宋体">和</font><font face="Times New Roman">private</font><font face="宋体">，其范围为定义它的代码块。</font></span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span>

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>注意：局部内部类不仅可以访问外部类实例变量，还可以访问外部类的局部变量（但此时要求外部类的局部变量必须为<font face="Times New Roman">final</font><font face="宋体">）？？</font></span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span>

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>在类外不可直接生成局部内部类（保证局部内部类对外是不可见的）。</span><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"></span>

<span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';"><span style="white-space:pre;">    </span>要想使用局部内部类时需要生成对象，对象调用方法，在方法中才能调用其局部内部类。</span><span style="font-size: 10.5pt; font-family: Arial;"></span>
</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; white-space: pre-wrap; word-wrap: break-word;">    3.静态内部类</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">    用static修饰的内部类就是静态内部类，和内部类不同，其实力的创建不需要外部对象。它只能访问外部类的静态成员和静态方法，不能访问非静态成员，但却可以访问自身内部的非静态成员变量。</pre>

<p>静态内部类可以用public，protected，private修饰，静态内部类中可以定义静态成员或非静态成员。</p>
<font face="宋体">&nbsp; &nbsp;&nbsp;</font>生成（new）一个静态内部类不需要外部类成员：这是静态内部类和成员内部类的区别。静态内部类的对象可以直接生成：<br><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 24px;">    Outer.Inner in=new Outer.Inner()；<br>而不需要通过生成外部类对象来生成。这样实际上使静态内部类成为了一个顶级类。静态内部类不可用private来进行定义。</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word;">    4.匿名内部类</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word;"><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; color: rgb(51, 51, 51);">    匿名内部类是一种特殊的局部内部类，它是通过匿名类实现接口。<br>IA被定义为接口。<br>IA I=new IA(){};<br>匿名内部类的特点：<br>1，一个类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的事先或是覆盖。其实就是一个匿名子类对象。<br>2，只是为了获得一个对象实例，不需要知道其实际类型。<br>3，类名没有意义，也就是不需要使用到。</pre><pre id="best-content-521589254" accuse="aContent" style="margin-top: 0px; margin-bottom: 10px; padding: 0px; font-family: arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; color: rgb(51, 51, 51);"><span style="white-space:pre;">    </span>4， new  父类OR 接口名{}。<br></pre></pre><br><br><wbr><br><pre class="prettyprint"><br><br>interface Test //定义一个接口，接口中有方法。<br>{<br>&nbsp; &nbsp; &nbsp; &nbsp; void func();<br>}<br>class Outer<br>{<br>&nbsp; &nbsp; &nbsp; &nbsp; public void method()<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Test T=new Test()//new一个接口对象，然后调用接口中的func方法<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void func()<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; &nbsp; &nbsp;&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     }<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T.func();//通过new的对象可以实现调用接口中的多个引用，但最终不超过三个。<br>&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp;<br>}<br>public class Demo {<br><br>&nbsp; &nbsp; &nbsp; &nbsp; public static void main(String[] args) {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TODO Auto-generated method stub<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; func(new Test()<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void func(){}<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; &nbsp; &nbsp; public static void func(Test in)<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; in.func();<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>}<br></pre><span style="white-space:pre;">    </span>匿名内部类的一般好处是：是代码更加简洁，紧凑，但带来的是易读性下降。它<font color="#ff0000" style="font-family: Arial; line-height: 26px;">一般用在GUI编程中实现事件处理</font>等等。<div><span style="line-height: 23px; font-size: 10.5pt;"><span style="white-space: pre;">    </span>匿名内部类是唯一一种无构造方法类。</span><div><div><br><br><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp; &nbsp; &nbsp;</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">匿名内部类在编译的时候由系统自动起名</span><font face="Times New Roman" style="line-height: 23px; font-size: 10.5pt;">Out$1.class</font><font face="宋体" style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">。</font>

<p><span style="mso-spacerun:'yes'; font-size:10.5000pt; font-family:'宋体';">&nbsp; &nbsp; &nbsp;</span><span style="line-height: 23px; font-family: 宋体; font-size: 10.5pt;">如果一个对象编译时的类型是接口，那么其运行的类型为实现这个接口的类。因匿名内部类无构造方法，所以其使用范围非常的有限。 &nbsp;</span></p>
</div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、面对对象的三大特征：封装、继承、多态。&lt;/p&gt;
&lt;font color=&quot;#24130c&quot;   face=&quot;Arial, Helvetica, simsun, u5b8bu4f53&quot;   &gt;    &lt;font size=&quot;3&quot;   &gt;抽象：&lt;/font&gt;&lt;/font&gt;&lt;font size=&quot;3&quot;   &gt;把现实中需要处理的事物通过数据的方法表达出来就是抽象。将现实的东西编程计算机的模式。&lt;/font&gt;

&lt;font size=&quot;3&quot;   &gt;&lt;font face=&quot;arial, courier new, courier, 宋体, monospace&quot;   &gt;    封装：&lt;/font&gt;把事物的数据和方法用类的方式集合起来就是封装，封装的数据和方法通过继承来实现重用。&lt;/font&gt;

&lt;font size=&quot;3&quot;   &gt;&lt;font face=&quot;arial, courier new, courier, 宋体, monospace&quot;   &gt;    多态：&lt;/font&gt;同一个方法通过方法的重载实现不同的逻辑即多态。&lt;/font&gt;

&lt;p&gt;二、面对对象软件开发的大体分为，面向对象的分析，面向对象的设计，面向对象的实现。&lt;/p&gt;
&lt;p&gt;分析用户的需求，从问题中抽取对象模型，细化模型，设计类，包括类的属性和类间的相互关系。同时观察是否有可以直接引用的已有的类或部件；使用Java语言，在开发中引入测试，并完善整个解决方案。&lt;br&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://wait.im/tags/JAVA/"/>
    
  </entry>
  
</feed>
